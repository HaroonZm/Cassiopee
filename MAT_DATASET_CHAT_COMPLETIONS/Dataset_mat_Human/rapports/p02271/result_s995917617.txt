================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import itertools

n = int(input())
A = tuple(map(int, input().split()))
q = int(input())
B = tuple(map(int, input().split()))

memo = set()
for i in range(1, n + 1):
    for nums in itertools.combinations(A, i):
        memo.add(sum(nums))

for m in B:
    print('yes' if m in memo else 'no')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'n' (ID: 77)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -4.310693111619912e-05
    2. '\' → logprob: -11.750042915344238
    3. 'import' → logprob: -11.875042915344238
    4. '(' → logprob: -12.250042915344238
    5. ' as' → logprob: -12.625042915344238
    6. '```' → logprob: -12.625042915344238
    7. 'as' → logprob: -12.750042915344238
    8. ',' → logprob: -12.750042915344238
    9. '\.' → logprob: -13.625042915344238
    10. '.import' → logprob: -14.250042915344238

Token 4: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.15395419299602509
    2. '.' → logprob: -2.403954267501831
    3. 't' → logprob: -3.653954267501831
    4. '=' → logprob: -4.278954029083252
    5. 'e' → logprob: -6.028954029083252
    6. ' =' → logprob: -6.278954029083252
    7. ',' → logprob: -6.278954029083252
    8. 'ext' → logprob: -6.403954029083252
    9. '_t' → logprob: -7.153954029083252
    10. 'u' → logprob: -7.278954029083252

Token 5: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.007039181888103485
    2. ' itertools' → logprob: -5.1320390701293945
    3. '1' → logprob: -8.382039070129395
    4. '3' → logprob: -8.507039070129395
    5. 'it' → logprob: -8.632039070129395
    6. '5' → logprob: -9.007039070129395
    7. '4' → logprob: -9.132039070129395
    8. '0' → logprob: -9.132039070129395
    9. ' int' → logprob: -9.257039070129395
    10. '10' → logprob: -10.382039070129395

Token 6: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00019209683523513377
    2. '(input' → logprob: -9.875191688537598
    3. '(n' → logprob: -10.125191688537598
    4. ' (' → logprob: -10.375191688537598
    5. '('' → logprob: -11.125191688537598
    6. '()' → logprob: -11.250191688537598
    7. '(`' → logprob: -11.375191688537598
    8. '```' → logprob: -12.250191688537598
    9. '(user' → logprob: -12.375191688537598
    10. ')' → logprob: -13.000191688537598

Token 7: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1537609100341797
    2. '()' → logprob: -2.2787609100341797
    3. ')' → logprob: -3.6537609100341797
    4. '())' → logprob: -4.40376091003418
    5. '(
' → logprob: -7.15376091003418
    6. '('' → logprob: -7.65376091003418
    7. '(

' → logprob: -8.52876091003418
    8. '))' → logprob: -8.90376091003418
    9. '("("' → logprob: -9.40376091003418
    10. '(""))' → logprob: -9.65376091003418

Token 8: 'A' (ID: 32)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.647388756275177
    2. 'for' → logprob: -1.1473886966705322
    3. ''' → logprob: -3.2723886966705322
    4. '*' → logprob: -3.5223886966705322
    5. '.' → logprob: -4.272388935089111
    6. 'a' → logprob: -4.522388935089111
    7. '`' → logprob: -4.647388935089111
    8. 's' → logprob: -5.022388935089111
    9. '[' → logprob: -5.522388935089111
    10. '_' → logprob: -5.647388935089111

Token 9: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.06275740265846252
    2. '.' → logprob: -2.8127574920654297
    3. '[:]' → logprob: -8.81275749206543
    4. '\[' → logprob: -8.81275749206543
    5. '[i' → logprob: -9.31275749206543
    6. ',' → logprob: -9.56275749206543
    7. '[]' → logprob: -9.68775749206543
    8. '[n' → logprob: -9.93775749206543
    9. 's' → logprob: -9.93775749206543
    10. '=' → logprob: -10.68775749206543

Token 10: ' tuple' (ID: 31311)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.4608011543750763
    2. 'list' → logprob: -1.085801124572754
    3. ' []' → logprob: -4.210801124572754
    4. ' [' → logprob: -4.585801124572754
    5. '[]' → logprob: -5.960801124572754
    6. ' itertools' → logprob: -6.835801124572754
    7. '[' → logprob: -7.085801124572754
    8. 'it' → logprob: -7.710801124572754
    9. '[list' → logprob: -7.710801124572754
    10. 'input' → logprob: -7.835801124572754

Token 11: '(map' (ID: 16946)
  Prédit: '(it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.09144506603479385
    2. '(' → logprob: -2.466444969177246
    3. '(int' → logprob: -6.841444969177246
    4. '(input' → logprob: -7.216444969177246
    5. '(iter' → logprob: -8.341444969177246
    6. '(range' → logprob: -8.966444969177246
    7. '(list' → logprob: -9.716444969177246
    8. '(import' → logprob: -9.966444969177246
    9. '(map' → logprob: -10.216444969177246
    10. ' itertools' → logprob: -10.341444969177246

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04004320129752159
    2. '(' → logprob: -3.4150431156158447
    3. '(str' → logprob: -5.665043354034424
    4. '(lambda' → logprob: -6.915043354034424
    5. 'int' → logprob: -7.040043354034424
    6. 'list' → logprob: -8.165042877197266
    7. ')' → logprob: -8.540042877197266
    8. '<int' → logprob: -8.665042877197266
    9. '[int' → logprob: -9.790042877197266
    10. '=int' → logprob: -9.915042877197266

Token 13: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01859797164797783
    2. '(' → logprob: -4.7685980796813965
    3. ',input' → logprob: -4.7685980796813965
    4. ',' → logprob: -6.7685980796813965
    5. 'input' → logprob: -8.643597602844238
    6. ' ,' → logprob: -10.518597602844238
    7. '=input' → logprob: -10.893597602844238
    8. ' (' → logprob: -11.268597602844238
    9. ')' → logprob: -11.268597602844238
    10. '))' → logprob: -11.518597602844238

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.11292260885238647
    2. ' input' → logprob: -2.2379226684570312
    3. '(input' → logprob: -9.737922668457031
    4. ',input' → logprob: -10.862922668457031
    5. ' ' → logprob: -11.862922668457031
    6. ')' → logprob: -12.362922668457031
    7. '=input' → logprob: -12.737922668457031
    8. 'range' → logprob: -12.737922668457031
    9. '	input' → logprob: -14.237922668457031
    10. '))' → logprob: -14.612922668457031

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00021998681768309325
    2. '()' → logprob: -9.00022029876709
    3. '()))' → logprob: -9.37522029876709
    4. '())' → logprob: -12.62522029876709
    5. '))' → logprob: -13.12522029876709
    6. '())))' → logprob: -13.37522029876709
    7. '()));' → logprob: -13.50022029876709
    8. '(' → logprob: -13.50022029876709
    9. ' ().' → logprob: -14.37522029876709
    10. '.split' → logprob: -14.62522029876709

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000431861262768507
    2. 'strip' → logprob: -7.750432014465332
    3. 'rstrip' → logprob: -14.375432014465332
    4. ' split' → logprob: -14.875432014465332
    5. '(split' → logprob: -15.250432014465332
    6. 's' → logprob: -17.875431060791016
    7. 'spl' → logprob: -18.125431060791016
    8. ')' → logprob: -19.000431060791016
    9. 'read' → logprob: -19.500431060791016
    10. '.split' → logprob: -20.500431060791016

Token 17: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5032339692115784
    2. '()))' → logprob: -1.5032339096069336
    3. ')' → logprob: -2.0032339096069336
    4. '())' → logprob: -3.6282339096069336
    5. '(' → logprob: -4.628233909606934
    6. '()' → logprob: -6.878233909606934
    7. ')))' → logprob: -7.753233909606934
    8. '('' → logprob: -9.378233909606934
    9. '())))' → logprob: -9.503233909606934
    10. ''))' → logprob: -10.128233909606934

Token 18: 'q' (ID: 80)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7754413485527039
    2. ')' → logprob: -1.6504414081573486
    3. '\' → logprob: -2.1504414081573486
    4. 'for' → logprob: -2.5254414081573486
    5. ')
' → logprob: -2.9004414081573486
    6. '' → logprob: -3.6504414081573486
    7. '.' → logprob: -4.5254411697387695
    8. '
' → logprob: -4.9004411697387695
    9. ')\' → logprob: -5.1504411697387695
    10. ',
' → logprob: -5.2754411697387695

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0954585075378418
    2. 'u' → logprob: -2.470458507537842
    3. '=' → logprob: -5.095458507537842
    4. 'uer' → logprob: -8.845458984375
    5. 'ue' → logprob: -8.970458984375
    6. 'uries' → logprob: -10.595458984375
    7. 'ual' → logprob: -10.595458984375
    8. '.' → logprob: -11.345458984375
    9. ' u' → logprob: -11.720458984375
    10. '  ' → logprob: -12.095458984375

Token 20: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.07946106046438217
    2. ' int' → logprob: -2.579461097717285
    3. ' []' → logprob: -8.954461097717285
    4. '[int' → logprob: -8.954461097717285
    5. '[]' → logprob: -9.079461097717285
    6. ' itertools' → logprob: -9.329461097717285
    7. 'it' → logprob: -9.829461097717285
    8. ' ' → logprob: -11.079461097717285
    9. '(int' → logprob: -11.704461097717285
    10. '=int' → logprob: -12.579461097717285

Token 21: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10362827032804489
    2. '(input' → logprob: -2.353628158569336
    3. '()' → logprob: -5.728628158569336
    4. '(
' → logprob: -10.603628158569336
    5. '('' → logprob: -10.853628158569336
    6. '(`' → logprob: -10.978628158569336
    7. ' (' → logprob: -11.478628158569336
    8. 'input' → logprob: -11.603628158569336
    9. '(int' → logprob: -11.603628158569336
    10. '(()' → logprob: -11.978628158569336

Token 22: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.38754773139953613
    2. '()' → logprob: -1.3875477313995361
    3. '())' → logprob: -2.637547731399536
    4. '))' → logprob: -10.887547492980957
    5. '`)' → logprob: -11.262547492980957
    6. '()
' → logprob: -12.012547492980957
    7. ')
' → logprob: -12.137547492980957
    8. '())
' → logprob: -12.137547492980957
    9. '")' → logprob: -12.762547492980957
    10. '')' → logprob: -13.387547492980957

Token 23: 'B' (ID: 33)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -3.35706390615087e-05
    2. '```' → logprob: -10.625033378601074
    3. 'f' → logprob: -12.875033378601074
    4. '\n' → logprob: -13.125033378601074
    5. ' for' → logprob: -13.250033378601074
    6. '
' → logprob: -13.875033378601074
    7. '\' → logprob: -14.250033378601074
    8. '	for' → logprob: -15.375033378601074
    9. '``' → logprob: -15.500033378601074
    10. 'd' → logprob: -15.625033378601074

Token 24: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08517517894506454
    2. '=' → logprob: -2.5851752758026123
    3. '_' → logprob: -5.585175037384033
    4. ' ' → logprob: -7.085175037384033
    5. '.' → logprob: -7.335175037384033
    6. 's' → logprob: -8.085175514221191
    7. '[' → logprob: -8.460175514221191
    8. '=[]' → logprob: -8.960175514221191
    9. ')' → logprob: -9.085175514221191
    10. ',' → logprob: -9.460175514221191

Token 25: ' tuple' (ID: 31311)
  Prédit: 'tuple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.8488448858261108
    2. ' []' → logprob: -1.5988448858261108
    3. '[]' → logprob: -1.7238448858261108
    4. ' tuple' → logprob: -2.0988450050354004
    5. '[' → logprob: -3.7238450050354004
    6. 'list' → logprob: -4.4738450050354
    7. '(tuple' → logprob: -4.4738450050354
    8. ' [' → logprob: -4.7238450050354
    9. '()' → logprob: -5.3488450050354
    10. '[int' → logprob: -6.2238450050354

Token 26: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5814298391342163
    2. '(map' → logprob: -0.8314298391342163
    3. '(it' → logprob: -5.706429958343506
    4. '(int' → logprob: -7.081429958343506
    5. '(iter' → logprob: -8.081429481506348
    6. '(tuple' → logprob: -8.331429481506348
    7. '(list' → logprob: -8.956429481506348
    8. '((' → logprob: -9.456429481506348
    9. '(eval' → logprob: -9.456429481506348
    10. '(input' → logprob: -9.456429481506348

Token 27: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00029387109680101275
    2. 'int' → logprob: -9.250293731689453
    3. '(' → logprob: -9.375293731689453
    4. '[int' → logprob: -9.625293731689453
    5. '=int' → logprob: -10.875293731689453
    6. '<int' → logprob: -11.500293731689453
    7. '<|end|>' → logprob: -11.750293731689453
    8. ']int' → logprob: -12.125293731689453
    9. ')' → logprob: -13.750293731689453
    10. ',int' → logprob: -14.000293731689453

Token 28: ',' (ID: 11)
  Prédit: ',int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',int' → logprob: -0.431525856256485
    2. '(int' → logprob: -1.1815258264541626
    3. ',' → logprob: -3.431525945663452
    4. 'int' → logprob: -4.681525707244873
    5. '[int' → logprob: -7.181525707244873
    6. '=int' → logprob: -7.306525707244873
    7. '<int' → logprob: -7.931525707244873
    8. ' ,' → logprob: -8.931526184082031
    9. ':int' → logprob: -10.056526184082031
    10. '(' → logprob: -10.306526184082031

Token 29: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.002877272432669997
    2. ' int' → logprob: -5.877877235412598
    3. 'input' → logprob: -9.877877235412598
    4. '(int' → logprob: -11.127877235412598
    5. '[int' → logprob: -12.752877235412598
    6. ' input' → logprob: -14.002877235412598
    7. '=int' → logprob: -14.627877235412598
    8. ',int' → logprob: -14.627877235412598
    9. ' ' → logprob: -14.752877235412598
    10. 'list' → logprob: -15.002877235412598

Token 30: '().' (ID: 1454)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0009943449404090643
    2. '().' → logprob: -7.5009942054748535
    3. '(' → logprob: -8.750994682312012
    4. 'int' → logprob: -9.250994682312012
    5. '[int' → logprob: -9.625994682312012
    6. ',int' → logprob: -9.875994682312012
    7. '```' → logprob: -10.750994682312012
    8. '=int' → logprob: -10.875994682312012
    9. '<int' → logprob: -11.125994682312012
    10. ')(' → logprob: -12.750994682312012

Token 31: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.511406809295295e-06
    2. ')' → logprob: -12.125006675720215
    3. 'spl' → logprob: -14.875006675720215
    4. '))' → logprob: -15.750006675720215
    5. '(split' → logprob: -16.0000057220459
    6. 'plit' → logprob: -16.3750057220459
    7. ' split' → logprob: -16.3750057220459
    8. 'int' → logprob: -16.6250057220459
    9. 'strip' → logprob: -16.7500057220459
    10. '```' → logprob: -16.7500057220459

Token 32: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3458928167819977
    2. '()))' → logprob: -1.3458927869796753
    3. ')' → logprob: -3.845892906188965
    4. '())' → logprob: -4.970892906188965
    5. '()' → logprob: -5.595892906188965
    6. '(' → logprob: -9.720892906188965
    7. ' ))' → logprob: -12.220892906188965
    8. ')))' → logprob: -12.220892906188965
    9. '()))
' → logprob: -12.345892906188965
    10. '()));' → logprob: -12.345892906188965

Token 33: 'memo' (ID: 113822)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.042923249304294586
    2. '\' → logprob: -4.792923450469971
    3. '\n' → logprob: -5.542923450469971
    4. '#' → logprob: -5.542923450469971
    5. '.' → logprob: -5.792923450469971
    6. '
' → logprob: -5.792923450469971
    7. ')' → logprob: -5.917923450469971
    8. '(' → logprob: -6.042923450469971
    9. '' → logprob: -6.167923450469971
    10. 'n' → logprob: -6.292923450469971

Token 34: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1863300800323486
    2. '_' → logprob: -1.1863300800323486
    3. '.setdefault' → logprob: -1.6863300800323486
    4. '.' → logprob: -1.8113300800323486
    5. '=' → logprob: -3.9363300800323486
    6. ' =' → logprob: -4.9363298416137695
    7. '.get' → logprob: -5.1863298416137695
    8. '[(' → logprob: -6.3113298416137695
    9. ')' → logprob: -6.8113298416137695
    10. 's' → logprob: -7.1863298416137695

Token 35: ' set' (ID: 920)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.0020743636414408684
    2. ' {}' → logprob: -6.252074241638184
    3. 'dict' → logprob: -9.627074241638184
    4. 'set' → logprob: -9.752074241638184
    5. '{' → logprob: -10.877074241638184
    6. ' dict' → logprob: -14.252074241638184
    7. ' set' → logprob: -14.252074241638184
    8. '[' → logprob: -14.502074241638184
    9. '={}' → logprob: -15.502074241638184
    10. '{}
' → logprob: -15.877074241638184

Token 36: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.576277494430542
    2. '()' → logprob: -0.826277494430542
    3. '((' → logprob: -8.451277732849121
    4. '([' → logprob: -10.576277732849121
    5. '(
' → logprob: -10.826277732849121
    6. '([]' → logprob: -11.076277732849121
    7. '(

' → logprob: -11.076277732849121
    8. '(()' → logprob: -11.201277732849121
    9. '([(' → logprob: -12.076277732849121
    10. ' ()' → logprob: -12.826277732849121

Token 37: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6069191098213196
    2. '
' → logprob: -1.6069190502166748
    3. '(' → logprob: -2.106919050216675
    4. ' for' → logprob: -2.981919050216675
    5. '\' → logprob: -3.981919050216675
    6. ')' → logprob: -4.106919288635254
    7. '\n' → logprob: -4.606919288635254
    8. ',' → logprob: -5.106919288635254
    9. ':' → logprob: -5.231919288635254
    10. ' 
' → logprob: -5.356919288635254

Token 38: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.24755093455314636
    2. ' r' → logprob: -2.6225509643554688
    3. ' itertools' → logprob: -3.1225509643554688
    4. ' _' → logprob: -3.7475509643554688
    5. ' ' → logprob: -4.247550964355469
    6. ' s' → logprob: -4.747550964355469
    7. ' length' → logprob: -4.747550964355469
    8. 'i' → logprob: -4.872550964355469
    9. ' comb' → logprob: -4.997550964355469
    10. '_' → logprob: -5.247550964355469

Token 39: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03667604550719261
    2. 'in' → logprob: -3.5366759300231934
    3. 'n' → logprob: -5.161675930023193
    4. ' ' → logprob: -7.786675930023193
    5. ',' → logprob: -7.911675930023193
    6. 'range' → logprob: -9.411676406860352
    7. '_' → logprob: -9.661676406860352
    8. 's' → logprob: -9.786676406860352
    9. ' n' → logprob: -10.036676406860352
    10. '  ' → logprob: -10.286676406860352

Token 40: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.005736083257943392
    2. 'range' → logprob: -5.255735874176025
    3. ' itertools' → logprob: -7.630735874176025
    4. 'it' → logprob: -12.255736351013184
    5. '(range' → logprob: -12.755736351013184
    6. ' xrange' → logprob: -13.005736351013184
    7. ' A' → logprob: -13.130736351013184
    8. ' ' → logprob: -13.380736351013184
    9. 'A' → logprob: -13.755736351013184
    10. '	range' → logprob: -13.755736351013184

Token 41: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39563295245170593
    2. '(n' → logprob: -1.1456329822540283
    3. '(len' → logprob: -4.770632743835449
    4. '(q' → logprob: -8.77063274383545
    5. ' (' → logprob: -9.89563274383545
    6. '((' → logprob: -11.39563274383545
    7. '(i' → logprob: -11.77063274383545
    8. ' ' → logprob: -12.39563274383545
    9. '(s' → logprob: -12.39563274383545
    10. '(range' → logprob: -12.39563274383545

Token 42: '1' (ID: 16)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5583935976028442
    2. '1' → logprob: -1.0583935976028442
    3. ' n' → logprob: -3.0583934783935547
    4. 'q' → logprob: -4.058393478393555
    5. ' ' → logprob: -4.433393478393555
    6. 'len' → logprob: -6.183393478393555
    7. ' q' → logprob: -6.558393478393555
    8. ' len' → logprob: -7.808393478393555
    9. '2' → logprob: -8.058393478393555
    10. '(n' → logprob: -9.058393478393555

Token 43: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0017831178847700357
    2. ' ,' → logprob: -6.7517828941345215
    3. ',n' → logprob: -7.5017828941345215
    4. ',len' → logprob: -9.75178337097168
    5. ' ' → logprob: -14.87678337097168
    6. ',
' → logprob: -14.87678337097168
    7. 'n' → logprob: -15.00178337097168
    8. ',length' → logprob: -15.75178337097168
    9. '+' → logprob: -16.00178337097168
    10. '1' → logprob: -16.00178337097168

Token 44: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03251732140779495
    2. ' n' → logprob: -3.657517433166504
    3. 'len' → logprob: -5.407517433166504
    4. 'q' → logprob: -6.657517433166504
    5. ' len' → logprob: -8.157517433166504
    6. ' ' → logprob: -9.907517433166504
    7. ' q' → logprob: -10.407517433166504
    8. '10' → logprob: -11.032517433166504
    9. '4' → logprob: -11.532517433166504
    10. '6' → logprob: -11.907517433166504

Token 45: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.16022524237632751
    2. ' +' → logprob: -1.91022527217865
    3. '+n' → logprob: -15.410224914550781
    4. '+
' → logprob: -15.660224914550781
    5. ' ' → logprob: -15.785224914550781
    6. ' +
' → logprob: -15.910224914550781
    7. '1' → logprob: -16.66022491455078
    8. '):' → logprob: -16.66022491455078
    9. ')' → logprob: -16.78522491455078
    10. '-' → logprob: -17.41022491455078

Token 46: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.002805821830406785
    2. ' ' → logprob: -5.877805709838867
    3. '2' → logprob: -14.002805709838867
    4. '```' → logprob: -17.127805709838867
    5. '   ' → logprob: -18.377805709838867
    6. '11' → logprob: -18.565305709838867
    7. '

' → logprob: -18.565305709838867
    8. '  ' → logprob: -18.690305709838867
    9. 'n' → logprob: -18.815305709838867
    10. ' ' → logprob: -18.877805709838867

Token 47: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.47757811343763e-05
    2. ' ' → logprob: -10.125044822692871
    3. '2' → logprob: -12.375044822692871
    4. '```' → logprob: -16.812543869018555
    5. 'i' → logprob: -16.875043869018555
    6. ')' → logprob: -17.000043869018555
    7. '   ' → logprob: -17.250043869018555
    8. '3' → logprob: -17.312543869018555
    9. '``' → logprob: -17.625043869018555
    10. 'n' → logprob: -18.062543869018555

Token 48: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0029661727603524923
    2. ')' → logprob: -6.627966403961182
    3. ' ):' → logprob: -7.127966403961182
    4. ':' → logprob: -7.127966403961182
    5. '):
' → logprob: -11.002965927124023
    6. ',' → logprob: -11.252965927124023
    7. '():' → logprob: -13.377965927124023
    8. ' )' → logprob: -14.127965927124023
    9. '(' → logprob: -14.252965927124023
    10. '}:' → logprob: -14.877965927124023

Token 49: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04103614762425423
    2. ' for' → logprob: -4.291036128997803
    3. ' itertools' → logprob: -4.416036128997803
    4. ':' → logprob: -4.541036128997803
    5. ' ' → logprob: -6.416036128997803
    6. 'for' → logprob: -6.916036128997803
    7. '    
' → logprob: -8.041036605834961
    8. '  ' → logprob: -9.041036605834961
    9. ',' → logprob: -9.666036605834961
    10. ')' → logprob: -9.666036605834961

Token 50: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.43367016315460205
    2. 'for' (adapté à ' for') → logprob: -1.058670163154602
    3. '   ' → logprob: -5.5586700439453125
    4. ' memo' → logprob: -7.8086700439453125
    5. ' itertools' → logprob: -8.433670043945312
    6. 'memo' → logprob: -8.683670043945312
    7. ' combinations' → logprob: -9.433670043945312
    8. 'com' → logprob: -10.058670043945312
    9. '	for' → logprob: -10.308670043945312
    10. 'it' → logprob: -10.558670043945312

Token 51: ' nums' (ID: 18117)
  Prédit: 'comb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'comb' → logprob: -0.8103200793266296
    2. 'combo' → logprob: -1.9353201389312744
    3. ' comb' → logprob: -2.1853201389312744
    4. 'c' → logprob: -2.1853201389312744
    5. 'it' → logprob: -2.8103201389312744
    6. ' itertools' → logprob: -3.4353201389312744
    7. 'subset' → logprob: -3.9353201389312744
    8. 'com' → logprob: -4.185319900512695
    9. ' combo' → logprob: -4.310319900512695
    10. 'p' → logprob: -4.685319900512695

Token 52: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02661203034222126
    2. 'in' → logprob: -3.6516120433807373
    3. 's' → logprob: -8.276612281799316
    4. '_in' → logprob: -11.151612281799316
    5. '	in' → logprob: -11.276612281799316
    6. ' ' → logprob: -11.776612281799316
    7. '   ' → logprob: -13.151612281799316
    8. 'comb' → logprob: -13.151612281799316
    9. '_comb' → logprob: -13.276612281799316
    10. 'combo' → logprob: -13.526612281799316

Token 53: ' itertools' (ID: 103178)
  Prédit: ' itertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.038043901324272156
    2. 'it' → logprob: -3.288043975830078
    3. '   ' → logprob: -14.038043975830078
    4. ' it' → logprob: -14.038043975830078
    5. '(it' → logprob: -14.663043975830078
    6. '```' → logprob: -16.663043975830078
    7. ' ' → logprob: -16.788043975830078
    8. '	it' → logprob: -16.913043975830078
    9. 'iter' → logprob: -17.163043975830078
    10. '    ' → logprob: -17.288043975830078

Token 54: '.com' (ID: 1136)
  Prédit: '.com'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.com' → logprob: -0.00013512482109945267
    2. '.' → logprob: -9.12513542175293
    3. '.per' → logprob: -11.50013542175293
    4. '.c' → logprob: -11.87513542175293
    5. ' .' → logprob: -12.62513542175293
    6. 'com' → logprob: -12.75013542175293
    7. ' combinations' → logprob: -14.25013542175293
    8. '.product' → logprob: -14.25013542175293
    9. '.chain' → logprob: -14.25013542175293
    10. '.con' → logprob: -15.00013542175293

Token 55: 'binations' (ID: 113572)
  Prédit: 'binations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'binations' → logprob: -0.001116880914196372
    2. 'b' → logprob: -7.001116752624512
    3. 'inations' → logprob: -9.251116752624512
    4. '.com' → logprob: -10.126116752624512
    5. 'bin' → logprob: -10.376116752624512
    6. 'com' → logprob: -11.001116752624512
    7. '```' → logprob: -11.001116752624512
    8. 'bination' → logprob: -14.501116752624512
    9. 'r' → logprob: -15.001116752624512
    10. '[b' → logprob: -15.251116752624512

Token 56: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -4.692145012086257e-05
    2. '(' → logprob: -10.000046730041504
    3. '(B' → logprob: -14.625046730041504
    4. ' (' → logprob: -14.875046730041504
    5. ')' → logprob: -16.00004768371582
    6. '(S' → logprob: -16.50004768371582
    7. '((' → logprob: -16.50004768371582
    8. '```' → logprob: -16.50004768371582
    9. '(range' → logprob: -16.75004768371582
    10. '(I' → logprob: -17.00004768371582

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.015111875720322132
    2. ' ,' → logprob: -4.640111923217773
    3. ',i' → logprob: -5.640111923217773
    4. '(i' → logprob: -6.640111923217773
    5. ',n' → logprob: -8.015111923217773
    6. '(' → logprob: -9.390111923217773
    7. '(n' → logprob: -10.265111923217773
    8. ',k' → logprob: -11.890111923217773
    9. '`,' → logprob: -12.015111923217773
    10. 's' → logprob: -12.765111923217773

Token 58: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.4740803837776184
    2. 'i' → logprob: -0.9740803837776184
    3. '	i' → logprob: -13.724080085754395
    4. ')i' → logprob: -13.974080085754395
    5. ')' → logprob: -14.099080085754395
    6. ' ' → logprob: -14.599080085754395
    7. '{i' → logprob: -16.72408103942871
    8. '```' → logprob: -16.84908103942871
    9. ',i' → logprob: -17.34908103942871
    10. '   ' → logprob: -17.59908103942871

Token 59: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00011963568249484524
    2. '):
' → logprob: -9.37511920928955
    3. ' ):' → logprob: -11.25011920928955
    4. ')' → logprob: -11.37511920928955
    5. ':' → logprob: -11.62511920928955
    6. '():' → logprob: -14.62511920928955
    7. ')):' → logprob: -15.25011920928955
    8. '):
' → logprob: -15.75011920928955
    9. ',' → logprob: -16.250120162963867
    10. '}:' → logprob: -16.375120162963867

Token 60: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001976095838472247
    2. '
' → logprob: -7.501976013183594
    3. ' if' → logprob: -7.751976013183594
    4. '    
' → logprob: -7.876976013183594
    5. ' memo' → logprob: -8.876976013183594
    6. '       ' → logprob: -9.501976013183594
    7. '    ' → logprob: -9.626976013183594
    8. '```' → logprob: -9.626976013183594
    9. ',' → logprob: -10.001976013183594
    10. ' ' → logprob: -10.439476013183594

Token 61: ' memo' (ID: 46393)
  Prédit: 'memo'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'memo' (adapté à ' memo') → logprob: -0.844404935836792
    2. ' if' → logprob: -1.594404935836792
    3. ' memo' → logprob: -1.969404935836792
    4. '   ' → logprob: -2.344404935836792
    5. 'if' → logprob: -2.344404935836792
    6. 'sum' → logprob: -4.094405174255371
    7. ' s' → logprob: -4.844405174255371
    8. 's' → logprob: -5.594405174255371
    9. ' ' → logprob: -6.094405174255371
    10. ' sum' → logprob: -6.219405174255371

Token 62: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.31349435448646545
    2. '.' → logprob: -1.313494324684143
    3. '.update' → logprob: -8.938494682312012
    4. '.setdefault' → logprob: -10.063494682312012
    5. '.=' → logprob: -11.063494682312012
    6. ' .' → logprob: -11.438494682312012
    7. '.append' → logprob: -11.938494682312012
    8. 'add' → logprob: -12.063494682312012
    9. '.union' → logprob: -12.063494682312012
    10. ').' → logprob: -12.938494682312012

Token 63: '(sum' (ID: 45528)
  Prédit: '(sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.19553379714488983
    2. '(nums' → logprob: -1.8205337524414062
    3. '(tuple' → logprob: -4.570533752441406
    4. '(' → logprob: -5.445533752441406
    5. '(f' → logprob: -7.820533752441406
    6. 'sum' → logprob: -7.945533752441406
    7. 'nums' → logprob: -9.820533752441406
    8. '(len' → logprob: -9.820533752441406
    9. '(s' → logprob: -10.195533752441406
    10. '(hash' → logprob: -10.945533752441406

Token 64: '(nums' (ID: 40372)
  Prédit: '(nums'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(nums' → logprob: -0.0009256341145373881
    2. '(' → logprob: -7.000925540924072
    3. '(num' → logprob: -11.25092601776123
    4. '(numbers' → logprob: -14.50092601776123
    5. ' (' → logprob: -15.00092601776123
    6. ')' → logprob: -16.250925064086914
    7. 'nums' → logprob: -16.375925064086914
    8. '(tokens' → logprob: -17.000925064086914
    9. '(ids' → logprob: -17.125925064086914
    10. '(chars' → logprob: -17.625925064086914

Token 65: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.018250731751322746
    2. ')' → logprob: -4.018250942230225
    3. '))
' → logprob: -9.518250465393066
    4. ')))' → logprob: -11.268250465393066
    5. ' ))' → logprob: -12.018250465393066
    6. '()))' → logprob: -12.393250465393066
    7. ')
' → logprob: -13.143250465393066
    8. '),' → logprob: -14.643250465393066
    9. ' )' → logprob: -15.018250465393066
    10. '))

' → logprob: -15.143250465393066

Token 66: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0004982246900908649
    2. ' for' → logprob: -8.250497817993164
    3. 'print' → logprob: -8.625497817993164
    4. 'answer' → logprob: -10.750497817993164
    5. 'result' → logprob: -11.875497817993164
    6. '\n' → logprob: -11.875497817993164
    7. 'results' → logprob: -12.125497817993164
    8. 'answers' → logprob: -12.250497817993164
    9. '\' → logprob: -13.125497817993164
    10. '```' → logprob: -13.125497817993164

Token 67: ' m' (ID: 284)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.7253256440162659
    2. ' b' → logprob: -1.475325584411621
    3. 'i' → logprob: -2.225325584411621
    4. 'x' → logprob: -2.975325584411621
    5. '_' → logprob: -3.100325584411621
    6. ' i' → logprob: -3.600325584411621
    7. ' x' → logprob: -4.350325584411621
    8. 'B' → logprob: -4.850325584411621
    9. ' _' → logprob: -5.225325584411621
    10. 'q' → logprob: -5.225325584411621

Token 68: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0701344907283783
    2. 'in' → logprob: -2.695134401321411
    3. 'o' → logprob: -9.195134162902832
    4. ' ' → logprob: -10.320134162902832
    5. 'i' → logprob: -10.570134162902832
    6. 'e' → logprob: -10.945134162902832
    7. '	in' → logprob: -12.070134162902832
    8. ' ' → logprob: -12.445134162902832
    9. '_' → logprob: -13.070134162902832
    10. '_in' → logprob: -13.445134162902832

Token 69: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.5625264644622803
    2. 'memo' → logprob: -1.0625264644622803
    3. 'emo' → logprob: -2.9375264644622803
    4. ' memo' → logprob: -4.437526702880859
    5. ' B' → logprob: -4.937526702880859
    6. 'm' → logprob: -5.187526702880859
    7. 'range' → logprob: -5.562526702880859
    8. 'q' → logprob: -7.687526702880859
    9. 'mo' → logprob: -8.25002670288086
    10. 'sorted' → logprob: -8.37502670288086

Token 70: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00019889144459739327
    2. ' :' → logprob: -9.250199317932129
    3. ':
' → logprob: -10.000199317932129
    4. ':**' → logprob: -10.500199317932129
    5. '):' → logprob: -11.625199317932129
    6. 's' → logprob: -12.250199317932129
    7. '<|end|>' → logprob: -13.000199317932129
    8. ' in' → logprob: -13.000199317932129
    9. '[:]' → logprob: -13.000199317932129
    10. 'in' → logprob: -13.375199317932129

Token 71: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8491899967193604
    2. ' print' → logprob: -1.0991899967193604
    3. ' if' → logprob: -1.4741899967193604
    4. 'print' → logprob: -5.599189758300781
    5. 'if' → logprob: -5.724189758300781
    6. ' ' → logprob: -6.474189758300781
    7. '    ' → logprob: -7.724189758300781
    8. '<|end|>' → logprob: -8.349189758300781
    9. ' "' → logprob: -8.474189758300781
    10. '    
' → logprob: -8.724189758300781

Token 72: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.40449899435043335
    2. ' if' → logprob: -1.2794990539550781
    3. 'print' (adapté à ' print') → logprob: -3.029499053955078
    4. 'if' → logprob: -5.529499053955078
    5. '   ' → logprob: -6.279499053955078
    6. '    ' → logprob: -9.279499053955078
    7. ''' → logprob: -9.904499053955078
    8. ' '' → logprob: -10.154499053955078
    9. ' "' → logprob: -10.279499053955078
    10. ' ' → logprob: -10.529499053955078

Token 73: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.5264755487442017
    2. '(' → logprob: -1.0264755487442017
    3. '('' → logprob: -3.026475429534912
    4. '((' → logprob: -6.526475429534912
    5. '(m' → logprob: -7.651475429534912
    6. '(("' → logprob: -8.40147590637207
    7. '("(' → logprob: -9.77647590637207
    8. '"' → logprob: -9.90147590637207
    9. '("("' → logprob: -9.90147590637207
    10. '(int' → logprob: -9.90147590637207

Token 74: 'yes' (ID: 6763)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.02437683194875717
    2. ''' → logprob: -4.02437686920166
    3. 'yes' → logprob: -5.77437686920166
    4. '"' → logprob: -6.77437686920166
    5. 'YES' → logprob: -7.02437686920166
    6. ' Yes' → logprob: -7.14937686920166
    7. 'Y' → logprob: -10.02437686920166
    8. '('' → logprob: -10.14937686920166
    9. ' yes' → logprob: -10.14937686920166
    10. ''m' → logprob: -10.77437686920166

Token 75: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00023119196703191847
    2. '')' → logprob: -8.62523078918457
    3. 'if' → logprob: -10.62523078918457
    4. ' if' → logprob: -10.87523078918457
    5. '"' → logprob: -12.25023078918457
    6. ' '' → logprob: -13.12523078918457
    7. ')'' → logprob: -14.25023078918457
    8. ')' → logprob: -14.37523078918457
    9. ''''' → logprob: -15.62523078918457
    10. ''s' → logprob: -17.50023078918457

Token 76: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.38712799549102783
    2. ' if' → logprob: -1.1371279954910278
    3. ')' → logprob: -8.512127876281738
    4. ''' → logprob: -10.012127876281738
    5. ' ' → logprob: -12.762127876281738
    6. '   ' → logprob: -13.012127876281738
    7. ' '' → logprob: -13.637127876281738
    8. '')' → logprob: -14.012127876281738
    9. '  ' → logprob: -14.137127876281738
    10. ',' → logprob: -14.512127876281738

Token 77: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.25193002820014954
    2. 'm' → logprob: -1.5019299983978271
    3. ' ' → logprob: -15.001930236816406
    4. ')' → logprob: -16.126930236816406
    5. '   ' → logprob: -16.501930236816406
    6. '	m' → logprob: -16.626930236816406
    7. '(m' → logprob: -16.751930236816406
    8. ' (' → logprob: -16.876930236816406
    9. '    ' → logprob: -17.001930236816406
    10. ')m' → logprob: -17.001930236816406

Token 78: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0263784509152174
    2. 'in' → logprob: -3.6513783931732178
    3. ' ' → logprob: -9.526378631591797
    4. ')' → logprob: -13.276378631591797
    5. ' ' → logprob: -14.526378631591797
    6. ' i' → logprob: -14.651378631591797
    7. '  ' → logprob: -14.901378631591797
    8. '	in' → logprob: -14.901378631591797
    9. '<|end|>' → logprob: -15.151378631591797
    10. ' not' → logprob: -15.401378631591797

Token 79: ' memo' (ID: 46393)
  Prédit: ' memo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' memo' → logprob: -0.16022585332393646
    2. 'memo' → logprob: -1.9102258682250977
    3. 'm' → logprob: -14.410225868225098
    4. ' meme' → logprob: -14.660225868225098
    5. '.memo' → logprob: -15.285225868225098
    6. ' memoir' → logprob: -15.535225868225098
    7. ' ' → logprob: -16.03522491455078
    8. 'mem' → logprob: -16.53522491455078
    9. ' mem' → logprob: -17.16022491455078
    10. 'memory' → logprob: -17.66022491455078

Token 80: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.018150994554162025
    2. 'else' → logprob: -4.018150806427002
    3. ' ' → logprob: -14.01815128326416
    4. '	else' → logprob: -15.89315128326416
    5. '   ' → logprob: -17.518150329589844
    6. ')' → logprob: -17.518150329589844
    7. '```' → logprob: -17.768150329589844
    8. ' ' → logprob: -18.518150329589844
    9. ' els' → logprob: -18.643150329589844
    10. ' es' → logprob: -18.768150329589844

Token 81: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0003944496565964073
    2. ' '' → logprob: -7.875394344329834
    3. ' ' → logprob: -12.000394821166992
    4. '   ' → logprob: -12.125394821166992
    5. ''ny' → logprob: -13.500394821166992
    6. ' no' → logprob: -14.875394821166992
    7. '"' → logprob: -14.875394821166992
    8. ''n' → logprob: -16.000394821166992
    9. ''any' → logprob: -16.375394821166992
    10. '	' → logprob: -16.500394821166992

Token 82: 'no' (ID: 1750)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2519378066062927
    2. 'no' → logprob: -1.5019378662109375
    3. '	no' → logprob: -12.751937866210938
    4. ' no' → logprob: -13.251937866210938
    5. ''n' → logprob: -13.376937866210938
    6. 'No' → logprob: -14.126937866210938
    7. ' ' → logprob: -14.626937866210938
    8. '   ' → logprob: -14.751937866210938
    9. '"' → logprob: -15.376937866210938
    10. '(no' → logprob: -15.876937866210938

Token 83: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01106079202145338
    2. '')' → logprob: -4.51106071472168
    3. '))' → logprob: -11.76106071472168
    4. '")' → logprob: -13.63606071472168
    5. ')")' → logprob: -13.63606071472168
    6. '())' → logprob: -14.26106071472168
    7. ')'' → logprob: -14.38606071472168
    8. '`)' → logprob: -14.38606071472168
    9. ' )' → logprob: -15.51106071472168
    10. '）' → logprob: -15.88606071472168


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 68
Précision stricte (1ère position): 43.21%
Précision adaptée (1ère position): 44.44%
Précision (top 10): 83.95%
================================================================================
