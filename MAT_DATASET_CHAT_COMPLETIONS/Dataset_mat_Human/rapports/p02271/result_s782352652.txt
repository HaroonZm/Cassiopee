================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:42
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import lru_cache

@lru_cache(maxsize = 10000)
def canProd(i,m):
     
    if m == 0:
        return True
    if i >= n:
        return False
 
    res = canProd(i+1,m) or canProd(i+1,m-a[i])
    return res
 
 
n = int(input())
a = [int(x) for x in input().split()]
q = int(input())
m = [int(x) for x in input().split()]
 
for i in m:
    if canProd(0,i):
        print("yes")
    else:
        print("no")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' l' (ID: 305)
  Prédit: 'partial'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'partial' → logprob: -0.612085223197937
    2. 'wrap' → logprob: -0.862085223197937
    3. 'reduce' → logprob: -3.4870853424072266
    4. 'l' → logprob: -6.112085342407227
    5. ' wraps' → logprob: -6.487085342407227
    6. 'cached' → logprob: -7.612085342407227
    7. 'cache' → logprob: -8.112085342407227
    8. 'cmp' → logprob: -9.237085342407227
    9. '```' → logprob: -9.237085342407227
    10. ' partial' → logprob: -9.612085342407227

Token 4: 'ru' (ID: 1942)
  Prédit: 'ru'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ru' → logprob: -0.0010136376367881894
    2. 'r' → logprob: -7.62601375579834
    3. 'z' → logprob: -8.50101375579834
    4. 'partial' → logprob: -9.00101375579834
    5. 'wrap' → logprob: -9.62601375579834
    6. 'ruz' → logprob: -9.62601375579834
    7. 'reduce' → logprob: -10.37601375579834
    8. 'ambda' → logprob: -12.37601375579834
    9. '```' → logprob: -12.50101375579834
    10. 'a' → logprob: -12.50101375579834

Token 5: '_cache' (ID: 27045)
  Prédit: '_cache'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cache' → logprob: -0.003076348453760147
    2. 'cache' → logprob: -6.253076553344727
    3. '_c' → logprob: -7.128076553344727
    4. 'c' → logprob: -8.878076553344727
    5. '_' → logprob: -9.628076553344727
    6. '_ca' → logprob: -10.253076553344727
    7. 'a' → logprob: -10.628076553344727
    8. 'ca' → logprob: -10.628076553344727
    9. '_cached' → logprob: -11.753076553344727
    10. 'o' → logprob: -11.878076553344727

Token 6: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006366224493831396
    2. '\(' → logprob: -5.75636625289917
    3. '```' → logprob: -6.88136625289917
    4. '@' → logprob: -7.25636625289917
    5. 'def' → logprob: -7.50636625289917
    6. '\' → logprob: -7.88136625289917
    7. '(
' → logprob: -7.88136625289917
    8. 'd' → logprob: -10.506365776062012
    9. '`' → logprob: -10.756365776062012
    10. '\n' → logprob: -11.131365776062012

Token 7: '@' (ID: 31)
  Prédit: '@'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '@' → logprob: -0.03697146102786064
    2. 'def' → logprob: -4.036971569061279
    3. '(' → logprob: -4.161971569061279
    4. '\' → logprob: -6.786971569061279
    5. '```' → logprob: -6.786971569061279
    6. '\(' → logprob: -8.786971092224121
    7. '@
' → logprob: -8.911971092224121
    8. 'd' → logprob: -8.911971092224121
    9. '#' → logprob: -9.411971092224121
    10. '(
' → logprob: -9.661971092224121

Token 8: 'l' (ID: 75)
  Prédit: 'l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: 0.0
    2. ' l' → logprob: -17.25
    3. 'lr' → logprob: -18.375
    4. 'staticmethod' → logprob: -18.375
    5. '```' → logprob: -18.625
    6. '@' → logprob: -18.75
    7. 'fun' → logprob: -19.75
    8. 'classmethod' → logprob: -20.0
    9. 'lt' → logprob: -20.125
    10. '	l' → logprob: -20.625

Token 9: 'ru' (ID: 1942)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.00030281138606369495
    2. 'ru' → logprob: -8.125303268432617
    3. '@' → logprob: -12.250303268432617
    4. '```' → logprob: -15.375303268432617
    5. 'u' → logprob: -15.750303268432617
    6. 'ру' → logprob: -15.875303268432617
    7. 'rut' → logprob: -15.875303268432617
    8. ' r' → logprob: -15.875303268432617
    9. '	r' → logprob: -16.125303268432617
    10. '`' → logprob: -16.250303268432617

Token 10: '_cache' (ID: 27045)
  Prédit: '_cache'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cache' → logprob: -0.0006380964769050479
    2. '_cached' → logprob: -7.375638008117676
    3. ' _' → logprob: -12.375638008117676
    4. '_' → logprob: -12.875638008117676
    5. '_c' → logprob: -13.875638008117676
    6. '```' → logprob: -14.000638008117676
    7. ')_' → logprob: -14.750638008117676
    8. '\' → logprob: -15.000638008117676
    9. '@' → logprob: -15.375638008117676
    10. 'cache' → logprob: -15.500638008117676

Token 11: '(max' (ID: 17178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006218978203833103
    2. '(max' → logprob: -5.881218910217285
    3. '()' → logprob: -6.631218910217285
    4. 'def' → logprob: -7.381218910217285
    5. '(
' → logprob: -8.381218910217285
    6. '(lambda' → logprob: -8.631218910217285
    7. '(None' → logprob: -8.756218910217285
    8. '(def' → logprob: -9.256218910217285
    9. '(True' → logprob: -9.506218910217285
    10. '(func' → logprob: -9.756218910217285

Token 12: 'size' (ID: 4461)
  Prédit: '_size'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_size' → logprob: -0.13786906003952026
    2. '_' → logprob: -3.012869119644165
    3. '=' → logprob: -4.137868881225586
    4. '_)' → logprob: -4.137868881225586
    5. 'size' → logprob: -4.387868881225586
    6. '_=' → logprob: -4.762868881225586
    7. '=_' → logprob: -4.762868881225586
    8. '_cache' → logprob: -5.012868881225586
    9. ')' → logprob: -5.762868881225586
    10. ')_' → logprob: -6.637868881225586

Token 13: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0013514261227101088
    2. '=None' → logprob: -6.626351356506348
    3. '=

' → logprob: -10.751351356506348
    4. ')=' → logprob: -13.376351356506348
    5. '=}' → logprob: -13.501351356506348
    6. '=
' → logprob: -14.251351356506348
    7. ')' → logprob: -15.876351356506348
    8. '=lambda' → logprob: -16.251352310180664
    9. '=True' → logprob: -17.376352310180664
    10. '=*/' → logprob: -17.501352310180664

Token 14: ' ' (ID: 220)
  Prédit: '128'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '128' → logprob: -0.468363881111145
    2. ' ' → logprob: -1.718363881111145
    3. ' None' → logprob: -2.2183637619018555
    4. 'None' → logprob: -2.4683637619018555
    5. '512' → logprob: -7.3433637619018555
    6. '256' → logprob: -7.9683637619018555
    7. '102' → logprob: -10.093363761901855
    8. '32' → logprob: -10.593363761901855
    9. '  ' → logprob: -10.718363761901855
    10. '64' → logprob: -11.843363761901855

Token 15: '100' (ID: 1353)
  Prédit: '128'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '128' → logprob: -0.5881960391998291
    2. 'None' → logprob: -0.8381960391998291
    3. ' None' → logprob: -4.46319580078125
    4. '512' → logprob: -7.71319580078125
    5. '102' → logprob: -9.46319580078125
    6. '256' → logprob: -9.58819580078125
    7. ' ' → logprob: -9.96319580078125
    8. '=None' → logprob: -12.33819580078125
    9. '100' → logprob: -12.46319580078125
    10. '  ' → logprob: -13.58819580078125

Token 16: '00' (ID: 504)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.246537173457909e-06
    2. ')return' → logprob: -13.250003814697266
    3. '`)' → logprob: -14.375003814697266
    4. ' )' → logprob: -14.625003814697266
    5. '):' → logprob: -14.750003814697266
    6. ')
' → logprob: -16.000003814697266
    7. '),' → logprob: -16.500003814697266
    8. ')`' → logprob: -16.500003814697266
    9. '}' → logprob: -16.625003814697266
    10. '')' → logprob: -16.750003814697266

Token 17: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3902033970225602e-05
    2. '`)' → logprob: -11.875014305114746
    3. ')return' → logprob: -12.875014305114746
    4. ')`' → logprob: -13.750014305114746
    5. ')
' → logprob: -14.250014305114746
    6. 'def' → logprob: -14.875014305114746
    7. ' )' → logprob: -15.250014305114746
    8. '```' → logprob: -15.500014305114746
    9. '):' → logprob: -15.875014305114746
    10. '),' → logprob: -15.875014305114746

Token 18: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.010188196785748005
    2. '
' → logprob: -4.760188102722168
    3. '\' → logprob: -6.635188102722168
    4. '()
' → logprob: -9.635188102722168
    5. ' def' → logprob: -10.010188102722168
    6. '()' → logprob: -10.385188102722168
    7. '(
' → logprob: -10.760188102722168
    8. 'd' → logprob: -11.010188102722168
    9. '```' → logprob: -11.010188102722168
    10. 'ndef' → logprob: -11.260188102722168

Token 19: ' can' (ID: 665)
  Prédit: ' fibonacci'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fibonacci' → logprob: -0.5565145611763
    2. ' factorial' → logprob: -1.1815145015716553
    3. ' ' → logprob: -2.9315145015716553
    4. ' fib' → logprob: -3.8065145015716553
    5. ' space' → logprob: -4.056514739990234
    6. ' f' → logprob: -4.306514739990234
    7. ' calculate' → logprob: -5.431514739990234
    8. ' factor' → logprob: -5.681514739990234
    9. ' my' → logprob: -6.306514739990234
    10. ' compute' → logprob: -6.931514739990234

Token 20: 'Prod' (ID: 26017)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08429635316133499
    2. ' ' → logprob: -3.084296464920044
    3. ' _' → logprob: -4.959296226501465
    4. '_accept' → logprob: -5.459296226501465
    5. '_make' → logprob: -5.834296226501465
    6. '_take' → logprob: -5.959296226501465
    7. '_jump' → logprob: -6.584296226501465
    8. '_cache' → logprob: -6.584296226501465
    9. '_continue' → logprob: -6.584296226501465
    10. '_access' → logprob: -6.709296226501465

Token 21: '(i' (ID: 3649)
  Prédit: 'uce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'uce' → logprob: -0.04467739164829254
    2. 'u' → logprob: -3.419677495956421
    3. 'uct' → logprob: -5.169677257537842
    4. '(u' → logprob: -5.919677257537842
    5. ' u' → logprob: -6.794677257537842
    6. 'uc' → logprob: -7.794677257537842
    7. 'ice' → logprob: -8.294677734375
    8. '```' → logprob: -8.419677734375
    9. '_u' → logprob: -8.794677734375
    10. 'ue' → logprob: -8.794677734375

Token 22: ',m' (ID: 26648)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.20578891038894653
    2. 'uct' → logprob: -2.2057888507843018
    3. ' ,' → logprob: -2.9557888507843018
    4. 'ct' → logprob: -4.955789089202881
    5. 'ect' → logprob: -5.080789089202881
    6. '):' → logprob: -5.080789089202881
    7. ')' → logprob: -6.205789089202881
    8. 'u' → logprob: -7.830789089202881
    9. ',u' → logprob: -8.330788612365723
    10. ',j' → logprob: -8.580788612365723

Token 23: '):
' (ID: 1883)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.44372060894966125
    2. 'ultiply' → logprob: -1.1937205791473389
    3. ')' → logprob: -3.943720579147339
    4. 'ul' → logprob: -5.193720817565918
    5. '):' → logprob: -5.318720817565918
    6. 'rodu' → logprob: -5.443720817565918
    7. 'ult' → logprob: -5.818720817565918
    8. 'a' → logprob: -5.943720817565918
    9. ',x' → logprob: -6.068720817565918
    10. ',a' → logprob: -6.568720817565918

Token 24: '     
' (ID: 19432)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.3830343782901764
    2. ':' → logprob: -1.633034348487854
    3. '   ' → logprob: -2.6330344676971436
    4. '    ' → logprob: -3.3830344676971436
    5. ' ' → logprob: -4.7580342292785645
    6. '():' → logprob: -6.3830342292785645
    7. ' return' → logprob: -7.2580342292785645
    8. '  ' → logprob: -7.2580342292785645
    9. ''' → logprob: -7.3830342292785645
    10. '):' → logprob: -7.3830342292785645

Token 25: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0383760929107666
    2. '   ' → logprob: -1.0383760929107666
    3. ' ' → logprob: -1.9133760929107666
    4. ' :' → logprob: -2.5383760929107666
    5. '    ' → logprob: -3.6633760929107666
    6. 'if' → logprob: -3.9133760929107666
    7. ' if' → logprob: -4.9133758544921875
    8. '  ' → logprob: -5.6633758544921875
    9. ')' → logprob: -5.9133758544921875
    10. ':return' → logprob: -6.6633758544921875

Token 26: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.40057870745658875
    2. ' if' → logprob: -1.6505787372589111
    3. '   ' → logprob: -2.650578737258911
    4. ' ' → logprob: -3.150578737258911
    5. '    ' → logprob: -4.650578498840332
    6. ':' → logprob: -5.025578498840332
    7. ')' → logprob: -5.775578498840332
    8. 'i' → logprob: -6.900578498840332
    9. 'return' → logprob: -6.900578498840332
    10. '```' → logprob: -6.900578498840332

Token 27: ' m' (ID: 284)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.03617408126592636
    2. ' m' → logprob: -3.7861740589141846
    3. 'i' → logprob: -4.411174297332764
    4. 'm' → logprob: -7.536174297332764
    5. ' ' → logprob: -9.161173820495605
    6. ' not' → logprob: -10.536173820495605
    7. '(i' → logprob: -11.786173820495605
    8. '   ' → logprob: -11.786173820495605
    9. '  ' → logprob: -11.911173820495605
    10. ' (' → logprob: -11.911173820495605

Token 28: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4814969599246979
    2. '==' → logprob: -0.9814969301223755
    3. '%' → logprob: -6.231496810913086
    4. '<' → logprob: -6.606496810913086
    5. ' <' → logprob: -6.606496810913086
    6. '=' → logprob: -7.606496810913086
    7. ' <=' → logprob: -7.606496810913086
    8. ' %' → logprob: -7.856496810913086
    9. '>' → logprob: -7.856496810913086
    10. '<=' → logprob: -8.481496810913086

Token 29: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10107451677322388
    2. '0' → logprob: -2.351074457168579
    3. ' i' → logprob: -7.351074695587158
    4. '1' → logprob: -8.72607421875
    5. 'i' → logprob: -9.85107421875
    6. '  ' → logprob: -12.85107421875
    7. '   ' → logprob: -12.85107421875
    8. '=' → logprob: -14.35107421875
    9. ' ' → logprob: -14.35107421875
    10. ' None' → logprob: -14.53857421875

Token 30: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.24589531123638153
    2. '1' → logprob: -1.620895266532898
    3. ' ' → logprob: -3.9958953857421875
    4. 'i' → logprob: -6.3708953857421875
    5. ' i' → logprob: -9.495895385742188
    6. '   ' → logprob: -10.495895385742188
    7. '-' → logprob: -11.120895385742188
    8. '  ' → logprob: -11.870895385742188
    9. '=' → logprob: -11.995895385742188
    10. ' -' → logprob: -12.370895385742188

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02456366829574108
    2. ':return' → logprob: -4.024563789367676
    3. ' :' → logprob: -6.024563789367676
    4. ' and' → logprob: -6.399563789367676
    5. ':
' → logprob: -7.399563789367676
    6. ' or' → logprob: -7.399563789367676
    7. '   ' → logprob: -7.399563789367676
    8. '       ' → logprob: -8.899563789367676
    9. '<|end|>' → logprob: -9.649563789367676
    10. 'and' → logprob: -9.649563789367676

Token 32: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6915517449378967
    2. '   ' → logprob: -1.691551685333252
    3. '       ' → logprob: -1.941551685333252
    4. ':return' → logprob: -2.191551685333252
    5. '    ' → logprob: -3.941551685333252
    6. ' return' → logprob: -4.316551685333252
    7. ':
' → logprob: -5.191551685333252
    8. ' ' → logprob: -5.316551685333252
    9. ' :' → logprob: -5.316551685333252
    10. '<|end|>' → logprob: -5.441551685333252

Token 33: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.35315510630607605
    2. '       ' → logprob: -1.9781551361083984
    3. 'return' (adapté à ' return') → logprob: -3.2281551361083984
    4. '   ' → logprob: -3.6031551361083984
    5. ' True' → logprob: -3.7281551361083984
    6. '    ' → logprob: -3.7281551361083984
    7. ' 
' → logprob: -3.9781551361083984
    8. ' ' → logprob: -4.228155136108398
    9. ':return' → logprob: -5.353155136108398
    10. ' False' → logprob: -6.228155136108398

Token 34: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.060288988053798676
    2. ' False' → logprob: -3.310288906097412
    3. 'True' → logprob: -3.935288906097412
    4. 'False' → logprob: -6.060288906097412
    5. ' ' → logprob: -9.68528938293457
    6. ' i' → logprob: -9.81028938293457
    7. '1' → logprob: -12.06028938293457
    8. 'i' → logprob: -13.43528938293457
    9. '(True' → logprob: -13.81028938293457
    10. '0' → logprob: -14.18528938293457

Token 35: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05194142088294029
    2. '<|end|>' → logprob: -3.801941394805908
    3. '    
' → logprob: -4.176941394805908
    4. '\n' → logprob: -5.426941394805908
    5. ' ' → logprob: -5.676941394805908
    6. ' 
' → logprob: -6.801941394805908
    7. '  ' → logprob: -7.426941394805908
    8. '  
' → logprob: -7.426941394805908
    9. '    ' → logprob: -7.426941394805908
    10. '
' → logprob: -7.551941394805908

Token 37: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4841283857822418
    2. ' ' → logprob: -1.9841283559799194
    3. '<|end|>' → logprob: -1.9841283559799194
    4. '\n' → logprob: -3.484128475189209
    5. ' 
' → logprob: -3.859128475189209
    6. '
' → logprob: -4.109128475189209
    7. '    
' → logprob: -4.109128475189209
    8. '  
' → logprob: -5.609128475189209
    9. '  ' → logprob: -5.734128475189209
    10. 'n' → logprob: -5.984128475189209

Token 38: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.012186199426651001
    2. 'i' → logprob: -5.137186050415039
    3. ' m' → logprob: -5.262186050415039
    4. ' ' → logprob: -7.137186050415039
    5. 'm' → logprob: -8.637186050415039
    6. ' not' → logprob: -9.887186050415039
    7. '  ' → logprob: -11.887186050415039
    8. '   ' → logprob: -12.262186050415039
    9. ' ' → logprob: -12.512186050415039
    10. '    ' → logprob: -13.137186050415039

Token 39: ' >=' (ID: 5064)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4454541504383087
    2. ' >=' → logprob: -1.5704541206359863
    3. '==' → logprob: -2.9454541206359863
    4. ' <' → logprob: -3.0704541206359863
    5. '<' → logprob: -3.6954541206359863
    6. ' >' → logprob: -4.445454120635986
    7. '>=' → logprob: -4.445454120635986
    8. ' ' → logprob: -6.445454120635986
    9. '>' → logprob: -6.570454120635986
    10. ' <=' → logprob: -7.695454120635986

Token 40: ' n' (ID: 297)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.09695109724998474
    2. 'm' → logprob: -2.8469510078430176
    3. 'n' → logprob: -4.471951007843018
    4. '10' → logprob: -4.596951007843018
    5. '100' → logprob: -5.346951007843018
    6. '5' → logprob: -5.596951007843018
    7. '3' → logprob: -6.596951007843018
    8. ' len' → logprob: -7.471951007843018
    9. '4' → logprob: -7.596951007843018
    10. '0' → logprob: -7.721951007843018

Token 41: ':
' (ID: 734)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.06053463742136955
    2. ':' → logprob: -2.935534715652466
    3. 'or' → logprob: -5.310534477233887
    4. ' :' → logprob: -8.310534477233887
    5. ' ' → logprob: -9.060534477233887
    6. '   ' → logprob: -9.185534477233887
    7. ':return' → logprob: -9.185534477233887
    8. ' and' → logprob: -9.810534477233887
    9. 'and' → logprob: -10.310534477233887
    10. '	or' → logprob: -11.060534477233887

Token 42: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4104717969894409
    2. '   ' → logprob: -1.535471796989441
    3. ':' → logprob: -2.7854719161987305
    4. ' or' → logprob: -3.6604719161987305
    5. ' and' → logprob: -4.4104719161987305
    6. '    ' → logprob: -4.4104719161987305
    7. ' ' → logprob: -5.4104719161987305
    8. ':return' → logprob: -6.2854719161987305
    9. '<|end|>' → logprob: -6.9104719161987305
    10. ' :' → logprob: -7.1604719161987305

Token 43: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.18156927824020386
    2. '   ' → logprob: -1.9315693378448486
    3. '       ' → logprob: -4.5565690994262695
    4. 'return' (adapté à ' return') → logprob: -4.5565690994262695
    5. ' ' → logprob: -9.93156909942627
    6. '	return' → logprob: -10.80656909942627
    7. ' False' → logprob: -11.18156909942627
    8. ':return' → logprob: -11.68156909942627
    9. '    ' → logprob: -11.80656909942627
    10. '<|end|>' → logprob: -12.05656909942627

Token 44: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.2014147937297821
    2. ' False' → logprob: -1.7014148235321045
    3. '(False' → logprob: -13.951415061950684
    4. ' ' → logprob: -15.826415061950684
    5. 'None' → logprob: -15.951415061950684
    6. '=False' → logprob: -16.576414108276367
    7. ' None' → logprob: -16.701414108276367
    8. 'True' → logprob: -16.826414108276367
    9. '.False' → logprob: -17.576414108276367
    10. ' True' → logprob: -17.576414108276367

Token 45: '
 
' (ID: 47812)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13029412925243378
    2. '<|end|>' → logprob: -2.63029408454895
    3. ' ' → logprob: -4.255294322967529
    4. '    ' → logprob: -4.880294322967529
    5. '\' → logprob: -5.005294322967529
    6. '    
' → logprob: -5.255294322967529
    7. ' 
' → logprob: -5.630294322967529
    8. '\n' → logprob: -5.880294322967529
    9. '     
' → logprob: -6.130294322967529
    10. '```' → logprob: -6.380294322967529

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02581481635570526
    2. '    ' → logprob: -4.650815010070801
    3. '<|end|>' → logprob: -5.400815010070801
    4. ' if' → logprob: -5.525815010070801
    5. ' ' → logprob: -5.775815010070801
    6. 'if' → logprob: -6.025815010070801
    7. '  ' → logprob: -7.525815010070801
    8. '    
' → logprob: -7.775815010070801
    9. '     
' → logprob: -8.7758150100708
    10. 's' → logprob: -9.0258150100708

Token 47: ' res' (ID: 694)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.13122887909412384
    2. 'return' → logprob: -2.8812289237976074
    3. 'res' (adapté à ' res') → logprob: -3.5062289237976074
    4. 'result' → logprob: -4.631228923797607
    5. ' if' → logprob: -4.756228923797607
    6. '<|end|>' → logprob: -5.256228923797607
    7. '   ' → logprob: -5.381228923797607
    8. 'not' → logprob: -6.131228923797607
    9. 's' → logprob: -6.631228923797607
    10. '#' → logprob: -7.006228923797607

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16028200089931488
    2. '=' → logprob: -1.910282015800476
    3. 'ult' → logprob: -10.160282135009766
    4. ' ' → logprob: -12.160282135009766
    5. '   ' → logprob: -13.035282135009766
    6. '1' → logprob: -13.160282135009766
    7. ' |=' → logprob: -13.660282135009766
    8. '  ' → logprob: -14.035282135009766
    9. '=True' → logprob: -14.035282135009766
    10. 's' → logprob: -14.160282135009766

Token 49: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.18104073405265808
    2. 'can' → logprob: -1.8060407638549805
    3. '(can' → logprob: -7.1810407638549805
    4. ' (' → logprob: -9.05604076385498
    5. '   ' → logprob: -9.18104076385498
    6. ' False' → logprob: -9.30604076385498
    7. '(' → logprob: -10.05604076385498
    8. 'False' → logprob: -10.18104076385498
    9. ' not' → logprob: -10.30604076385498
    10. '	can' → logprob: -10.55604076385498

Token 50: 'Prod' (ID: 26017)
  Prédit: 'Prod'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Prod' → logprob: -1.735893965815194e-05
    2. 'prod' → logprob: -11.875017166137695
    3. 'Pro' → logprob: -12.250017166137695
    4. 'rod' → logprob: -13.375017166137695
    5. '_prod' → logprob: -13.750017166137695
    6. ' Prod' → logprob: -14.375017166137695
    7. 'Prob' → logprob: -14.750017166137695
    8. 'd' → logprob: -14.875017166137695
    9. 'Proc' → logprob: -15.125017166137695
    10. 'Pod' → logprob: -15.500017166137695

Token 51: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -3.292907877039397e-06
    2. '(' → logprob: -13.50000286102295
    3. ' (' → logprob: -13.62500286102295
    4. '((' → logprob: -15.50000286102295
    5. '[i' → logprob: -16.625003814697266
    6. '(I' → logprob: -16.750003814697266
    7. '(ii' → logprob: -17.125003814697266
    8. '(s' → logprob: -17.500003814697266
    9. '```' → logprob: -17.750003814697266
    10. '(n' → logprob: -18.125003814697266

Token 52: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06307351589202881
    2. ' +' → logprob: -3.6880736351013184
    3. ',m' → logprob: -3.6880736351013184
    4. ',' → logprob: -4.688073635101318
    5. ' ,' → logprob: -7.188073635101318
    6. '+,' → logprob: -7.938073635101318
    7. ',+' → logprob: -8.06307315826416
    8. '+m' → logprob: -8.18807315826416
    9. '1' → logprob: -10.31307315826416
    10. ',n' → logprob: -10.43807315826416

Token 53: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00040528984391130507
    2. ' ' → logprob: -8.000405311584473
    3. ',' → logprob: -10.125405311584473
    4. '2' → logprob: -12.000405311584473
    5. 'm' → logprob: -12.250405311584473
    6. '```' → logprob: -12.437905311584473
    7. ' ,' → logprob: -12.875405311584473
    8. '0' → logprob: -13.187905311584473
    9. '   ' → logprob: -13.250405311584473
    10. ',m' → logprob: -13.750405311584473

Token 54: ',m' (ID: 26648)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1301666647195816
    2. ',m' → logprob: -2.13016676902771
    3. ' ,' → logprob: -5.755166530609131
    4. '(m' → logprob: -9.755167007446289
    5. '(' → logprob: -12.880167007446289
    6. 'm' → logprob: -13.005167007446289
    7. ' ' → logprob: -14.130167007446289
    8. ')' → logprob: -14.255167007446289
    9. '```' → logprob: -14.380167007446289
    10. ' m' → logprob: -14.880167007446289

Token 55: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007329129730351269
    2. ' )' → logprob: -7.375732898712158
    3. '-' → logprob: -10.000733375549316
    4. ')
' → logprob: -10.875733375549316
    5. ' -' → logprob: -11.375733375549316
    6. '-m' → logprob: -11.750733375549316
    7. ')m' → logprob: -12.000733375549316
    8. ')return' → logprob: -12.000733375549316
    9. '-)' → logprob: -12.875733375549316
    10. ',' → logprob: -13.125733375549316

Token 56: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.25193649530410767
    2. 'or' → logprob: -1.501936435699463
    3. ' ' → logprob: -13.251936912536621
    4. '	or' → logprob: -13.251936912536621
    5. ' ' → logprob: -13.501936912536621
    6. '<|end|>' → logprob: -14.126936912536621
    7. ' 
' → logprob: -14.501936912536621
    8. '    ' → logprob: -14.751936912536621
    9. '```' → logprob: -15.376936912536621
    10. '`' → logprob: -15.876936912536621

Token 57: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.5263094902038574
    2. 'can' → logprob: -0.9013094902038574
    3. '(can' → logprob: -5.776309490203857
    4. ' (' → logprob: -10.651309967041016
    5. '	can' → logprob: -10.651309967041016
    6. ' ' → logprob: -11.526309967041016
    7. '.can' → logprob: -11.901309967041016
    8. '_can' → logprob: -12.651309967041016
    9. '(' → logprob: -12.651309967041016
    10. 'Can' → logprob: -13.651309967041016

Token 58: 'Prod' (ID: 26017)
  Prédit: 'Prod'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Prod' → logprob: -7.147740689106286e-05
    2. 'Pro' → logprob: -10.62507152557373
    3. '(i' → logprob: -11.00007152557373
    4. ' Prod' → logprob: -11.75007152557373
    5. 'prod' → logprob: -12.00007152557373
    6. '   ' → logprob: -13.12507152557373
    7. '_prod' → logprob: -13.12507152557373
    8. 'can' → logprob: -13.62507152557373
    9. 'rodu' → logprob: -13.75007152557373
    10. '(can' → logprob: -14.12507152557373

Token 59: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -4.1557283111615106e-05
    2. '(' → logprob: -10.250041961669922
    3. ' (' → logprob: -12.750041961669922
    4. '<|end|>' → logprob: -13.250041961669922
    5. '(I' → logprob: -14.250041961669922
    6. '```' → logprob: -15.250041961669922
    7. '[i' → logprob: -15.750041961669922
    8. ')' → logprob: -16.250041961669922
    9. '<|end|>' → logprob: -16.625041961669922
    10. '(ii' → logprob: -16.750041961669922

Token 60: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10041455924510956
    2. ',m' → logprob: -2.600414514541626
    3. '+m' → logprob: -4.850414752960205
    4. ',i' → logprob: -5.475414752960205
    5. ',' → logprob: -5.725414752960205
    6. '+,' → logprob: -5.975414752960205
    7. ' +' → logprob: -6.225414752960205
    8. ',+' → logprob: -8.350414276123047
    9. '+i' → logprob: -8.475414276123047
    10. '(i' → logprob: -8.725414276123047

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003422567679081112
    2. ' ' → logprob: -8.87534236907959
    3. '2' → logprob: -9.50034236907959
    4. 'm' → logprob: -9.87534236907959
    5. '0' → logprob: -10.37534236907959
    6. ' m' → logprob: -12.50034236907959
    7. '   ' → logprob: -12.62534236907959
    8. '```' → logprob: -13.00034236907959
    9. 's' → logprob: -13.06284236907959
    10. '4' → logprob: -13.12534236907959

Token 62: ',m' (ID: 26648)
  Prédit: ',m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',m' → logprob: -0.533012330532074
    2. ',' → logprob: -0.908012330532074
    3. '//' → logprob: -5.658012390136719
    4. '(m' → logprob: -5.783012390136719
    5. ',int' → logprob: -7.283012390136719
    6. 'm' → logprob: -7.283012390136719
    7. ',(' → logprob: -7.408012390136719
    8. '(' → logprob: -7.658012390136719
    9. ' ,' → logprob: -8.158012390136719
    10. ')' → logprob: -10.033012390136719

Token 63: '-a' (ID: 8575)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.026216577738523483
    2. '//' → logprob: -4.401216506958008
    3. ' -' → logprob: -4.776216506958008
    4. '-code' → logprob: -6.776216506958008
    5. '*' → logprob: -6.901216506958008
    6. ')' → logprob: -7.651216506958008
    7. '```' → logprob: -7.776216506958008
    8. '`' → logprob: -7.901216506958008
    9. '-A' → logprob: -8.151216506958008
    10. '-product' → logprob: -8.276216506958008

Token 64: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -3.9650025428272784e-05
    2. '[' → logprob: -10.250040054321289
    3. 'i' → logprob: -12.875040054321289
    4. '[I' → logprob: -14.250040054321289
    5. '[j' → logprob: -14.875040054321289
    6. ')' → logprob: -15.500040054321289
    7. '[s' → logprob: -16.25004005432129
    8. '[m' → logprob: -16.50004005432129
    9. '[
' → logprob: -17.00004005432129
    10. 's' → logprob: -17.12504005432129

Token 65: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.04420248046517372
    2. ')' → logprob: -3.7942025661468506
    3. ']' → logprob: -4.4192023277282715
    4. '[i' → logprob: -5.7942023277282715
    5. '[' → logprob: -5.9192023277282715
    6. '[j' → logprob: -7.7942023277282715
    7. ''])' → logprob: -7.7942023277282715
    8. '*)' → logprob: -7.7942023277282715
    9. '*' → logprob: -8.04420280456543
    10. '[m' → logprob: -8.29420280456543

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8527940511703491
    2. 'return' → logprob: -0.9777940511703491
    3. ' return' → logprob: -1.9777940511703491
    4. ')' → logprob: -3.7277941703796387
    5. '
' → logprob: -4.102794170379639
    6. ' 
' → logprob: -5.227794170379639
    7. ' ' → logprob: -5.977794170379639
    8. '<|end|>' → logprob: -5.977794170379639
    9. ':return' → logprob: -6.227794170379639
    10. '    
' → logprob: -6.352794170379639

Token 67: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.33825618028640747
    2. '   ' → logprob: -1.4632561206817627
    3. ' return' → logprob: -3.0882561206817627
    4. ')' → logprob: -5.838256359100342
    5. '
' → logprob: -5.838256359100342
    6. ':return' → logprob: -6.338256359100342
    7. '<|end|>' → logprob: -7.338256359100342
    8. ' ' → logprob: -7.588256359100342
    9. '    
' → logprob: -8.588255882263184
    10. '```' → logprob: -8.588255882263184

Token 68: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.2014143168926239
    2. ' res' → logprob: -1.7014143466949463
    3. '(res' → logprob: -14.076414108276367
    4. '	res' → logprob: -15.951414108276367
    5. ' ' → logprob: -16.326414108276367
    6. 'True' → logprob: -16.951414108276367
    7. 's' → logprob: -17.201414108276367
    8. 'r' → logprob: -17.701414108276367
    9. '$res' → logprob: -18.451414108276367
    10. '_res' → logprob: -18.576414108276367

Token 69: '
 
' (ID: 47812)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 70: ' 
' (ID: 793)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 71: 'n' (ID: 77)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 72: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08943458646535873
    2. '=' → logprob: -2.4644346237182617
    3. '<|end|>' → logprob: -7.839434623718262
    4. '>' → logprob: -10.839434623718262
    5. '=int' → logprob: -10.964434623718262
    6. ',' → logprob: -11.214434623718262
    7. '=n' → logprob: -11.589434623718262
    8. ' ' → logprob: -11.714434623718262
    9. ' +=' → logprob: -12.214434623718262
    10. ')' → logprob: -12.464434623718262

Token 73: ' int' (ID: 677)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.27751389145851135
    2. ' len' → logprob: -2.1525139808654785
    3. '5' → logprob: -2.6525139808654785
    4. 'int' → logprob: -3.5275139808654785
    5. '10' → logprob: -4.4025139808654785
    6. ' int' → logprob: -4.4025139808654785
    7. ' ' → logprob: -6.7775139808654785
    8. '0' → logprob: -7.6525139808654785
    9. '3' → logprob: -9.27751350402832
    10. '4' → logprob: -10.02751350402832

Token 74: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06330214440822601
    2. '(' → logprob: -2.8133020401000977
    3. '()' → logprob: -7.188302040100098
    4. 'input' → logprob: -7.688302040100098
    5. '('' → logprob: -9.313302040100098
    6. ' (' → logprob: -11.438302040100098
    7. '(
' → logprob: -11.563302040100098
    8. '("' → logprob: -12.688302040100098
    9. '=input' → logprob: -13.438302040100098
    10. ' ' → logprob: -13.813302040100098

Token 75: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.16059210896492004
    2. '()' → logprob: -1.9105920791625977
    3. ')' → logprob: -8.285592079162598
    4. '(' → logprob: -9.535592079162598
    5. '()
' → logprob: -12.035592079162598
    6. '().' → logprob: -12.035592079162598
    7. '();)' → logprob: -12.160592079162598
    8. '()>' → logprob: -12.285592079162598
    9. '())
' → logprob: -12.285592079162598
    10. '());' → logprob: -12.910592079162598

Token 76: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07360638678073883
    2. '<|end|>' → logprob: -3.323606491088867
    3. ' a' → logprob: -3.573606491088867
    4. ' 
' → logprob: -5.573606491088867
    5. ' ' → logprob: -6.198606491088867
    6. '```' → logprob: -7.948606491088867
    7. '  
' → logprob: -8.323606491088867
    8. '\' → logprob: -9.698606491088867
    9. '<|end|>' → logprob: -9.823606491088867
    10. '
' → logprob: -10.073606491088867

Token 77: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06994521617889404
    2. '=' → logprob: -2.6949453353881836
    3. ' =[' → logprob: -12.319945335388184
    4. '[' → logprob: -12.819945335388184
    5. ' ' → logprob: -14.444945335388184
    6. '=[]' → logprob: -14.944945335388184
    7. '[:]' → logprob: -15.194945335388184
    8. ' ' → logprob: -16.194944381713867
    9. '=input' → logprob: -16.194944381713867
    10. '=[' → logprob: -16.194944381713867

Token 78: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.06209798529744148
    2. ' list' → logprob: -2.8120980262756348
    3. '[list' → logprob: -9.062097549438477
    4. '[' → logprob: -11.312097549438477
    5. ' [' → logprob: -13.437097549438477
    6. '(list' → logprob: -15.562097549438477
    7. '=list' → logprob: -15.687097549438477
    8. '[int' → logprob: -16.062097549438477
    9. '[input' → logprob: -16.312097549438477
    10. '[]' → logprob: -16.312097549438477

Token 79: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0011821311200037599
    2. '*' → logprob: -6.7511820793151855
    3. ' int' → logprob: -12.251182556152344
    4. ']int' → logprob: -12.251182556152344
    5. '(int' → logprob: -14.001182556152344
    6. ']' → logprob: -14.376182556152344
    7. '[int' → logprob: -14.876182556152344
    8. '0' → logprob: -14.876182556152344
    9. '<int' → logprob: -16.251182556152344
    10. ']*' → logprob: -16.376182556152344

Token 80: '(x' (ID: 4061)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.19384287297725677
    2. '(x' → logprob: -1.818842887878418
    3. '(' → logprob: -4.318842887878418
    4. '(i' → logprob: -8.193842887878418
    5. '()]' → logprob: -8.693842887878418
    6. '()' → logprob: -9.443842887878418
    7. ' (' → logprob: -10.068842887878418
    8. ']' → logprob: -10.193842887878418
    9. '(
' → logprob: -10.943842887878418
    10. 'input' → logprob: -11.068842887878418

Token 81: ')' (ID: 8)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4496341943740845
    2. ')' → logprob: -1.0746341943740845
    3. '())' → logprob: -4.574634075164795
    4. '(input' → logprob: -5.074634075164795
    5. 'input' → logprob: -5.949634075164795
    6. 'for' → logprob: -7.074634075164795
    7. '(' → logprob: -8.449634552001953
    8. ' ()' → logprob: -8.699634552001953
    9. ' for' → logprob: -8.949634552001953
    10. ' )' → logprob: -9.699634552001953

Token 82: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06290283054113388
    2. ' for' → logprob: -2.8129029273986816
    3. '()' → logprob: -7.687902927398682
    4. 'input' → logprob: -8.312902450561523
    5. ')' → logprob: -8.812902450561523
    6. '(input' → logprob: -9.812902450561523
    7. '(' → logprob: -11.562902450561523
    8. 'in' → logprob: -11.812902450561523
    9. ']' → logprob: -12.812902450561523
    10. ' input' → logprob: -13.187902450561523

Token 83: ' x' (ID: 1215)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.16032221913337708
    2. 'input' → logprob: -1.9103221893310547
    3. ' x' → logprob: -9.910322189331055
    4. 'x' → logprob: -10.785322189331055
    5. ' in' → logprob: -11.035322189331055
    6. ' ' → logprob: -12.410322189331055
    7. '_' → logprob: -13.160322189331055
    8. '=input' → logprob: -13.410322189331055
    9. 'in' → logprob: -13.535322189331055
    10. '_input' → logprob: -14.160322189331055

Token 84: ' in' (ID: 306)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6539993286132812
    2. '(input' → logprob: -1.5289993286132812
    3. ' in' → logprob: -2.0289993286132812
    4. ' input' → logprob: -2.4039993286132812
    5. 'in' → logprob: -3.4039993286132812
    6. '(' → logprob: -5.903999328613281
    7. '=input' → logprob: -5.903999328613281
    8. ' ' → logprob: -6.403999328613281
    9. ',input' → logprob: -7.778999328613281
    10. '	input' → logprob: -9.028999328613281

Token 85: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.06196768581867218
    2. ' input' → logprob: -2.811967611312866
    3. '(input' → logprob: -16.811967849731445
    4. ' ' → logprob: -18.186967849731445
    5. '=input' → logprob: -18.186967849731445
    6. 'range' → logprob: -18.311967849731445
    7. '<input' → logprob: -19.061967849731445
    8. 'in' → logprob: -19.936967849731445
    9. '	input' → logprob: -20.186967849731445
    10. ',input' → logprob: -20.311967849731445

Token 86: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0005131178768351674
    2. '()' → logprob: -7.625513076782227
    3. '()]' → logprob: -11.000513076782227
    4. '(' → logprob: -11.875513076782227
    5. '()].' → logprob: -14.125513076782227
    6. ' ().' → logprob: -14.875513076782227
    7. '())' → logprob: -15.625513076782227
    8. '()
' → logprob: -17.750513076782227
    9. '()<' → logprob: -17.875513076782227
    10. '()[' → logprob: -17.875513076782227

Token 87: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.001173917087726295
    2. 'strip' → logprob: -6.751173973083496
    3. 'rstrip' → logprob: -12.751173973083496
    4. ' split' → logprob: -14.251173973083496
    5. 'spl' → logprob: -15.751173973083496
    6. '(split' → logprob: -17.37617301940918
    7. 's' → logprob: -19.62617301940918
    8. ' strip' → logprob: -20.25117301940918
    9. '.split' → logprob: -21.37617301940918
    10. 'plit' → logprob: -21.37617301940918

Token 88: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.002640937454998493
    2. '(' → logprob: -6.502640724182129
    3. ']' → logprob: -7.127640724182129
    4. '()' → logprob: -8.502640724182129
    5. ')]' → logprob: -9.752640724182129
    6. '('' → logprob: -9.877640724182129
    7. '())' → logprob: -10.877640724182129
    8. ']()' → logprob: -13.877640724182129
    9. '()]
' → logprob: -14.752640724182129
    10. '']' → logprob: -15.002640724182129

Token 89: 'q' (ID: 80)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7193964719772339
    2. 'print' → logprob: -1.3443964719772339
    3. '<|end|>' → logprob: -2.3443965911865234
    4. 'm' → logprob: -2.8443965911865234
    5. ' 
' → logprob: -3.3443965911865234
    6. '[' → logprob: -4.219396591186523
    7. '  
' → logprob: -4.844396591186523
    8. 'n' → logprob: -4.844396591186523
    9. '\n' → logprob: -5.219396591186523
    10. '```' → logprob: -5.344396591186523

Token 90: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3871648907661438
    2. '=' → logprob: -1.137164831161499
    3. '=int' → logprob: -9.137165069580078
    4. 'u' → logprob: -9.137165069580078
    5. ' ' → logprob: -9.762165069580078
    6. ' =
' → logprob: -11.762165069580078
    7. '_' → logprob: -11.887165069580078
    8. '  ' → logprob: -13.012165069580078
    9. '   ' → logprob: -14.012165069580078
    10. ',' → logprob: -14.387165069580078

Token 91: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.38688600063323975
    2. 'int' → logprob: -1.1368860006332397
    3. '=int' → logprob: -11.511885643005371
    4. '[int' → logprob: -12.511885643005371
    5. '(int' → logprob: -14.261885643005371
    6. '<int' → logprob: -14.886885643005371
    7. ' ' → logprob: -16.386886596679688
    8. ',int' → logprob: -17.261886596679688
    9. ':int' → logprob: -17.386886596679688
    10. '	int' → logprob: -17.636886596679688

Token 92: '(input' (ID: 10054)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7597343325614929
    2. '(' → logprob: -0.8847343325614929
    3. '(input' → logprob: -2.1347343921661377
    4. ' ()' → logprob: -8.134734153747559
    5. 'input' → logprob: -8.384734153747559
    6. '('' → logprob: -8.509734153747559
    7. ' (' → logprob: -9.009734153747559
    8. '(int' → logprob: -9.259734153747559
    9. '=input' → logprob: -10.009734153747559
    10. '()>' → logprob: -10.884734153747559

Token 93: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3381824791431427
    2. '()' → logprob: -1.3381824493408203
    3. '())' → logprob: -3.7131824493408203
    4. '()
' → logprob: -8.96318244934082
    5. '(' → logprob: -10.21318244934082
    6. ')
' → logprob: -10.71318244934082
    7. ' )' → logprob: -11.21318244934082
    8. '())
' → logprob: -12.21318244934082
    9. '();)' → logprob: -13.83818244934082
    10. '(
' → logprob: -13.96318244934082

Token 94: 'm' (ID: 76)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -8.256334695033729e-05
    2. ' for' → logprob: -9.625082969665527
    3. '
' → logprob: -11.125082969665527
    4. 'while' → logprob: -13.875082969665527
    5. ' 
' → logprob: -15.375082969665527
    6. '```' → logprob: -15.875082969665527
    7. '<|end|>' → logprob: -16.00008201599121
    8. '	for' → logprob: -17.12508201599121
    9. '\n' → logprob: -17.25008201599121
    10. 'result' → logprob: -17.62508201599121

Token 95: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6735033988952637
    2. ' =' → logprob: -0.7985033988952637
    3. 's' → logprob: -4.048503398895264
    4. ' ' → logprob: -4.173503398895264
    5. '_' → logprob: -5.298503398895264
    6. ',' → logprob: -7.048503398895264
    7. '<|end|>' → logprob: -7.173503398895264
    8. ')' → logprob: -9.423503875732422
    9. 'for' → logprob: -9.673503875732422
    10. '  ' → logprob: -9.798503875732422

Token 96: ' [' (ID: 723)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.41325297951698303
    2. 'int' → logprob: -1.5382529497146606
    3. '[int' → logprob: -2.16325306892395
    4. ' [' → logprob: -5.788252830505371
    5. ' ' → logprob: -5.913252830505371
    6. ' []' → logprob: -6.663252830505371
    7. '0' → logprob: -7.163252830505371
    8. '[]' → logprob: -7.663252830505371
    9. '[' → logprob: -8.288252830505371
    10. '<int' → logprob: -9.413252830505371

Token 97: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.001573544810526073
    2. '[int' → logprob: -6.50157356262207
    3. ' int' → logprob: -9.87657356262207
    4. ']int' → logprob: -11.12657356262207
    5. '0' → logprob: -12.75157356262207
    6. '(int' → logprob: -14.00157356262207
    7. '<int' → logprob: -14.37657356262207
    8. ']' → logprob: -15.00157356262207
    9. '[]' → logprob: -15.12657356262207
    10. '	int' → logprob: -16.25157356262207

Token 98: '(x' (ID: 4061)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.018480245023965836
    2. '(x' → logprob: -4.14348030090332
    3. '()' → logprob: -6.64348030090332
    4. '(' → logprob: -6.89348030090332
    5. '(int' → logprob: -9.39348030090332
    6. 'input' → logprob: -11.01848030090332
    7. ' (' → logprob: -11.64348030090332
    8. '()]' → logprob: -12.01848030090332
    9. ']' → logprob: -12.26848030090332
    10. '=input' → logprob: -13.26848030090332

Token 99: ')' (ID: 8)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5243937373161316
    2. 'for' → logprob: -1.1493937969207764
    3. ')' → logprob: -2.5243937969207764
    4. ' for' → logprob: -4.524393558502197
    5. ' ()' → logprob: -8.524394035339355
    6. '	for' → logprob: -10.399394035339355
    7. '(' → logprob: -10.899394035339355
    8. '=' → logprob: -11.149394035339355
    9. ' ' → logprob: -11.274394035339355
    10. 'or' → logprob: -12.024394035339355

Token 100: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10810798406600952
    2. '()' → logprob: -2.8581080436706543
    3. ' for' → logprob: -3.1081080436706543
    4. ')' → logprob: -8.108107566833496
    5. 'input' → logprob: -10.233107566833496
    6. '(input' → logprob: -10.608107566833496
    7. ' ()' → logprob: -11.608107566833496
    8. '	for' → logprob: -11.608107566833496
    9. '   ' → logprob: -12.358107566833496
    10. '=input' → logprob: -12.483107566833496

Token 101: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7996634244918823
    2. 'input' → logprob: -1.0496634244918823
    3. ' in' → logprob: -2.674663543701172
    4. '(x' → logprob: -2.924663543701172
    5. 'in' → logprob: -3.299663543701172
    6. ' input' → logprob: -3.549663543701172
    7. '(input' → logprob: -4.799663543701172
    8. ' x' → logprob: -6.174663543701172
    9. '_' → logprob: -6.424663543701172
    10. '(' → logprob: -9.799663543701172

Token 102: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12522482872009277
    2. 'in' → logprob: -2.3752248287200928
    3. '(' → logprob: -3.7502248287200928
    4. '()' → logprob: -7.875225067138672
    5. 'input' → logprob: -8.250225067138672
    6. '(input' → logprob: -8.250225067138672
    7. ' ' → logprob: -9.625225067138672
    8. '=input' → logprob: -10.125225067138672
    9. '(in' → logprob: -10.250225067138672
    10. 'import' → logprob: -10.375225067138672

Token 103: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889099419116974
    2. ' input' → logprob: -2.5788910388946533
    3. '(input' → logprob: -13.828890800476074
    4. '=input' → logprob: -17.32889175415039
    5. '<input' → logprob: -17.45389175415039
    6. '	input' → logprob: -17.45389175415039
    7. 'range' → logprob: -17.57889175415039
    8. '[input' → logprob: -17.82889175415039
    9. ' ' → logprob: -17.95389175415039
    10. '.input' → logprob: -18.32889175415039

Token 104: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.0100624169572257e-05
    2. '()' → logprob: -10.875020027160645
    3. '(' → logprob: -14.000020027160645
    4. ' ().' → logprob: -15.375020027160645
    5. '()]' → logprob: -17.25002098083496
    6. '()].' → logprob: -17.37502098083496
    7. '(.' → logprob: -18.75002098083496
    8. '()[' → logprob: -19.37502098083496
    9. '('' → logprob: -19.37502098083496
    10. '.' → logprob: -19.50002098083496

Token 105: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.2007883671903983e-05
    2. 'strip' → logprob: -10.750021934509277
    3. ' split' → logprob: -14.500021934509277
    4. 'rstrip' → logprob: -17.875022888183594
    5. '(split' → logprob: -17.875022888183594
    6. 'spl' → logprob: -19.250022888183594
    7. '_split' → logprob: -20.875022888183594
    8. 'plit' → logprob: -21.375022888183594
    9. '.split' → logprob: -21.500022888183594
    10. ')' → logprob: -22.125022888183594

Token 106: '()]
' (ID: 67155)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.0011964209843426943
    2. '()' → logprob: -7.626196384429932
    3. ']' → logprob: -8.00119686126709
    4. ')]' → logprob: -8.62619686126709
    5. '(' → logprob: -9.25119686126709
    6. '())' → logprob: -9.25119686126709
    7. '()]
' → logprob: -15.12619686126709
    8. '()][' → logprob: -15.12619686126709
    9. ']()' → logprob: -15.25119686126709
    10. '(),' → logprob: -15.75119686126709

Token 107: ' 
' (ID: 793)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00026526954025030136
    2. '
' → logprob: -8.875265121459961
    3. ' for' → logprob: -9.250265121459961
    4. '<|end|>' → logprob: -10.875265121459961
    5. '```' → logprob: -12.000265121459961
    6. 'output' → logprob: -13.875265121459961
    7. 'results' → logprob: -14.250265121459961
    8. 'print' → logprob: -14.375265121459961
    9. '  
' → logprob: -14.875265121459961
    10. '[' → logprob: -15.000265121459961

Token 108: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -4.320199877838604e-07
    2. 'results' → logprob: -15.375
    3. '
' → logprob: -16.625
    4. 'res' → logprob: -16.625
    5. ' for' → logprob: -16.75
    6. 'result' → logprob: -17.25
    7. 'output' → logprob: -17.5
    8. 'answers' → logprob: -18.125
    9. 'out' → logprob: -18.375
    10. '```' → logprob: -19.375

Token 109: ' i' (ID: 575)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.7764004468917847
    2. 'x' → logprob: -1.9014004468917847
    3. ' m' → logprob: -2.401400566101074
    4. 'm' → logprob: -2.526400566101074
    5. ' _' → logprob: -2.651400566101074
    6. '_' → logprob: -2.651400566101074
    7. ' i' → logprob: -3.651400566101074
    8. ' val' → logprob: -4.151400566101074
    9. ' v' → logprob: -4.526400566101074
    10. ' ' → logprob: -4.526400566101074

Token 110: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2261960655450821
    2. 'in' → logprob: -1.601196050643921
    3. ' ' → logprob: -7.2261962890625
    4. '  ' → logprob: -10.6011962890625
    5. '_' → logprob: -11.8511962890625
    6. 'range' → logprob: -12.2261962890625
    7. '_in' → logprob: -12.4761962890625
    8. 'n' → logprob: -12.6011962890625
    9. '	in' → logprob: -12.7261962890625
    10. ' _' → logprob: -12.8511962890625

Token 111: ' m' (ID: 284)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.002299301093444228
    2. ' range' → logprob: -6.2522993087768555
    3. 'm' → logprob: -8.002299308776855
    4. 'q' → logprob: -10.252299308776855
    5. '(range' → logprob: -15.002299308776855
    6. ' q' → logprob: -15.502299308776855
    7. ' m' → logprob: -17.00229835510254
    8. ' ' → logprob: -17.25229835510254
    9. '	range' → logprob: -18.75229835510254
    10. 'r' → logprob: -19.25229835510254

Token 112: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003397535183466971
    2. ':
' → logprob: -8.00033950805664
    3. ' :' → logprob: -13.37533950805664
    4. '[:]' → logprob: -14.62533950805664
    5. ':**' → logprob: -14.62533950805664
    6. '):' → logprob: -14.75033950805664
    7. '():' → logprob: -15.00033950805664
    8. '[' → logprob: -15.37533950805664
    9. '=' → logprob: -15.75033950805664
    10. ':

' → logprob: -15.87533950805664

Token 113: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06070179492235184
    2. ' 
' → logprob: -3.060701847076416
    3. '    
' → logprob: -5.310701847076416
    4. '<|end|>' → logprob: -5.810701847076416
    5. ' print' → logprob: -6.685701847076416
    6. ' ' → logprob: -7.060701847076416
    7. '  
' → logprob: -7.935701847076416
    8. 'print' → logprob: -8.060701370239258
    9. '```' → logprob: -8.060701370239258
    10. '
' → logprob: -8.435701370239258

Token 114: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2127043455839157
    2. ' print' → logprob: -1.7127043008804321
    3. '   ' → logprob: -4.587704181671143
    4. ' if' → logprob: -7.837704181671143
    5. ' 
' → logprob: -7.962704181671143
    6. 'if' (adapté à ' if') → logprob: -9.0877046585083
    7. '
' → logprob: -10.0877046585083
    8. '	print' → logprob: -10.2127046585083
    9. '```' → logprob: -10.2127046585083
    10. ' ' → logprob: -10.5877046585083

Token 115: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.011048762127757072
    2. 'can' → logprob: -4.511048793792725
    3. '(can' → logprob: -14.011048316955566
    4. '	can' → logprob: -15.636048316955566
    5. ' not' → logprob: -16.886049270629883
    6. ' ' → logprob: -18.511049270629883
    7. ' could' → logprob: -19.511049270629883
    8. ' ' → logprob: -19.636049270629883
    9. '.can' → logprob: -20.011049270629883
    10. '_can' → logprob: -20.511049270629883

Token 116: 'Prod' (ID: 26017)
  Prédit: 'Prod'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Prod' → logprob: -9.088346359931165e-07
    2. 'prod' → logprob: -14.750000953674316
    3. ' Prod' → logprob: -15.250000953674316
    4. 'Pro' → logprob: -15.875000953674316
    5. '_prod' → logprob: -16.875
    6. 'Prof' → logprob: -18.375
    7. 'Proc' → logprob: -18.625
    8. 'Prob' → logprob: -19.0
    9. 'Prot' → logprob: -19.625
    10. 'Pod' → logprob: -20.25

Token 117: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -7.028536492725834e-05
    2. '(n' → logprob: -10.000070571899414
    3. ' (' → logprob: -11.250070571899414
    4. '(len' → logprob: -12.625070571899414
    5. '(i' → logprob: -12.625070571899414
    6. '0' → logprob: -13.000070571899414
    7. '(a' → logprob: -13.125070571899414
    8. '((' → logprob: -14.875070571899414
    9. '(-' → logprob: -15.625070571899414
    10. '```' → logprob: -16.500070571899414

Token 118: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012515068985521793
    2. '(' → logprob: -4.387515068054199
    3. ' ' → logprob: -12.5125150680542
    4. '
' → logprob: -14.2625150680542
    5. ')' → logprob: -14.8875150680542
    6. '   ' → logprob: -15.6375150680542
    7. '(
' → logprob: -16.137516021728516
    8. '۰' → logprob: -16.512516021728516
    9. ' 
' → logprob: -17.012516021728516
    10. ' (' → logprob: -17.012516021728516

Token 119: ',i' (ID: 25032)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0251728296279907
    2. '(i' → logprob: -1.0251728296279907
    3. ',i' → logprob: -1.2751728296279907
    4. ' ,' → logprob: -6.275172710418701
    5. '(' → logprob: -6.775172710418701
    6. ' (' → logprob: -9.90017318725586
    7. ',(' → logprob: -10.15017318725586
    8. ')' → logprob: -11.27517318725586
    9. ',int' → logprob: -11.90017318725586
    10. ' ' → logprob: -13.02517318725586

Token 120: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.015518308617174625
    2. '):
' → logprob: -4.2655181884765625
    3. ')' → logprob: -6.6405181884765625
    4. ' ):' → logprob: -10.390518188476562
    5. ':' → logprob: -11.765518188476562
    6. ')==' → logprob: -13.015518188476562
    7. '):
' → logprob: -13.265518188476562
    8. '==' → logprob: -13.765518188476562
    9. '():' → logprob: -13.765518188476562
    10. '():
' → logprob: -14.640518188476562

Token 121: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003621212439611554
    2. '   ' → logprob: -5.7536211013793945
    3. ' print' → logprob: -8.128621101379395
    4. 'print' → logprob: -8.878621101379395
    5. '```' → logprob: -12.753621101379395
    6. '	print' → logprob: -12.878621101379395
    7. '     ' → logprob: -13.753621101379395
    8. '    
' → logprob: -14.628621101379395
    9. '           ' → logprob: -14.628621101379395
    10. '        
' → logprob: -14.753621101379395

Token 122: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.006604056339710951
    2. '   ' → logprob: -5.506604194641113
    3. ' print' → logprob: -6.006604194641113
    4. '       ' → logprob: -9.756604194641113
    5. '	print' → logprob: -13.381604194641113
    6. '```' → logprob: -15.006604194641113
    7. '  ' → logprob: -16.881603240966797
    8. '.print' → logprob: -17.131603240966797
    9. ' ' → logprob: -17.256603240966797
    10. '    ' → logprob: -17.506603240966797

Token 123: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.004894650541245937
    2. '(' → logprob: -5.504894733428955
    3. '('' → logprob: -7.254894733428955
    4. '(True' → logprob: -9.129894256591797
    5. '(
' → logprob: -14.879894256591797
    6. '"' → logprob: -16.254894256591797
    7. ' ("' → logprob: -16.379894256591797
    8. '(":' → logprob: -16.504894256591797
    9. '()' → logprob: -16.629894256591797
    10. '(true' → logprob: -16.879894256591797

Token 124: 'yes' (ID: 6763)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.07818182557821274
    2. 'YES' → logprob: -2.703181743621826
    3. 'yes' → logprob: -5.328181743621826
    4. 'True' → logprob: -6.203181743621826
    5. 'Possible' → logprob: -7.078181743621826
    6. '1' → logprob: -8.203182220458984
    7. 'Y' → logprob: -9.703182220458984
    8. 'true' → logprob: -10.703182220458984
    9. ' yes' → logprob: -10.703182220458984
    10. '"' → logprob: -10.703182220458984

Token 125: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.16024301946163177
    2. '")
' → logprob: -1.910243034362793
    3. '")
' → logprob: -11.285243034362793
    4. '")

' → logprob: -12.660243034362793
    5. ')' → logprob: -13.535243034362793
    6. '"' → logprob: -14.410243034362793
    7. '");' → logprob: -14.660243034362793
    8. ' ")' → logprob: -14.910243034362793
    9. ')
' → logprob: -15.535243034362793
    10. 'else' → logprob: -16.160242080688477

Token 126: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5379185676574707
    2. 'else' → logprob: -1.0379185676574707
    3. ' else' → logprob: -2.7879185676574707
    4. '	else' → logprob: -8.162918090820312
    5. ' ' → logprob: -12.537918090820312
    6. '  ' → logprob: -12.662918090820312
    7. '<|end|>' → logprob: -12.912918090820312
    8. '```' → logprob: -13.162918090820312
    9. '       ' → logprob: -15.537918090820312
    10. '    ' → logprob: -15.662918090820312

Token 127: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.04737909510731697
    2. ' else' → logprob: -3.5473790168762207
    3. '   ' → logprob: -4.047379016876221
    4. '	else' → logprob: -12.172379493713379
    5. ' ' → logprob: -14.797379493713379
    6. '  ' → logprob: -15.047379493713379
    7. 'elif' → logprob: -16.172378540039062
    8. '    ' → logprob: -17.547378540039062
    9. '```' → logprob: -17.547378540039062
    10. '    
' → logprob: -17.797378540039062

Token 128: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02745242603123188
    2. '       ' → logprob: -4.27745246887207
    3. ':
' → logprob: -4.40245246887207
    4. '   ' → logprob: -7.15245246887207
    5. ' :' → logprob: -9.40245246887207
    6. ' :
' → logprob: -10.52745246887207
    7. '    ' → logprob: -10.90245246887207
    8. '):' → logprob: -11.40245246887207
    9. '     ' → logprob: -11.90245246887207
    10. '):
' → logprob: -12.77745246887207

Token 129: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0023468725848942995
    2. ' print' → logprob: -6.627346992492676
    3. 'print' → logprob: -7.002346992492676
    4. '   ' → logprob: -9.252346992492676
    5. '     ' → logprob: -11.752346992492676
    6. '    ' → logprob: -12.752346992492676
    7. '      ' → logprob: -13.877346992492676
    8. '	print' → logprob: -14.002346992492676
    9. '           ' → logprob: -14.627346992492676
    10. '```' → logprob: -14.752346992492676

Token 130: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00409656623378396
    2. ' print' → logprob: -5.504096508026123
    3. '   ' → logprob: -11.504096984863281
    4. '       ' → logprob: -11.754096984863281
    5. '	print' → logprob: -15.504096984863281
    6. '    ' → logprob: -17.87909698486328
    7. '           ' → logprob: -18.12909698486328
    8. '```' → logprob: -19.12909698486328
    9. '.print' → logprob: -19.50409698486328
    10. 'printf' → logprob: -19.75409698486328

Token 131: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0009120595059357584
    2. '(' → logprob: -7.000912189483643
    3. '(
' → logprob: -14.750911712646484
    4. ' ("' → logprob: -15.875911712646484
    5. '('' → logprob: -16.250911712646484
    6. '(

' → logprob: -19.250911712646484
    7. '("""' → logprob: -19.250911712646484
    8. '("("' → logprob: -19.500911712646484
    9. '"' → logprob: -19.750911712646484
    10. '("
' → logprob: -19.875911712646484

Token 132: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -2.339278580620885e-06
    2. ' no' → logprob: -13.125001907348633
    3. '"' → logprob: -15.250001907348633
    4. 'No' → logprob: -17.500001907348633
    5. '	no' → logprob: -18.500001907348633
    6. '"No' → logprob: -20.000001907348633
    7. '   ' → logprob: -20.125001907348633
    8. 'NO' → logprob: -20.125001907348633
    9. 'not' → logprob: -20.250001907348633
    10. 'yes' → logprob: -20.750001907348633

Token 133: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.103083036839962
    2. ')' → logprob: -2.3530831336975098
    3. ')")' → logprob: -5.85308313369751
    4. ')"' → logprob: -14.853082656860352
    5. '")
' → logprob: -15.603082656860352
    6. '"' → logprob: -15.728082656860352
    7. '}")' → logprob: -15.728082656860352
    8. '()' → logprob: -15.853082656860352
    9. '')' → logprob: -17.35308265686035
    10. '))' → logprob: -17.47808265686035


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 131
Tokens correctement prédits (1ère position, stricte): 59
Tokens correctement prédits (1ère position, avec adaptation): 64
Tokens correctement prédits (top 10): 108
Précision stricte (1ère position): 45.04%
Précision adaptée (1ère position): 48.85%
Précision (top 10): 82.44%
================================================================================
