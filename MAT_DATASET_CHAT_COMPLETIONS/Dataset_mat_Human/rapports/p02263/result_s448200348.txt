================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:25
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
list=input().split()
stack=[]

for x in list:
    if x=='+':
        a=stack.pop()
        b=stack.pop()
        stack.append(a+b)
    elif x=='-':
        a=stack.pop()
        b=stack.pop()
        stack.append(b-a)  
    elif x=='*':
        a=stack.pop()
        b=stack.pop()
        stack.append(a*b)
    else:
        stack.append(int(x))
        
print(stack[-1])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'list' (ID: 2641)
  → Token d'amorce (pas de prédiction)

Token 1: '=input' (ID: 87911)
  → Token d'amorce (pas de prédiction)

Token 2: '().' (ID: 1454)
  → Token d'amorce (pas de prédiction)

Token 3: 'split' (ID: 13627)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.015548355877399445
    2. '.split' → logprob: -5.265548229217529
    3. '()' → logprob: -5.265548229217529
    4. '(' → logprob: -6.265548229217529
    5. '[' → logprob: -6.890548229217529
    6. '().' → logprob: -7.640548229217529
    7. ')' → logprob: -7.640548229217529
    8. '.strip' → logprob: -8.515548706054688
    9. '.append' → logprob: -8.640548706054688
    10. ',' → logprob: -9.140548706054688

Token 4: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014422386884689331
    2. '()' → logprob: -4.264422416687012
    3. '('' → logprob: -8.889422416687012
    4. ''' → logprob: -11.014422416687012
    5. '`' → logprob: -11.139422416687012
    6. '```' → logprob: -11.139422416687012
    7. '(`' → logprob: -11.514422416687012
    8. '(
' → logprob: -11.639422416687012
    9. '"' → logprob: -11.639422416687012
    10. ' (' → logprob: -11.764422416687012

Token 5: 'stack' (ID: 15145)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.08457835763692856
    2. '[' → logprob: -2.834578275680542
    3. '=' → logprob: -4.084578514099121
    4. '.sort' → logprob: -5.834578514099121
    5. '.append' → logprob: -6.709578514099121
    6. ' =' → logprob: -8.209578514099121
    7. 'for' → logprob: -8.459578514099121
    8. '[:]' → logprob: -8.709578514099121
    9. '.for' → logprob: -8.959578514099121
    10. ',' → logprob: -8.959578514099121

Token 6: '=[]' (ID: 65563)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.04902559146285057
    2. '.append' → logprob: -3.049025535583496
    3. '=' → logprob: -8.424025535583496
    4. '.pop' → logprob: -9.799025535583496
    5. '[' → logprob: -10.049025535583496
    6. '=[]' → logprob: -10.299025535583496
    7. ' =' → logprob: -10.924025535583496
    8. '.push' → logprob: -11.049025535583496
    9. '.setdefault' → logprob: -11.049025535583496
    10. '.=' → logprob: -11.674025535583496

Token 7: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4342745244503021
    2. 'for' → logprob: -1.0592745542526245
    3. '.for' → logprob: -6.434274673461914
    4. ' for' → logprob: -6.559274673461914
    5. 'if' → logprob: -6.809274673461914
    6. ':' → logprob: -7.059274673461914
    7. '[' → logprob: -8.309274673461914
    8. '.
' → logprob: -9.559274673461914
    9. ';' → logprob: -10.309274673461914
    10. '(' → logprob: -10.309274673461914

Token 8: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.318681188422488e-05
    2. ' for' → logprob: -11.25001335144043
    3. '.' → logprob: -16.37501335144043
    4. ':' → logprob: -17.00001335144043
    5. '.for' → logprob: -17.25001335144043
    6. '```' → logprob: -18.50001335144043
    7. '(' → logprob: -18.87501335144043
    8. '	for' → logprob: -18.87501335144043
    9. '(for' → logprob: -19.12501335144043
    10. 'For' → logprob: -19.50001335144043

Token 9: ' x' (ID: 1215)
  Prédit: ' item'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' item' → logprob: -0.6314157843589783
    2. ' ' → logprob: -1.131415843963623
    3. ' i' → logprob: -2.631415843963623
    4. ' word' → logprob: -3.006415843963623
    5. ' element' → logprob: -4.256415843963623
    6. ' token' → logprob: -5.506415843963623
    7. 'item' → logprob: -5.881415843963623
    8. '  ' → logprob: -6.756415843963623
    9. ' x' → logprob: -6.881415843963623
    10. ' elem' → logprob: -8.756415367126465

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008654281497001648
    2. 'in' → logprob: -4.7586541175842285
    3. ' ' → logprob: -10.508654594421387
    4. '	in' → logprob: -11.758654594421387
    5. '  ' → logprob: -13.258654594421387
    6. '   ' → logprob: -14.633654594421387
    7. 'import' → logprob: -15.133654594421387
    8. '_in' → logprob: -15.133654594421387
    9. ' x' → logprob: -15.258654594421387
    10. '<|end|>' → logprob: -15.883654594421387

Token 11: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.06197306513786316
    2. ' list' → logprob: -2.8119730949401855
    3. 'range' → logprob: -12.561972618103027
    4. ' range' → logprob: -13.811972618103027
    5. ' ' → logprob: -14.936972618103027
    6. 'input' → logprob: -15.311972618103027
    7. '(list' → logprob: -16.311973571777344
    8. 'stack' → logprob: -16.686973571777344
    9. ' input' → logprob: -16.686973571777344
    10. 'x' → logprob: -17.811973571777344

Token 12: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -5.013994814362377e-05
    2. ' :' → logprob: -10.62505054473877
    3. '[:]' → logprob: -11.12505054473877
    4. ':
' → logprob: -12.50005054473877
    5. ':**' → logprob: -13.37505054473877
    6. '):' → logprob: -13.62505054473877
    7. '   ' → logprob: -14.00005054473877
    8. '[' → logprob: -14.50005054473877
    9. '=' → logprob: -14.87505054473877
    10. '():' → logprob: -15.00005054473877

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07223162055015564
    2. ' if' → logprob: -2.6972315311431885
    3. ' ' → logprob: -6.697231769561768
    4. 'if' → logprob: -7.197231769561768
    5. ' stack' → logprob: -9.69723129272461
    6. '    
' → logprob: -9.94723129272461
    7. '	if' → logprob: -10.07223129272461
    8. '    ' → logprob: -10.69723129272461
    9. '<|end|>' → logprob: -10.69723129272461
    10. '  ' → logprob: -11.19723129272461

Token 14: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.19176389276981354
    2. 'if' (adapté à ' if') → logprob: -1.8167638778686523
    3. 'stack' → logprob: -5.316763877868652
    4. ' stack' → logprob: -5.441763877868652
    5. '   ' → logprob: -5.941763877868652
    6. '    ' → logprob: -10.566763877868652
    7. ' ' → logprob: -11.816763877868652
    8. ' while' → logprob: -11.816763877868652
    9. '(stack' → logprob: -11.941763877868652
    10. '```' → logprob: -11.941763877868652

Token 15: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.20243431627750397
    2. 'x' → logprob: -1.7024343013763428
    3. ' ' → logprob: -6.952434539794922
    4. ' not' → logprob: -10.077434539794922
    5. '  ' → logprob: -11.827434539794922
    6. ''' → logprob: -12.452434539794922
    7. '"' → logprob: -13.202434539794922
    8. '(x' → logprob: -13.327434539794922
    9. 'not' → logprob: -13.577434539794922
    10. '	x' → logprob: -13.827434539794922

Token 16: '==' (ID: 560)
  Prédit: '.is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.3421195149421692
    2. '==' → logprob: -2.3421194553375244
    3. '.' → logprob: -2.5921194553375244
    4. ' ==' → logprob: -2.8421194553375244
    5. '[' → logprob: -3.5921194553375244
    6. ' in' → logprob: -4.9671196937561035
    7. ' ' → logprob: -5.2171196937561035
    8. 'isdigit' → logprob: -5.3421196937561035
    9. ' not' → logprob: -5.4671196937561035
    10. ' .' → logprob: -5.4671196937561035

Token 17: ''+' (ID: 16370)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.18397924304008484
    2. '"+"' → logprob: -2.0589792728424072
    3. ''+' → logprob: -3.6839792728424072
    4. '"' → logprob: -5.183979034423828
    5. ''*' → logprob: -5.933979034423828
    6. ''-' → logprob: -6.058979034423828
    7. '"+' → logprob: -6.183979034423828
    8. ' '+'' → logprob: -6.558979034423828
    9. ''a' → logprob: -8.058979034423828
    10. ' '('' → logprob: -9.058979034423828

Token 18: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.014817696064710617
    2. ''' → logprob: -4.264817714691162
    3. '':
' → logprob: -8.264817237854004
    4. ':' → logprob: -8.514817237854004
    5. ''or' → logprob: -9.764817237854004
    6. '':'' → logprob: -10.389817237854004
    7. ' '' → logprob: -10.764817237854004
    8. ' ':' → logprob: -11.264817237854004
    9. ' or' → logprob: -11.264817237854004
    10. ''>' → logprob: -11.639817237854004

Token 19: '       ' (ID: 309)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.15915311872959137
    2. 'stack' → logprob: -2.4091532230377197
    3. '       ' → logprob: -3.6591532230377197
    4. '	stack' → logprob: -4.284152984619141
    5. '    ' → logprob: -4.534152984619141
    6. '(stack' → logprob: -6.034152984619141
    7. '   ' → logprob: -6.534152984619141
    8. '        ' → logprob: -6.784152984619141
    9. ' ' → logprob: -6.909152984619141
    10. '.stack' → logprob: -8.03415298461914

Token 20: ' a' (ID: 261)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.11104176193475723
    2. 'stack' → logprob: -2.986041784286499
    3. ' a' → logprob: -3.236041784286499
    4. ' ' → logprob: -5.11104154586792
    5. 'a' (adapté à ' a') → logprob: -5.73604154586792
    6. ' b' → logprob: -5.73604154586792
    7. ' v' → logprob: -7.48604154586792
    8. ' if' → logprob: -7.86104154586792
    9. ' t' → logprob: -8.111042022705078
    10. 'v' → logprob: -8.361042022705078

Token 21: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1813146322965622
    2. ' =' → logprob: -1.8063145875930786
    3. 'stack' → logprob: -7.306314468383789
    4. '.pop' → logprob: -7.431314468383789
    5. 'pop' → logprob: -9.181314468383789
    6. '.append' → logprob: -9.806314468383789
    7. ' stack' → logprob: -10.431314468383789
    8. ' ' → logprob: -10.431314468383789
    9. ',' → logprob: -10.681314468383789
    10. 'pp' → logprob: -11.056314468383789

Token 22: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.002808798337355256
    2. ' stack' → logprob: -5.877808570861816
    3. '	stack' → logprob: -13.127808570861816
    4. 'pop' → logprob: -14.502808570861816
    5. '   ' → logprob: -14.752808570861816
    6. '(stack' → logprob: -14.752808570861816
    7. ' ' → logprob: -15.002808570861816
    8. 'len' → logprob: -16.377809524536133
    9. '.stack' → logprob: -16.627809524536133
    10. 'int' → logprob: -16.627809524536133

Token 23: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -1.0206720617134124e-05
    2. '.' → logprob: -11.87501049041748
    3. 'pop' → logprob: -12.75001049041748
    4. '[-' → logprob: -15.87501049041748
    5. '.p' → logprob: -16.750009536743164
    6. '-pop' → logprob: -17.000009536743164
    7. '_pop' → logprob: -17.250009536743164
    8. ' .' → logprob: -17.500009536743164
    9. '.append' → logprob: -18.875009536743164
    10. 'Pop' → logprob: -19.125009536743164

Token 24: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00014084660506341606
    2. '()
' → logprob: -9.000141143798828
    3. '(' → logprob: -12.000141143798828
    4. '()>' → logprob: -12.500141143798828
    5. '()

' → logprob: -13.000141143798828
    6. '()<' → logprob: -14.250141143798828
    7. '();' → logprob: -14.250141143798828
    8. '(),' → logprob: -14.500141143798828
    9. '())' → logprob: -14.625141143798828
    10. ' ()' → logprob: -14.875141143798828

Token 25: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 26: ' b' (ID: 287)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.3244592547416687
    2. 'stack' → logprob: -1.5744593143463135
    3. ' ' → logprob: -3.5744593143463135
    4. '(stack' → logprob: -4.199459075927734
    5. ' b' → logprob: -4.949459075927734
    6. 'b' (adapté à ' b') → logprob: -5.324459075927734
    7. '<|end|>' → logprob: -5.574459075927734
    8. '	stack' → logprob: -5.949459075927734
    9. ' 
' → logprob: -6.199459075927734
    10. '       ' → logprob: -6.199459075927734

Token 27: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -8.180258191714529e-06
    2. ' =' → logprob: -11.750008583068848
    3. '=int' → logprob: -16.75000762939453
    4. '=

' → logprob: -17.37500762939453
    5. '=
' → logprob: -18.00000762939453
    6. '=[]' → logprob: -18.12500762939453
    7. '=s' → logprob: -18.25000762939453
    8. 'stack' → logprob: -18.37500762939453
    9. '=}' → logprob: -18.75000762939453
    10. '=status' → logprob: -18.75000762939453

Token 28: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.6286106983898208e-05
    2. ' stack' → logprob: -11.125016212463379
    3. '(stack' → logprob: -13.875016212463379
    4. '	stack' → logprob: -15.000016212463379
    5. '.stack' → logprob: -15.625016212463379
    6. 'stackoverflow' → logprob: -17.500017166137695
    7. '   ' → logprob: -18.250017166137695
    8. '_stack' → logprob: -18.500017166137695
    9. 'stk' → logprob: -18.500017166137695
    10. 'st' → logprob: -18.625017166137695

Token 29: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -8.180258191714529e-06
    2. 'pop' → logprob: -12.250008583068848
    3. '.' → logprob: -12.625008583068848
    4. ' .' → logprob: -16.75000762939453
    5. '	pop' → logprob: -17.87500762939453
    6. '_pop' → logprob: -19.00000762939453
    7. '.Pop' → logprob: -19.37500762939453
    8. '.append' → logprob: -19.62500762939453
    9. ' pop' → logprob: -19.75000762939453
    10. '.stack' → logprob: -20.00000762939453

Token 30: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.0484450437361374e-05
    2. '()
' → logprob: -10.250040054321289
    3. '()

' → logprob: -13.500040054321289
    4. ' ()' → logprob: -13.875040054321289
    5. '()]' → logprob: -13.875040054321289
    6. '()>' → logprob: -14.875040054321289
    7. '()`' → logprob: -15.125040054321289
    8. '()<' → logprob: -15.250040054321289
    9. '(' → logprob: -15.375040054321289
    10. '().' → logprob: -16.12504005432129

Token 31: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5852406620979309
    2. '
' → logprob: -2.210240602493286
    3. ' 
' → logprob: -2.585240602493286
    4. '+' → logprob: -3.210240602493286
    5. ' stack' → logprob: -3.335240602493286
    6. 'stack' → logprob: -3.335240602493286
    7. '<|end|>' → logprob: -3.335240602493286
    8. '        ' → logprob: -3.460240602493286
    9. ' ' → logprob: -3.835240602493286
    10. '        
' → logprob: -4.085240840911865

Token 32: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.5472790598869324
    2. 'stack' (adapté à ' stack') → logprob: -1.0472791194915771
    3. '       ' → logprob: -2.672279119491577
    4. '	stack' → logprob: -7.047278881072998
    5. '.stack' → logprob: -8.797279357910156
    6. '(stack' → logprob: -9.047279357910156
    7. '_stack' → logprob: -9.422279357910156
    8. '        ' → logprob: -9.547279357910156
    9. '+' → logprob: -10.047279357910156
    10. ' ' → logprob: -10.672279357910156

Token 33: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00039409202872775495
    2. '.' → logprob: -7.875393867492676
    3. '.push' → logprob: -11.750393867492676
    4. '.extend' → logprob: -12.500393867492676
    5. '.pop' → logprob: -13.625393867492676
    6. ' .' → logprob: -14.875393867492676
    7. '.app' → logprob: -14.875393867492676
    8. '.ap' → logprob: -15.125393867492676
    9. '.add' → logprob: -16.000394821166992
    10. 'append' → logprob: -17.250394821166992

Token 34: '(a' (ID: 6271)
  Prédit: '(b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.0009947025682777166
    2. '(' → logprob: -7.000994682312012
    3. '(a' → logprob: -9.625994682312012
    4. '((' → logprob: -11.375994682312012
    5. '('' → logprob: -12.125994682312012
    6. 'b' → logprob: -15.625994682312012
    7. '(int' → logprob: -16.875995635986328
    8. '(('' → logprob: -17.000995635986328
    9. '(len' → logprob: -17.875995635986328
    10. '("' → logprob: -18.000995635986328

Token 35: '+b' (ID: 76609)
  Prédit: '+b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+b' → logprob: -0.3062197268009186
    2. '+' → logprob: -1.6812196969985962
    3. ' +' → logprob: -2.5562198162078857
    4. ' ' → logprob: -11.306220054626465
    5. '+B' → logprob: -11.806220054626465
    6. ' plus' → logprob: -12.681220054626465
    7. '＋' → logprob: -13.431220054626465
    8. ' b' → logprob: -13.681220054626465
    9. '+
' → logprob: -14.306220054626465
    10. ' ' → logprob: -14.306220054626465

Token 36: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011975488450843841
    2. ')
' → logprob: -9.375120162963867
    3. '+' → logprob: -11.000120162963867
    4. '       ' → logprob: -11.875120162963867
    5. ' )' → logprob: -13.125120162963867
    6. '`)' → logprob: -13.125120162963867
    7. ')

' → logprob: -13.625120162963867
    8. '   ' → logprob: -13.750120162963867
    9. '))' → logprob: -14.125120162963867
    10. '+)' → logprob: -14.250120162963867

Token 37: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 38: ' elif' (ID: 9497)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.8682096004486084
    2. '<|end|>' → logprob: -1.4932096004486084
    3. ' else' → logprob: -1.7432096004486084
    4. ')' → logprob: -2.4932096004486084
    5. 'elif' (adapté à ' elif') → logprob: -3.4932096004486084
    6. '*' → logprob: -3.9932096004486084
    7. '+' → logprob: -4.2432098388671875
    8. '   ' → logprob: -4.4932098388671875
    9. ' elif' → logprob: -4.9932098388671875
    10. ' ' → logprob: -5.7432098388671875

Token 39: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.06315432488918304
    2. 'x' → logprob: -2.9381542205810547
    3. ' ' → logprob: -4.938154220581055
    4. '<|end|>' → logprob: -7.188154220581055
    5. ''' → logprob: -8.563154220581055
    6. ''x' → logprob: -9.938154220581055
    7. '  ' → logprob: -10.438154220581055
    8. '(x' → logprob: -11.313154220581055
    9. ' ' → logprob: -12.188154220581055
    10. ' '' → logprob: -12.313154220581055

Token 40: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -0.010182652622461319
    2. '==' → logprob: -4.635182857513428
    3. ' ==' → logprob: -8.01018238067627
    4. '=="' → logprob: -10.38518238067627
    5. '==='' → logprob: -10.63518238067627
    6. ''' → logprob: -10.76018238067627
    7. ''*' → logprob: -12.01018238067627
    8. ' =='' → logprob: -12.38518238067627
    9. '='' → logprob: -12.88518238067627
    10. ']=='' → logprob: -13.26018238067627

Token 41: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7717970609664917
    2. ''-' → logprob: -0.7717970609664917
    3. ''*' → logprob: -3.0217971801757812
    4. '*' → logprob: -3.6467971801757812
    5. '*-' → logprob: -7.146797180175781
    6. '-*' → logprob: -10.896797180175781
    7. ' '-'' → logprob: -11.021797180175781
    8. '-'' → logprob: -11.646797180175781
    9. ''>' → logprob: -12.396797180175781
    10. '»-' → logprob: -13.146797180175781

Token 42: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2659858465194702
    2. '':' → logprob: -1.5159858465194702
    3. ':
' → logprob: -4.89098596572876
    4. '':
' → logprob: -5.26598596572876
    5. ''' → logprob: -8.015985488891602
    6. '':'' → logprob: -8.390985488891602
    7. '       ' → logprob: -8.640985488891602
    8. ' :' → logprob: -8.765985488891602
    9. ''>' → logprob: -9.015985488891602
    10. '':
' → logprob: -9.765985488891602

Token 43: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.1825312376022339
    2. '   ' → logprob: -1.5575312376022339
    3. '<|end|>' → logprob: -1.5575312376022339
    4. ' ' → logprob: -1.9325312376022339
    5. '    ' → logprob: -2.9325313568115234
    6. ' a' → logprob: -3.0575313568115234
    7. '        ' → logprob: -4.932531356811523
    8. '	stack' → logprob: -5.307531356811523
    9. ' b' → logprob: -5.557531356811523
    10. 'b' → logprob: -6.557531356811523

Token 44: ' a' (ID: 261)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3565337657928467
    2. ' b' → logprob: -1.2315337657928467
    3. 'a' (adapté à ' a') → logprob: -5.231534004211426
    4. ' a' → logprob: -5.981534004211426
    5. ' stack' → logprob: -9.106534004211426
    6. 'stack' → logprob: -10.356534004211426
    7. ' ' → logprob: -10.856534004211426
    8. '   ' → logprob: -11.231534004211426
    9. '    ' → logprob: -12.731534004211426
    10. ')' → logprob: -13.481534004211426

Token 45: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -3.5597102396423e-05
    2. ' =' → logprob: -10.250035285949707
    3. '=

' → logprob: -16.125036239624023
    4. '=int' → logprob: -18.125036239624023
    5. '=}' → logprob: -18.375036239624023
    6. '=s' → logprob: -19.000036239624023
    7. '=
' → logprob: -19.125036239624023
    8. '=[]' → logprob: -19.375036239624023
    9. '=`' → logprob: -19.750036239624023
    10. ')' → logprob: -19.750036239624023

Token 46: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -2.15310683415737e-05
    2. ' stack' → logprob: -11.500021934509277
    3. '<|end|>' → logprob: -11.750021934509277
    4. '	stack' → logprob: -13.625021934509277
    5. '(stack' → logprob: -14.125021934509277
    6. '.stack' → logprob: -14.625021934509277
    7. 'stackoverflow' → logprob: -15.125021934509277
    8. 'b' → logprob: -15.125021934509277
    9. 'a' → logprob: -15.625021934509277
    10. '-stack' → logprob: -15.750021934509277

Token 47: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.0002439467643853277
    2. 'pop' → logprob: -8.750244140625
    3. '.append' → logprob: -9.500244140625
    4. '.' → logprob: -11.625244140625
    5. '=' → logprob: -14.250244140625
    6. '	pop' → logprob: -15.500244140625
    7. ' .' → logprob: -15.625244140625
    8. '_pop' → logprob: -15.625244140625
    9. ' pop' → logprob: -16.250244140625
    10. '-pop' → logprob: -16.500244140625

Token 48: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00408801669254899
    2. '()
' → logprob: -5.504087924957275
    3. '()

' → logprob: -12.254088401794434
    4. '()
' → logprob: -12.504088401794434
    5. '(' → logprob: -15.129088401794434
    6. '())' → logprob: -15.504088401794434
    7. '()\' → logprob: -15.504088401794434
    8. '()]' → logprob: -16.254087448120117
    9. '()<' → logprob: -16.379087448120117
    10. '()`' → logprob: -16.754087448120117

Token 49: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16284702718257904
    2. '
' → logprob: -2.9128470420837402
    3. ')
' → logprob: -3.5378470420837402
    4. '()
' → logprob: -3.5378470420837402
    5. '<|end|>' → logprob: -4.78784704208374
    6. ')' → logprob: -4.91284704208374
    7. '   ' → logprob: -5.28784704208374
    8. '
' → logprob: -6.16284704208374
    9. '        ' → logprob: -6.28784704208374
    10. 'stack' → logprob: -6.53784704208374

Token 50: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.029762646183371544
    2. ' b' → logprob: -3.5297627449035645
    3. ' ' → logprob: -12.529762268066406
    4. '   ' → logprob: -13.029762268066406
    5. '       ' → logprob: -13.154762268066406
    6. '	b' → logprob: -13.654762268066406
    7. '    ' → logprob: -13.779762268066406
    8. '```' → logprob: -14.779762268066406
    9. ',b' → logprob: -15.154762268066406
    10. 'stack' → logprob: -15.279762268066406

Token 51: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -2.696889623621246e-06
    2. ' =' → logprob: -12.87500286102295
    3. '=

' → logprob: -17.625001907348633
    4. '=
' → logprob: -18.250001907348633
    5. '=[]' → logprob: -18.625001907348633
    6. 'stack' → logprob: -19.000001907348633
    7. '=}' → logprob: -19.000001907348633
    8. '=s' → logprob: -19.250001907348633
    9. '=int' → logprob: -19.625001907348633
    10. '=*' → logprob: -20.000001907348633

Token 52: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -8.387458365177736e-05
    2. ' stack' → logprob: -9.500083923339844
    3. '(stack' → logprob: -11.750083923339844
    4. '	stack' → logprob: -14.375083923339844
    5. '.stack' → logprob: -15.625083923339844
    6. 'stackoverflow' → logprob: -16.750083923339844
    7. '<|end|>' → logprob: -16.750083923339844
    8. 'b' → logprob: -17.625083923339844
    9. '-stack' → logprob: -17.625083923339844
    10. ' ' → logprob: -17.875083923339844

Token 53: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.0003389190824236721
    2. 'pop' → logprob: -8.000338554382324
    3. '-pop' → logprob: -13.500338554382324
    4. '.append' → logprob: -13.625338554382324
    5. '.' → logprob: -14.375338554382324
    6. '	pop' → logprob: -16.12533950805664
    7. '_pop' → logprob: -16.50033950805664
    8. ' pop' → logprob: -16.75033950805664
    9. 'Pop' → logprob: -17.50033950805664
    10. '(pop' → logprob: -18.12533950805664

Token 54: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -3.3451433409936726e-05
    2. '()
' → logprob: -11.250033378601074
    3. '()]' → logprob: -12.125033378601074
    4. ' ()' → logprob: -12.750033378601074
    5. '(' → logprob: -12.875033378601074
    6. '()

' → logprob: -13.000033378601074
    7. '()[' → logprob: -13.250033378601074
    8. '())' → logprob: -13.375033378601074
    9. '()<' → logprob: -14.500033378601074
    10. '()<<' → logprob: -14.875033378601074

Token 55: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5927073955535889
    2. 'stack' → logprob: -0.8427073955535889
    3. '   ' → logprob: -5.467707633972168
    4. '-' → logprob: -5.467707633972168
    5. ' stack' → logprob: -5.842707633972168
    6. '-stack' → logprob: -6.717707633972168
    7. '```' → logprob: -7.217707633972168
    8. '-
' → logprob: -7.342707633972168
    9. ')' → logprob: -7.717707633972168
    10. '	stack' → logprob: -7.842707633972168

Token 56: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.024762077257037163
    2. ' stack' → logprob: -3.7747621536254883
    3. '       ' → logprob: -7.149762153625488
    4. '-stack' → logprob: -7.649762153625488
    5. '```' → logprob: -9.024762153625488
    6. '.stack' → logprob: -10.649762153625488
    7. '	stack' → logprob: -10.774762153625488
    8. '-' → logprob: -11.024762153625488
    9. '   ' → logprob: -11.149762153625488
    10. '(stack' → logprob: -11.274762153625488

Token 57: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.002283956855535507
    2. '.' → logprob: -6.127284049987793
    3. '.pop' → logprob: -9.627284049987793
    4. 'append' → logprob: -10.752284049987793
    5. '.extend' → logprob: -12.502284049987793
    6. ' .' → logprob: -12.627284049987793
    7. '.push' → logprob: -13.752284049987793
    8. '.Append' → logprob: -14.252284049987793
    9. '.app' → logprob: -14.377284049987793
    10. '-' → logprob: -14.877284049987793

Token 58: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.0005579164135269821
    2. '(' → logprob: -7.500557899475098
    3. 'b' → logprob: -12.500557899475098
    4. '((' → logprob: -14.875557899475098
    5. ')b' → logprob: -15.750557899475098
    6. '(stack' → logprob: -16.000558853149414
    7. ' (' → logprob: -16.000558853149414
    8. ' b' → logprob: -16.375558853149414
    9. '(B' → logprob: -16.375558853149414
    10. '(-' → logprob: -16.500558853149414

Token 59: '-a' (ID: 8575)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.16981622576713562
    2. ' -' → logprob: -1.919816255569458
    3. '-a' → logprob: -4.669816017150879
    4. 'a' → logprob: -9.294816017150879
    5. ')' → logprob: -9.919816017150879
    6. ' a' → logprob: -11.044816017150879
    7. '-)' → logprob: -12.419816017150879
    8. ')-' → logprob: -12.794816017150879
    9. ''-' → logprob: -13.169816017150879
    10. '-а' → logprob: -13.294816017150879

Token 60: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001181181170977652
    2. ')
' → logprob: -6.751181125640869
    3. '   ' → logprob: -12.001181602478027
    4. ' )' → logprob: -13.126181602478027
    5. '       ' → logprob: -14.376181602478027
    6. ')
' → logprob: -14.501181602478027
    7. '')' → logprob: -14.751181602478027
    8. '))' → logprob: -15.001181602478027
    9. '`)' → logprob: -15.376181602478027
    10. ')

' → logprob: -15.501181602478027

Token 61: '  
' (ID: 4066)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.11050713807344437
    2. '   ' → logprob: -2.4855072498321533
    3. ' elif' → logprob: -4.110507011413574
    4. '	elif' → logprob: -5.735507011413574
    5. '<|end|>' → logprob: -6.485507011413574
    6. 'else' → logprob: -9.235507011413574
    7. '```' → logprob: -10.360507011413574
    8. '...' → logprob: -11.360507011413574
    9. ')' → logprob: -11.735507011413574
    10. '#elif' → logprob: -11.860507011413574

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4521014988422394
    2. 'elif' → logprob: -1.077101469039917
    3. ' elif' → logprob: -3.952101469039917
    4. '	elif' → logprob: -5.702101707458496
    5. '<|end|>' → logprob: -7.952101707458496
    6. '```' → logprob: -8.952101707458496
    7. ' ' → logprob: -10.577101707458496
    8. 'else' → logprob: -11.077101707458496
    9. '  ' → logprob: -11.077101707458496
    10. '    
' → logprob: -11.327101707458496

Token 63: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.10466941446065903
    2. ' elif' → logprob: -2.3546693325042725
    3. 'else' → logprob: -6.354669570922852
    4. '   ' → logprob: -6.479669570922852
    5. '	elif' → logprob: -7.104669570922852
    6. ' else' → logprob: -8.229669570922852
    7. '*' → logprob: -9.604669570922852
    8. ' ' → logprob: -11.354669570922852
    9. '```' → logprob: -12.229669570922852
    10. '  ' → logprob: -13.479669570922852

Token 64: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.1645795851945877
    2. 'x' → logprob: -2.0395796298980713
    3. ''x' → logprob: -4.164579391479492
    4. ' '' → logprob: -5.539579391479492
    5. ' ' → logprob: -6.664579391479492
    6. ''' → logprob: -7.789579391479492
    7. '<|end|>' → logprob: -8.164579391479492
    8. ''*' → logprob: -9.539579391479492
    9. '"x' → logprob: -10.414579391479492
    10. '`' → logprob: -10.789579391479492

Token 65: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -0.0013598784571513534
    2. '==' → logprob: -6.626359939575195
    3. '=="' → logprob: -10.751359939575195
    4. ' ==' → logprob: -12.501359939575195
    5. ' =='' → logprob: -13.001359939575195
    6. '='' → logprob: -13.126359939575195
    7. '=' → logprob: -13.626359939575195
    8. ''' → logprob: -14.126359939575195
    9. ']=='' → logprob: -14.251359939575195
    10. '==='' → logprob: -14.376359939575195

Token 66: '*' (ID: 9)
  Prédit: '*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.5233778357505798
    2. ''*' → logprob: -0.8983778357505798
    3. '/' → logprob: -9.523377418518066
    4. '*:' → logprob: -9.773377418518066
    5. '*/' → logprob: -9.898377418518066
    6. '"*' → logprob: -10.273377418518066
    7. ''' → logprob: -11.148377418518066
    8. '***' → logprob: -12.273377418518066
    9. '*>' → logprob: -12.648377418518066
    10. '*=' → logprob: -12.898377418518066

Token 67: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.0012895208783447742
    2. '':
' → logprob: -7.251289367675781
    3. ':' → logprob: -8.001289367675781
    4. ''' → logprob: -8.501289367675781
    5. '':'' → logprob: -10.876289367675781
    6. '':
' → logprob: -11.126289367675781
    7. '       ' → logprob: -12.751289367675781
    8. '   ' → logprob: -13.626289367675781
    9. '':

' → logprob: -14.126289367675781
    10. ' ':' → logprob: -14.626289367675781

Token 68: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.37428420782089233
    2. '   ' → logprob: -1.249284267425537
    3. '<|end|>' → logprob: -4.874284267425537
    4. ':' → logprob: -4.999284267425537
    5. ' a' → logprob: -5.374284267425537
    6. 'a' → logprob: -5.624284267425537
    7. ':
' → logprob: -6.874284267425537
    8. ' ' → logprob: -7.999284267425537
    9. '    ' → logprob: -7.999284267425537
    10. '```' → logprob: -8.499283790588379

Token 69: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.0011430763406679034
    2. ' a' → logprob: -7.001142978668213
    3. '   ' → logprob: -8.376143455505371
    4. '       ' → logprob: -14.376143455505371
    5. '	a' → logprob: -14.626143455505371
    6. ' ' → logprob: -16.251142501831055
    7. '```' → logprob: -17.001142501831055
    8. '  ' → logprob: -17.126142501831055
    9. '    ' → logprob: -17.626142501831055
    10. '_a' → logprob: -19.626142501831055

Token 70: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.9361264946837764e-07
    2. ' =' → logprob: -15.625
    3. '=

' → logprob: -18.375
    4. '=
' → logprob: -19.5
    5. '=`' → logprob: -20.375
    6. '=}' → logprob: -21.0
    7. '=int' → logprob: -21.625
    8. '=[]' → logprob: -21.875
    9. '=s' → logprob: -22.125
    10. '=''' → logprob: -22.375

Token 71: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.5048530030981055e-06
    2. ' stack' → logprob: -13.500001907348633
    3. '(stack' → logprob: -18.250001907348633
    4. '	stack' → logprob: -18.375001907348633
    5. 'stackoverflow' → logprob: -18.875001907348633
    6. '.stack' → logprob: -19.625001907348633
    7. '_stack' → logprob: -21.000001907348633
    8. 'Stack' → logprob: -21.250001907348633
    9. '-stack' → logprob: -21.750001907348633
    10. 'stk' → logprob: -22.500001907348633

Token 72: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.001232849550433457
    2. '=' → logprob: -6.751232624053955
    3. 'pop' → logprob: -10.251233100891113
    4. '.' → logprob: -10.751233100891113
    5. '.append' → logprob: -12.251233100891113
    6. ' .' → logprob: -15.501233100891113
    7. ' =' → logprob: -15.626233100891113
    8. '	pop' → logprob: -15.626233100891113
    9. '.stack' → logprob: -16.001232147216797
    10. '_pop' → logprob: -16.126232147216797

Token 73: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.662937372922897e-05
    2. '()
' → logprob: -9.250096321105957
    3. '()
' → logprob: -15.250096321105957
    4. '(' → logprob: -15.875096321105957
    5. '()

' → logprob: -16.375097274780273
    6. ' ()' → logprob: -17.000097274780273
    7. '()`' → logprob: -17.875097274780273
    8. '()\' → logprob: -18.250097274780273
    9. '()]' → logprob: -18.750097274780273
    10. '(),' → logprob: -19.125097274780273

Token 74: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002308219438418746
    2. '<|end|>' → logprob: -6.127308368682861
    3. 'b' → logprob: -10.127307891845703
    4. '```' → logprob: -10.377307891845703
    5. '   ' → logprob: -10.627307891845703
    6. '
' → logprob: -11.377307891845703
    7. '<|end|>' → logprob: -12.877307891845703
    8. ',' → logprob: -13.252307891845703
    9. ')' → logprob: -13.377307891845703
    10. '#' → logprob: -13.502307891845703

Token 75: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -2.7729658540920354e-05
    2. ' b' → logprob: -10.500027656555176
    3. '   ' → logprob: -17.250028610229492
    4. '       ' → logprob: -17.625028610229492
    5. '*b' → logprob: -19.125028610229492
    6. '	b' → logprob: -19.500028610229492
    7. '<|end|>' → logprob: -19.500028610229492
    8. 'a' → logprob: -19.625028610229492
    9. ' ' → logprob: -19.750028610229492
    10. '```' → logprob: -20.250028610229492

Token 76: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.9361264946837764e-07
    2. '.pop' → logprob: -16.0
    3. '=.' → logprob: -17.25
    4. '.' → logprob: -17.625
    5. '.=' → logprob: -18.375
    6. ' =' → logprob: -18.625
    7. '=[]' → logprob: -18.875
    8. '.stack' → logprob: -19.125
    9. '=s' → logprob: -20.75
    10. '.append' → logprob: -21.125

Token 77: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -8.65707261255011e-06
    2. ' stack' → logprob: -11.875008583068848
    3. '(stack' → logprob: -13.875008583068848
    4. '	stack' → logprob: -14.750008583068848
    5. '.stack' → logprob: -16.000009536743164
    6. 'st' → logprob: -16.625009536743164
    7. 'sta' → logprob: -17.250009536743164
    8. 'stackoverflow' → logprob: -17.625009536743164
    9. '[' → logprob: -18.125009536743164
    10. '-stack' → logprob: -18.125009536743164

Token 78: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.00011105302110081539
    2. '.' → logprob: -9.375110626220703
    3. 'pop' → logprob: -10.750110626220703
    4. ' .' → logprob: -12.625110626220703
    5. '.append' → logprob: -13.875110626220703
    6. '	pop' → logprob: -15.750110626220703
    7. '[-' → logprob: -16.750110626220703
    8. '.Pop' → logprob: -16.750110626220703
    9. '_pop' → logprob: -17.000110626220703
    10. '-pop' → logprob: -17.000110626220703

Token 79: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.12702344357967377
    2. '()
' → logprob: -2.127023458480835
    3. '()
' → logprob: -9.377023696899414
    4. '()

' → logprob: -12.127023696899414
    5. '(' → logprob: -13.627023696899414
    6. '()`' → logprob: -13.877023696899414
    7. '()\' → logprob: -14.127023696899414
    8. ')' → logprob: -14.377023696899414
    9. '```' → logprob: -15.377023696899414
    10. ' ()' → logprob: -15.502023696899414

Token 80: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.046725619584321976
    2. '
' → logprob: -3.4217255115509033
    3. '   ' → logprob: -4.796725749969482
    4. 'stack' → logprob: -6.046725749969482
    5. '```' → logprob: -6.796725749969482
    6. '``' → logprob: -8.546725273132324
    7. '        
' → logprob: -8.796725273132324
    8. '<|end|>' → logprob: -9.171725273132324
    9. ')
' → logprob: -9.421725273132324
    10. '           ' → logprob: -9.421725273132324

Token 81: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.0002314303710591048
    2. ' stack' → logprob: -8.375231742858887
    3. '```' → logprob: -15.000231742858887
    4. '	stack' → logprob: -15.625231742858887
    5. '   ' → logprob: -15.875231742858887
    6. '.stack' → logprob: -16.37523078918457
    7. '       ' → logprob: -16.75023078918457
    8. '(stack' → logprob: -17.00023078918457
    9. 'stackoverflow' → logprob: -17.25023078918457
    10. 'Stack' → logprob: -17.50023078918457

Token 82: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0005122834118083119
    2. '.' → logprob: -7.75051212310791
    3. '.pop' → logprob: -9.50051212310791
    4. ' .' → logprob: -12.62551212310791
    5. '.app' → logprob: -13.62551212310791
    6. '.extend' → logprob: -14.12551212310791
    7. '.ap' → logprob: -14.12551212310791
    8. '.push' → logprob: -15.12551212310791
    9. 'append' → logprob: -15.62551212310791
    10. '.Append' → logprob: -16.250513076782227

Token 83: '(a' (ID: 6271)
  Prédit: '(b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.0015379542019218206
    2. '(a' → logprob: -7.001537799835205
    3. '(' → logprob: -7.376537799835205
    4. '(
' → logprob: -15.751538276672363
    5. '((' → logprob: -15.876538276672363
    6. 'b' → logprob: -16.626537322998047
    7. '(stack' → logprob: -17.251537322998047
    8. ' (' → logprob: -17.751537322998047
    9. '*b' → logprob: -18.126537322998047
    10. 'a' → logprob: -18.501537322998047

Token 84: '*b' (ID: 72162)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.20142629742622375
    2. '*b' → logprob: -1.7014262676239014
    3. ' *' → logprob: -13.07642650604248
    4. '*object' → logprob: -13.32642650604248
    5. '**' → logprob: -13.57642650604248
    6. '*q' → logprob: -13.70142650604248
    7. '*g' → logprob: -13.82642650604248
    8. '***' → logprob: -13.95142650604248
    9. '*a' → logprob: -14.20142650604248
    10. '*)' → logprob: -14.45142650604248

Token 85: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1160349458805285e-05
    2. ')
' → logprob: -12.125011444091797
    3. ' )' → logprob: -12.125011444091797
    4. '   ' → logprob: -16.375011444091797
    5. '）' → logprob: -17.250011444091797
    6. '')' → logprob: -17.375011444091797
    7. '*' → logprob: -17.625011444091797
    8. ')a' → logprob: -18.000011444091797
    9. '))' → logprob: -18.375011444091797
    10. '       ' → logprob: -18.375011444091797

Token 86: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8206685185432434
    2. '<|end|>' → logprob: -0.9456685185432434
    3. 'elif' → logprob: -2.9456684589385986
    4. '   ' → logprob: -3.1956684589385986
    5. ')' → logprob: -4.070668697357178
    6. '```' → logprob: -4.320668697357178
    7. ' ' → logprob: -4.820668697357178
    8. 'else' → logprob: -4.945668697357178
    9. ' elif' → logprob: -5.070668697357178
    10. '  ' → logprob: -5.570668697357178

Token 87: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.6673778295516968
    2. 'elif' → logprob: -1.5423778295516968
    3. ' else' → logprob: -2.6673779487609863
    4. '<|end|>' → logprob: -2.6673779487609863
    5. '       ' → logprob: -2.9173779487609863
    6. ')' → logprob: -3.1673779487609863
    7. '   ' → logprob: -4.417377948760986
    8. ' elif' → logprob: -5.167377948760986
    9. '```' → logprob: -5.167377948760986
    10. ' ' → logprob: -5.167377948760986

Token 88: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.6060808522743173e-05
    2. ' :' → logprob: -11.250025749206543
    3. ':
' → logprob: -11.500025749206543
    4. '   ' → logprob: -13.625025749206543
    5. '(stack' → logprob: -15.000025749206543
    6. ':list' → logprob: -15.750025749206543
    7. '：' → logprob: -15.875025749206543
    8. '.stack' → logprob: -15.875025749206543
    9. '	stack' → logprob: -16.37502670288086
    10. '{' → logprob: -16.50002670288086

Token 89: '       ' (ID: 309)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.6903942823410034
    2. '   ' → logprob: -1.0653942823410034
    3. '       ' → logprob: -2.065394401550293
    4. ' stack' → logprob: -3.690394401550293
    5. '	stack' → logprob: -6.190394401550293
    6. '```' → logprob: -8.815394401550293
    7. ' ' → logprob: -10.565394401550293
    8. '.stack' → logprob: -10.940394401550293
    9. '(stack' → logprob: -11.065394401550293
    10. '    ' → logprob: -11.440394401550293

Token 90: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.029796656221151352
    2. ' stack' → logprob: -3.529796600341797
    3. '   ' → logprob: -10.529796600341797
    4. '	stack' → logprob: -11.154796600341797
    5. '       ' → logprob: -12.404796600341797
    6. '.stack' → logprob: -14.404796600341797
    7. '(stack' → logprob: -15.904796600341797
    8. '    ' → logprob: -16.279796600341797
    9. '```' → logprob: -16.404796600341797
    10. '-stack' → logprob: -16.654796600341797

Token 91: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.029779773205518723
    2. '.' → logprob: -3.5297796726226807
    3. '.app' → logprob: -11.404779434204102
    4. 'append' → logprob: -12.154779434204102
    5. '.push' → logprob: -12.279779434204102
    6. '.pop' → logprob: -12.654779434204102
    7. '.Append' → logprob: -13.529779434204102
    8. ' .' → logprob: -14.154779434204102
    9. ').' → logprob: -14.404779434204102
    10. '.ap' → logprob: -14.654779434204102

Token 92: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00033784625702537596
    2. '(' → logprob: -8.000337600708008
    3. 'int' → logprob: -13.000337600708008
    4. '(float' → logprob: -16.250337600708008
    5. '(
' → logprob: -17.500337600708008
    6. '(eval' → logprob: -17.625337600708008
    7. ' (' → logprob: -17.750337600708008
    8. '(in' → logprob: -17.875337600708008
    9. '(i' → logprob: -17.875337600708008
    10. '((' → logprob: -18.000337600708008

Token 93: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0036071976646780968
    2. '(' → logprob: -5.628607273101807
    3. ')' → logprob: -12.628606796264648
    4. ' (' → logprob: -13.753606796264648
    5. '(
' → logprob: -13.753606796264648
    6. ')(' → logprob: -14.003606796264648
    7. ')x' → logprob: -15.128606796264648
    8. '((' → logprob: -15.253606796264648
    9. '(

' → logprob: -16.12860679626465
    10. 'x' → logprob: -16.75360679626465

Token 94: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.674858301877975e-05
    2. '))' → logprob: -9.250096321105957
    3. ')
' → logprob: -15.625096321105957
    4. ' )' → logprob: -15.625096321105957
    5. ')))' → logprob: -15.750096321105957
    6. ')`' → logprob: -18.000097274780273
    7. ')")' → logprob: -19.375097274780273
    8. ')**' → logprob: -19.625097274780273
    9. '')' → logprob: -19.875097274780273
    10. ')#' → logprob: -20.000097274780273

Token 95: '        
' (ID: 3564)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0613122396171093
    2. ')' → logprob: -3.811312198638916
    3. '
' → logprob: -3.936312198638916
    4. '\n' → logprob: -5.311312198638916
    5. '<|end|>' → logprob: -5.811312198638916
    6. '#' → logprob: -6.186312198638916
    7. '```' → logprob: -6.436312198638916
    8. '[' → logprob: -6.811312198638916
    9. ']' → logprob: -7.061312198638916
    10. ' ' → logprob: -7.186312198638916

Token 96: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -9.491498531133402e-06
    2. '```' → logprob: -12.875009536743164
    3. ' print' → logprob: -13.000009536743164
    4. ')' → logprob: -13.375009536743164
    5. '
' → logprob: -14.750009536743164
    6. '#' → logprob: -14.750009536743164
    7. '(print' → logprob: -14.875009536743164
    8. ']' → logprob: -15.125009536743164
    9. '\n' → logprob: -15.250009536743164
    10. '[' → logprob: -15.250009536743164

Token 97: '(stack' (ID: 52691)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931656002998352
    2. '(stack' → logprob: -0.6931656002998352
    3. '("("' → logprob: -11.94316577911377
    4. '('' → logprob: -12.31816577911377
    5. '(Stack' → logprob: -12.69316577911377
    6. '(`' → logprob: -13.81816577911377
    7. '((' → logprob: -14.19316577911377
    8. '(st' → logprob: -14.44316577911377
    9. '()' → logprob: -14.94316577911377
    10. ' (' → logprob: -15.19316577911377

Token 98: '[-' (ID: 17503)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14221623539924622
    2. '[' → logprob: -2.142216205596924
    3. '.pop' → logprob: -4.767216205596924
    4. '[-' → logprob: -5.017216205596924
    5. ']' → logprob: -10.767216682434082
    6. '])' → logprob: -11.642216682434082
    7. '))' → logprob: -12.642216682434082
    8. 'pop' → logprob: -12.767216682434082
    9. ')
' → logprob: -13.017216682434082
    10. '[])' → logprob: -13.142216682434082

Token 99: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -17.125
    3. '])' → logprob: -19.375
    4. ')' → logprob: -20.625
    5. '１' → logprob: -21.0
    6. ']' → logprob: -21.125
    7. '۱' → logprob: -21.75
    8. '```' → logprob: -21.875
    9. '  ' → logprob: -22.0
    10. '   ' → logprob: -22.125

Token 100: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.5
    3. '))' → logprob: -16.5
    4. ')`' → logprob: -17.875
    5. '）' → logprob: -19.0
    6. ')
' → logprob: -19.0
    7. ']' → logprob: -19.875
    8. '])' → logprob: -20.0
    9. '`)' → logprob: -20.5
    10. ')#' → logprob: -20.875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 98
Tokens correctement prédits (1ère position, stricte): 49
Tokens correctement prédits (1ère position, avec adaptation): 57
Tokens correctement prédits (top 10): 89
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 58.16%
Précision (top 10): 90.82%
================================================================================
