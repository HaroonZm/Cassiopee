================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:24
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
inputs = input().split(" ")
stack = []

for str in inputs:
  if str.isdigit():
    stack.append(int(str))
  else:
    b = stack.pop()
    a = stack.pop()
    if str == '+':
      stack.append(a + b)
    elif str == '-':
      stack.append(a - b)
    elif str == '*':
      stack.append(a * b)

print(stack.pop())
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'inputs' (ID: 54250)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000987200066447258
    2. '('' → logprob: -7.6259870529174805
    3. ''' → logprob: -8.87598705291748
    4. '"' → logprob: -9.62598705291748
    5. '(
' → logprob: -9.62598705291748
    6. 's' → logprob: -9.87598705291748
    7. '[' → logprob: -10.00098705291748
    8. '("("' → logprob: -10.25098705291748
    9. '()' → logprob: -10.87598705291748
    10. '.' → logprob: -11.00098705291748

Token 4: 'split' (ID: 13627)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.24695205688476562
    2. '(' → logprob: -1.9969520568847656
    3. '().' → logprob: -3.7469520568847656
    4. '.' → logprob: -3.8719520568847656
    5. '.split' → logprob: -4.121952056884766
    6. 'split' → logprob: -4.621952056884766
    7. ')' → logprob: -5.746952056884766
    8. '```' → logprob: -5.871952056884766
    9. '.strip' → logprob: -6.121952056884766
    10. '.lower' → logprob: -7.121952056884766

Token 5: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003903265343979001
    2. '()' → logprob: -5.628903388977051
    3. '"' → logprob: -9.75390338897705
    4. '`' → logprob: -10.12890338897705
    5. '('' → logprob: -10.12890338897705
    6. '(
' → logprob: -10.12890338897705
    7. '("("' → logprob: -10.62890338897705
    8. '```' → logprob: -10.62890338897705
    9. '(

' → logprob: -10.75390338897705
    10. '((' → logprob: -11.00390338897705

Token 6: ' ")
' (ID: 31232)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05553916096687317
    2. '")' → logprob: -2.930539131164551
    3. '"' → logprob: -7.930539131164551
    4. ' )' → logprob: -9.43053913116455
    5. ',' → logprob: -9.55553913116455
    6. ' ")' → logprob: -10.05553913116455
    7. ')")' → logprob: -10.68053913116455
    8. ' ' → logprob: -11.30553913116455
    9. '(' → logprob: -11.43053913116455
    10. '"""' → logprob: -11.68053913116455

Token 7: 'stack' (ID: 15145)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.24424998462200165
    2. '=' → logprob: -1.994249939918518
    3. 'x' → logprob: -3.2442500591278076
    4. 'for' → logprob: -4.6192498207092285
    5. 'n' → logprob: -4.8692498207092285
    6. '#' → logprob: -4.9942498207092285
    7. 'a' → logprob: -5.6192498207092285
    8. '.' → logprob: -5.9942498207092285
    9. '_' → logprob: -6.2442498207092285
    10. '(' → logprob: -6.3692498207092285

Token 8: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.029958050698041916
    2. '.append' → logprob: -3.5299580097198486
    3. '.pop' → logprob: -8.77995777130127
    4. '.push' → logprob: -10.90495777130127
    5. '[' → logprob: -11.02995777130127
    6. '.setdefault' → logprob: -12.90495777130127
    7. '=' → logprob: -13.15495777130127
    8. '[:]' → logprob: -13.40495777130127
    9. ' =' → logprob: -13.52995777130127
    10. '.add' → logprob: -13.52995777130127

Token 9: ' []

' (ID: 32833)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.00014048899174667895
    2. ' []' → logprob: -9.125140190124512
    3. '[' → logprob: -10.625140190124512
    4. '[]}' → logprob: -12.000140190124512
    5. '[]
' → logprob: -14.875140190124512
    6. '[]>' → logprob: -15.500140190124512
    7. '```' → logprob: -16.250141143798828
    8. '[]

' → logprob: -16.500141143798828
    9. '[],' → logprob: -16.625141143798828
    10. '[])' → logprob: -16.750141143798828

Token 10: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -2.339278580620885e-06
    2. '```' → logprob: -14.000001907348633
    3. ' for' → logprob: -14.375001907348633
    4. 'if' → logprob: -14.625001907348633
    5. 'n' → logprob: -15.625001907348633
    6. 'while' → logprob: -16.000001907348633
    7. '`' → logprob: -17.375001907348633
    8. 'a' → logprob: -18.500001907348633
    9. 'num' → logprob: -18.625001907348633
    10. 'f' → logprob: -19.250001907348633

Token 11: ' str' (ID: 989)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2137438952922821
    2. ' i' → logprob: -1.7137439250946045
    3. ' item' → logprob: -5.213743686676025
    4. '  ' → logprob: -5.713743686676025
    5. ' token' → logprob: -6.338743686676025
    6. ' _' → logprob: -7.588743686676025
    7. ' x' → logprob: -8.088744163513184
    8. ' word' → logprob: -8.213744163513184
    9. ' element' → logprob: -8.588744163513184
    10. '_' → logprob: -8.713744163513184

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -1.0868632793426514
    2. ' ' → logprob: -1.2118632793426514
    3. 'in' → logprob: -1.7118632793426514
    4. 'ing' → logprob: -2.7118632793426514
    5. '_' → logprob: -2.9618632793426514
    6. 's' → logprob: -3.9618632793426514
    7. 'i' → logprob: -4.9618635177612305
    8. '_token' → logprob: -5.4618635177612305
    9. '  ' → logprob: -5.5868635177612305
    10. '_in' → logprob: -5.8368635177612305

Token 13: ' inputs' (ID: 21963)
  Prédit: ' inputs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inputs' → logprob: -0.2816946506500244
    2. 'inputs' → logprob: -1.4066946506500244
    3. 'input' → logprob: -8.156694412231445
    4. ' input' → logprob: -8.656694412231445
    5. '(inputs' → logprob: -10.531694412231445
    6. ' stack' → logprob: -11.031694412231445
    7. 'stack' → logprob: -11.156694412231445
    8. ' range' → logprob: -12.156694412231445
    9. 's' → logprob: -12.531694412231445
    10. 'range' → logprob: -12.531694412231445

Token 14: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002712297427933663
    2. ' :' → logprob: -9.00027084350586
    3. '[:]' → logprob: -9.50027084350586
    4. '":' → logprob: -10.62527084350586
    5. '":"' → logprob: -11.62527084350586
    6. ':
' → logprob: -11.62527084350586
    7. ':**' → logprob: -11.75027084350586
    8. '':' → logprob: -12.00027084350586
    9. '':'' → logprob: -12.62527084350586
    10. '[:' → logprob: -12.62527084350586

Token 15: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3236582279205322
    2. '   ' → logprob: -1.8236582279205322
    3. '    ' → logprob: -2.8236582279205322
    4. ' if' → logprob: -3.0736582279205322
    5. '<|end|>' → logprob: -5.323657989501953
    6. 'if' → logprob: -6.823657989501953
    7. '    
' → logprob: -7.073657989501953
    8. '  ' → logprob: -7.323657989501953
    9. ' 
' → logprob: -7.823657989501953
    10. 's' → logprob: -8.198657989501953

Token 16: ' if' (ID: 538)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4556204676628113
    2. 'if' → logprob: -1.080620527267456
    3. ' if' → logprob: -4.080620288848877
    4. ' ' → logprob: -5.330620288848877
    5. ':' → logprob: -5.955620288848877
    6. '   ' → logprob: -7.455620288848877
    7. 's' → logprob: -7.830620288848877
    8. ' i' → logprob: -7.955620288848877
    9. '[' → logprob: -8.455620765686035
    10. 'stack' → logprob: -8.830620765686035

Token 17: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.013587082736194134
    2. 'str' → logprob: -4.51358699798584
    3. ' ' → logprob: -6.01358699798584
    4. ' stack' → logprob: -10.13858699798584
    5. '	str' → logprob: -11.76358699798584
    6. ' ' → logprob: -11.88858699798584
    7. 's' → logprob: -12.01358699798584
    8. '  ' → logprob: -12.26358699798584
    9. ' s' → logprob: -12.38858699798584
    10. ' not' → logprob: -12.51358699798584

Token 18: '.is' (ID: 3109)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.28592389822006226
    2. '==' → logprob: -1.785923957824707
    3. '.is' → logprob: -3.035923957824707
    4. ' ' → logprob: -4.160923957824707
    5. ' not' → logprob: -5.285923957824707
    6. ' in' → logprob: -5.660923957824707
    7. '[' → logprob: -6.035923957824707
    8. ' !=' → logprob: -6.160923957824707
    9. ')' → logprob: -7.535923957824707
    10. '.' → logprob: -7.660923957824707

Token 19: 'digit' (ID: 78327)
  Prédit: 'digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -0.0006432149093598127
    2. 'numeric' → logprob: -8.000642776489258
    3. 'decimal' → logprob: -8.250642776489258
    4. 'alpha' → logprob: -10.000642776489258
    5. '_digit' → logprob: -14.000642776489258
    6. 'al' → logprob: -15.375642776489258
    7. 'dig' → logprob: -16.750642776489258
    8. 'digits' → logprob: -17.375642776489258
    9. 'digital' → logprob: -17.625642776489258
    10. ' digit' → logprob: -17.750642776489258

Token 20: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004010015167295933
    2. '(' → logprob: -6.504010200500488
    3. '():' → logprob: -6.504010200500488
    4. '())' → logprob: -7.004010200500488
    5. '()>' → logprob: -10.879010200500488
    6. ')' → logprob: -11.004010200500488
    7. '()==' → logprob: -11.629010200500488
    8. '("("' → logprob: -11.754010200500488
    9. '('' → logprob: -12.254010200500488
    10. '(),' → logprob: -12.379010200500488

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4884364902973175
    2. ' ' → logprob: -1.4884364604949951
    3. '    ' → logprob: -2.738436460494995
    4. '  ' → logprob: -2.988436460494995
    5. '(stack' → logprob: -4.738436698913574
    6. 'stack' → logprob: -4.988436698913574
    7. ' stack' → logprob: -5.238436698913574
    8. '	stack' → logprob: -5.488436698913574
    9. '     ' → logprob: -5.613436698913574
    10. ' )' → logprob: -5.738436698913574

Token 22: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.05353875830769539
    2. 'stack' (adapté à ' stack') → logprob: -3.0535387992858887
    3. '   ' → logprob: -5.678538799285889
    4. '	stack' → logprob: -7.053538799285889
    5. ' ' → logprob: -7.553538799285889
    6. '.stack' → logprob: -9.80353832244873
    7. '(stack' → logprob: -10.55353832244873
    8. '_stack' → logprob: -10.92853832244873
    9. 'Stack' → logprob: -11.42853832244873
    10. '  ' → logprob: -12.30353832244873

Token 23: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.003644495503976941
    2. '.' → logprob: -5.6286444664001465
    3. '.push' → logprob: -10.503644943237305
    4. '.app' → logprob: -12.128644943237305
    5. '.ap' → logprob: -12.878644943237305
    6. '.stack' → logprob: -13.253644943237305
    7. '.extend' → logprob: -13.378644943237305
    8. '.pop' → logprob: -13.503644943237305
    9. '.add' → logprob: -13.753644943237305
    10. ' .' → logprob: -14.128644943237305

Token 24: '(int' (ID: 2742)
  Prédit: '(str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.638224720954895
    2. '(int' → logprob: -1.138224720954895
    3. '(' → logprob: -1.888224720954895
    4. '(float' → logprob: -10.763224601745605
    5. '(
' → logprob: -11.888224601745605
    6. ' (' → logprob: -12.263224601745605
    7. '('' → logprob: -13.138224601745605
    8. '((' → logprob: -13.513224601745605
    9. '("("' → logprob: -13.763224601745605
    10. '(s' → logprob: -13.888224601745605

Token 25: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.0031847211066633463
    2. '(' → logprob: -5.753184795379639
    3. 'str' → logprob: -13.00318431854248
    4. ' (' → logprob: -13.37818431854248
    5. ')' → logprob: -13.37818431854248
    6. ' str' → logprob: -14.37818431854248
    7. ' ' → logprob: -14.75318431854248
    8. '(s' → logprob: -15.37818431854248
    9. ')(' → logprob: -15.75318431854248
    10. '	str' → logprob: -16.753185272216797

Token 26: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.01422861684113741
    2. ')' → logprob: -4.264228820800781
    3. ' ' → logprob: -10.639228820800781
    4. '()))' → logprob: -11.389228820800781
    5. ')))' → logprob: -11.514228820800781
    6. ' ))' → logprob: -11.514228820800781
    7. '))
' → logprob: -11.764228820800781
    8. ''))' → logprob: -14.514228820800781
    9. '()' → logprob: -15.389228820800781
    10. '"))' → logprob: -15.514228820800781

Token 27: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.024994531646370888
    2. ' elif' → logprob: -4.024994373321533
    3. 'elif' → logprob: -5.774994373321533
    4. ' else' → logprob: -5.774994373321533
    5. 'else' → logprob: -7.649994373321533
    6. '<|end|>' → logprob: -9.649994850158691
    7. '  
' → logprob: -10.149994850158691
    8. '	elif' → logprob: -10.899994850158691
    9. '  ' → logprob: -11.899994850158691
    10. ' )' → logprob: -14.024994850158691

Token 28: ' else' (ID: 1203)
  Prédit: ' elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' elif' → logprob: -0.21200282871723175
    2. ' ' → logprob: -2.462002754211426
    3. 'elif' → logprob: -2.712002754211426
    4. ' else' → logprob: -3.337002754211426
    5. 'else' → logprob: -5.587002754211426
    6. '	elif' → logprob: -10.212002754211426
    7. '  ' → logprob: -11.212002754211426
    8. ' )' → logprob: -11.462002754211426
    9. '-' → logprob: -13.087002754211426
    10. ')' → logprob: -13.212002754211426

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00071386230411008
    2. ':
' → logprob: -8.500714302062988
    3. '<|end|>' → logprob: -8.625714302062988
    4. '   ' → logprob: -9.250714302062988
    5. ')' → logprob: -10.000714302062988
    6. ' ' → logprob: -10.250714302062988
    7. ' :' → logprob: -10.250714302062988
    8. '):' → logprob: -10.875714302062988
    9. '[' → logprob: -11.000714302062988
    10. '<|end|>' → logprob: -11.250714302062988

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14749115705490112
    2. ' ' → logprob: -2.397491216659546
    3. '    ' → logprob: -3.647491216659546
    4. '  ' → logprob: -5.147490978240967
    5. '    
' → logprob: -5.772490978240967
    6. '  
' → logprob: -5.772490978240967
    7. '     ' → logprob: -5.897490978240967
    8. '       ' → logprob: -6.272490978240967
    9. ' 
' → logprob: -6.522490978240967
    10. '<|end|>' → logprob: -7.647490978240967

Token 31: ' b' (ID: 287)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.030082643032073975
    2. ' stack' → logprob: -3.9050827026367188
    3. '    ' → logprob: -6.530082702636719
    4. ' a' → logprob: -7.030082702636719
    5. '(stack' → logprob: -7.155082702636719
    6. ' b' → logprob: -7.405082702636719
    7. 'stack' → logprob: -7.405082702636719
    8. ' x' → logprob: -7.655082702636719
    9. ' s' → logprob: -7.655082702636719
    10. '  ' → logprob: -7.780082702636719

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01822580024600029
    2. '=' → logprob: -4.01822566986084
    3. ' ' → logprob: -9.76822566986084
    4. ',' → logprob: -12.76822566986084
    5. '_stack' → logprob: -12.89322566986084
    6. ' stack' → logprob: -13.14322566986084
    7. 'stack' → logprob: -13.14322566986084
    8. ')' → logprob: -13.26822566986084
    9. ' ' → logprob: -13.51822566986084
    10. '.' → logprob: -13.64322566986084

Token 33: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.25195130705833435
    2. ' stack' → logprob: -1.5019513368606567
    3. '	stack' → logprob: -11.001951217651367
    4. '(stack' → logprob: -13.126951217651367
    5. '.stack' → logprob: -13.501951217651367
    6. ' ' → logprob: -13.626951217651367
    7. 'space' → logprob: -15.626951217651367
    8. '_stack' → logprob: -15.751951217651367
    9. '```' → logprob: -15.876951217651367
    10. 'stackoverflow' → logprob: -16.001951217651367

Token 34: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -5.319370302458992e-06
    2. 'pop' → logprob: -12.250005722045898
    3. '.' → logprob: -14.875005722045898
    4. '-pop' → logprob: -16.8750057220459
    5. ' pop' → logprob: -19.5000057220459
    6. ' .' → logprob: -19.6250057220459
    7. '.Pop' → logprob: -19.7500057220459
    8. '_pop' → logprob: -20.0000057220459
    9. '	pop' → logprob: -20.1250057220459
    10. 'Pop' → logprob: -20.2500057220459

Token 35: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -5.319370302458992e-06
    2. '(' → logprob: -13.500005722045898
    3. '()
' → logprob: -13.625005722045898
    4. '()>' → logprob: -14.375005722045898
    5. '())' → logprob: -14.875005722045898
    6. '()]' → logprob: -15.125005722045898
    7. '()

' → logprob: -15.125005722045898
    8. '()<' → logprob: -15.375005722045898
    9. ' ()' → logprob: -15.625005722045898
    10. '()`' → logprob: -16.0000057220459

Token 36: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4852507412433624
    2. '  
' → logprob: -1.23525071144104
    3. ' 
' → logprob: -2.48525071144104
    4. '  ' → logprob: -6.235250949859619
    5. '
' → logprob: -6.235250949859619
    6. '   
' → logprob: -6.360250949859619
    7. '<|end|>' → logprob: -7.110250949859619
    8. ' 

' → logprob: -7.610250949859619
    9. '     
' → logprob: -7.610250949859619
    10. '\' → logprob: -7.735250949859619

Token 37: ' a' (ID: 261)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.002412873087450862
    2. ' a' → logprob: -6.377412796020508
    3. ' 
' → logprob: -8.752412796020508
    4. '  ' → logprob: -8.877412796020508
    5. ' A' → logprob: -9.002412796020508
    6. ' ' → logprob: -9.502412796020508
    7. '  
' → logprob: -10.252412796020508
    8. ' 

' → logprob: -10.752412796020508
    9. ' space' → logprob: -11.127412796020508
    10. ''' → logprob: -11.252412796020508

Token 38: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016037650406360626
    2. '=' → logprob: -4.141037464141846
    3. ' ' → logprob: -12.891037940979004
    4. '<|end|>' → logprob: -15.016037940979004
    5. ' =
' → logprob: -15.516037940979004
    6. ')' → logprob: -15.891037940979004
    7. ',' → logprob: -17.141036987304688
    8. '  ' → logprob: -17.391036987304688
    9. ' ' → logprob: -17.391036987304688
    10. ' =)' → logprob: -17.641036987304688

Token 39: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.11287874728441238
    2. ' stack' → logprob: -2.2378787994384766
    3. '	stack' → logprob: -10.737878799438477
    4. '(stack' → logprob: -10.987878799438477
    5. '.stack' → logprob: -11.612878799438477
    6. ' ' → logprob: -12.362878799438477
    7. '<|end|>' → logprob: -13.237878799438477
    8. 'stackoverflow' → logprob: -13.862878799438477
    9. '_stack' → logprob: -13.987878799438477
    10. 'Stack' → logprob: -15.612878799438477

Token 40: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -2.7968066206085496e-05
    2. 'pop' → logprob: -10.625027656555176
    3. '.' → logprob: -12.750027656555176
    4. '.append' → logprob: -14.250027656555176
    5. '	pop' → logprob: -17.750028610229492
    6. ' .' → logprob: -18.125028610229492
    7. ' pop' → logprob: -18.875028610229492
    8. '[-' → logprob: -19.000028610229492
    9. '_pop' → logprob: -19.625028610229492
    10. ' ' → logprob: -19.875028610229492

Token 41: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -4.668304245569743e-05
    2. '(' → logprob: -11.500046730041504
    3. '().' → logprob: -11.625046730041504
    4. '()`' → logprob: -11.750046730041504
    5. ' ()' → logprob: -12.250046730041504
    6. '()[' → logprob: -12.375046730041504
    7. '()]' → logprob: -13.000046730041504
    8. '()<' → logprob: -13.125046730041504
    9. '()

' → logprob: -13.875046730041504
    10. '()>' → logprob: -14.125046730041504

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022458862513303757
    2. '  
' → logprob: -4.647459030151367
    3. '    
' → logprob: -5.647459030151367
    4. '<|end|>' → logprob: -5.897459030151367
    5. '
' → logprob: -6.022459030151367
    6. ' 
' → logprob: -6.772459030151367
    7. ' ' → logprob: -6.897459030151367
    8. ' if' → logprob: -7.772459030151367
    9. '    ' → logprob: -7.772459030151367
    10. '  ' → logprob: -8.272459030151367

Token 43: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04315025359392166
    2. '    ' → logprob: -3.9181501865386963
    3. ' if' → logprob: -4.043150424957275
    4. '+' → logprob: -6.168150424957275
    5. ' ' → logprob: -6.918150424957275
    6. 'if' (adapté à ' if') → logprob: -7.043150424957275
    7. '  ' → logprob: -8.293149948120117
    8. '    
' → logprob: -8.418149948120117
    9. '     
' → logprob: -9.793149948120117
    10. ' operator' → logprob: -10.293149948120117

Token 44: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.010603474453091621
    2. ' ' → logprob: -4.635603427886963
    3. 'str' → logprob: -7.135603427886963
    4. ' s' → logprob: -11.135603904724121
    5. '  ' → logprob: -11.510603904724121
    6. ' ' → logprob: -11.510603904724121
    7. '	str' → logprob: -12.135603904724121
    8. 's' → logprob: -12.635603904724121
    9. '_str' → logprob: -13.260603904724121
    10. '<|end|>' → logprob: -13.760603904724121

Token 45: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.008971321396529675
    2. '==' → logprob: -4.758971214294434
    3. '[' → logprob: -8.758971214294434
    4. ' ===' → logprob: -9.758971214294434
    5. ' =' → logprob: -10.133971214294434
    6. ' ' → logprob: -10.508971214294434
    7. '  ' → logprob: -11.133971214294434
    8. 'space' → logprob: -11.508971214294434
    9. ' =="' → logprob: -12.008971214294434
    10. '"' → logprob: -12.258971214294434

Token 46: ' '+' (ID: 30120)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.96497642993927
    2. '"+"' → logprob: -0.96497642993927
    3. ''' → logprob: -1.46497642993927
    4. ' '+'' → logprob: -6.2149763107299805
    5. '"+' → logprob: -6.5899763107299805
    6. ' "' → logprob: -6.7149763107299805
    7. ' "+"' → logprob: -6.8399763107299805
    8. ''+' → logprob: -7.3399763107299805
    9. '+' → logprob: -8.21497631072998
    10. ' '' → logprob: -8.46497631072998

Token 47: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02005688101053238
    2. ':
' → logprob: -4.02005672454834
    3. ' :' → logprob: -6.89505672454834
    4. ' :
' → logprob: -7.89505672454834
    5. '   ' → logprob: -8.39505672454834
    6. '):' → logprob: -9.14505672454834
    7. ' ' → logprob: -9.39505672454834
    8. '  ' → logprob: -11.02005672454834
    9. '':' → logprob: -11.02005672454834
    10. '):
' → logprob: -11.27005672454834

Token 48: '     ' (ID: 530)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2931380867958069
    2. '    ' → logprob: -2.543138027191162
    3. ' stack' → logprob: -3.168138027191162
    4. '       ' → logprob: -3.293138027191162
    5. '<|end|>' → logprob: -3.668138027191162
    6. '     ' → logprob: -4.043138027191162
    7. ' ' → logprob: -4.418138027191162
    8. 'stack' → logprob: -4.543138027191162
    9. '	stack' → logprob: -4.668138027191162
    10. '(stack' → logprob: -4.918138027191162

Token 49: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.09093156456947327
    2. ' stack' → logprob: -2.4659316539764404
    3. '   ' → logprob: -6.715931415557861
    4. '	stack' → logprob: -8.09093189239502
    5. '    ' → logprob: -8.84093189239502
    6. '     ' → logprob: -8.96593189239502
    7. '(stack' → logprob: -9.71593189239502
    8. ' ' → logprob: -10.09093189239502
    9. '.stack' → logprob: -10.21593189239502
    10. '_stack' → logprob: -10.84093189239502

Token 50: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00017386233957950026
    2. '.' → logprob: -8.750173568725586
    3. '.pop' → logprob: -11.375173568725586
    4. '.app' → logprob: -13.125173568725586
    5. '.ap' → logprob: -14.750173568725586
    6. 'append' → logprob: -14.750173568725586
    7. '.push' → logprob: -14.875173568725586
    8. '.extend' → logprob: -15.250173568725586
    9. ' .' → logprob: -15.500173568725586
    10. ' ' → logprob: -16.000173568725586

Token 51: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -1.5094070477061905e-05
    2. '(' → logprob: -11.125015258789062
    3. 'a' → logprob: -15.000015258789062
    4. '((' → logprob: -17.750015258789062
    5. ' (' → logprob: -19.500015258789062
    6. ' ' → logprob: -19.625015258789062
    7. '(A' → logprob: -20.000015258789062
    8. '(
' → logprob: -20.250015258789062
    9. ' a' → logprob: -20.875015258789062
    10. '(int' → logprob: -22.250015258789062

Token 52: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.03326006606221199
    2. '+' → logprob: -3.5332601070404053
    3. '+b' → logprob: -5.658259868621826
    4. ' ' → logprob: -11.283260345458984
    5. '+B' → logprob: -14.283260345458984
    6. '+a' → logprob: -14.533260345458984
    7. ' ' → logprob: -14.658260345458984
    8. ' plus' → logprob: -14.783260345458984
    9. '+c' → logprob: -16.658260345458984
    10. '＋' → logprob: -16.783260345458984

Token 53: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.011048054322600365
    2. ' b' → logprob: -4.511047840118408
    3. ' ' → logprob: -15.511048316955566
    4. '	b' → logprob: -19.51104736328125
    5. ')b' → logprob: -20.26104736328125
    6. '<|end|>' → logprob: -21.01104736328125
    7. '  ' → logprob: -21.51104736328125
    8. '   ' → logprob: -21.76104736328125
    9. ')' → logprob: -22.51104736328125
    10. ' б' → logprob: -22.63604736328125

Token 54: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011089201085269451
    2. ')
' → logprob: -4.511089324951172
    3. ')
' → logprob: -10.886089324951172
    4. '   ' → logprob: -11.011089324951172
    5. ' )' → logprob: -12.761089324951172
    6. ' ' → logprob: -13.261089324951172
    7. ')

' → logprob: -14.511089324951172
    8. '')' → logprob: -14.761089324951172
    9. ' )
' → logprob: -15.761089324951172
    10. '）' → logprob: -16.386089324951172

Token 55: '   ' (ID: 271)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.5532724261283875
    2. '\n' → logprob: -1.6782724857330322
    3. '<|end|>' → logprob: -1.8032724857330322
    4. ' elif' → logprob: -3.8032724857330322
    5. '  
' → logprob: -3.9282724857330322
    6. '   ' → logprob: -4.428272247314453
    7. '```' → logprob: -5.678272247314453
    8. '
' → logprob: -5.678272247314453
    9. '	elif' → logprob: -6.053272247314453
    10. '\r' → logprob: -6.053272247314453

Token 56: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.08333143591880798
    2. ' elif' → logprob: -2.958331346511841
    3. '   ' → logprob: -4.08333158493042
    4. ' ' → logprob: -5.58333158493042
    5. '\n' → logprob: -5.95833158493042
    6. '<|end|>' → logprob: -6.33333158493042
    7. '	elif' → logprob: -6.95833158493042
    8. '  
' → logprob: -8.083331108093262
    9. '  ' → logprob: -8.208331108093262
    10. '
' → logprob: -8.208331108093262

Token 57: ' str' (ID: 989)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3045806288719177
    2. ' ' → logprob: -2.0545806884765625
    3. ' str' → logprob: -2.5545806884765625
    4. ' '' → logprob: -3.5545806884765625
    5. 'str' → logprob: -3.6795806884765625
    6. ''s' → logprob: -7.1795806884765625
    7. ''-' → logprob: -7.3045806884765625
    8. '"' → logprob: -7.6795806884765625
    9. '  ' → logprob: -8.054580688476562
    10. '-' → logprob: -9.304580688476562

Token 58: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.014219686388969421
    2. '==' → logprob: -4.264219760894775
    3. '=='' → logprob: -11.139219284057617
    4. ' -' → logprob: -11.264219284057617
    5. ' ' → logprob: -11.764219284057617
    6. '-' → logprob: -12.139219284057617
    7. '=' → logprob: -12.889219284057617
    8. '*' → logprob: -13.014219284057617
    9. ' =' → logprob: -13.264219284057617
    10. ' =='' → logprob: -13.264219284057617

Token 59: ' '-' (ID: 17489)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''-' → logprob: -0.01378627959638834
    2. ''*' → logprob: -4.513786315917969
    3. ' '-'' → logprob: -6.263786315917969
    4. ''' → logprob: -7.263786315917969
    5. ' '*'' → logprob: -10.388786315917969
    6. '"-' → logprob: -10.513786315917969
    7. '-' → logprob: -10.513786315917969
    8. ' '-' → logprob: -11.013786315917969
    9. ' ' → logprob: -11.263786315917969
    10. '"' → logprob: -12.638786315917969

Token 60: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013231287710368633
    2. ' :' → logprob: -5.01323127746582
    3. ':
' → logprob: -5.63823127746582
    4. '     ' → logprob: -6.38823127746582
    5. ' :
' → logprob: -7.76323127746582
    6. '):' → logprob: -8.13823127746582
    7. ' ' → logprob: -8.76323127746582
    8. '<|end|>' → logprob: -9.13823127746582
    9. '   ' → logprob: -9.63823127746582
    10. ')' → logprob: -10.63823127746582

Token 61: '     ' (ID: 530)
  Prédit: '     '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '     ' → logprob: -0.00026407750556245446
    2. '   ' → logprob: -9.250264167785645
    3. '    ' → logprob: -9.500264167785645
    4. ' ' → logprob: -10.750264167785645
    5. ' stack' → logprob: -10.750264167785645
    6. 'stack' → logprob: -10.875264167785645
    7. '       ' → logprob: -11.500264167785645
    8. '      ' → logprob: -11.875264167785645
    9. ':' → logprob: -12.500264167785645
    10. '      
' → logprob: -13.125264167785645

Token 62: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.6939839124679565
    2. 'stack' (adapté à ' stack') → logprob: -0.6939839124679565
    3. '     ' → logprob: -7.818984031677246
    4. ' ' → logprob: -8.568984031677246
    5. '   ' → logprob: -9.193984031677246
    6. '	stack' → logprob: -9.443984031677246
    7. '       ' → logprob: -10.943984031677246
    8. '    ' → logprob: -11.193984031677246
    9. '(stack' → logprob: -11.443984031677246
    10. '.stack' → logprob: -11.693984031677246

Token 63: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0013452349230647087
    2. '.' → logprob: -6.626345157623291
    3. 'append' → logprob: -11.00134563446045
    4. ' .' → logprob: -13.62634563446045
    5. ' ' → logprob: -14.75134563446045
    6. '	append' → logprob: -15.37634563446045
    7. '   ' → logprob: -15.50134563446045
    8. '.push' → logprob: -15.87634563446045
    9. ').' → logprob: -16.251344680786133
    10. '.extend' → logprob: -16.376344680786133

Token 64: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0001398929744027555
    2. '(' → logprob: -8.875140190124512
    3. '((' → logprob: -18.750139236450195
    4. 'a' → logprob: -19.000139236450195
    5. '(A' → logprob: -19.500139236450195
    6. ' (' → logprob: -19.625139236450195
    7. ' ' → logprob: -20.750139236450195
    8. '(
' → logprob: -21.000139236450195
    9. '(ab' → logprob: -21.375139236450195
    10. '(an' → logprob: -21.750139236450195

Token 65: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.0015175960725173354
    2. '-' → logprob: -6.5015177726745605
    3. ' ' → logprob: -11.126517295837402
    4. ')' → logprob: -15.126517295837402
    5. ' ' → logprob: -15.251517295837402
    6. '-b' → logprob: -17.12651824951172
    7. ' minus' → logprob: -18.12651824951172
    8. '_' → logprob: -18.62651824951172
    9. ' −' → logprob: -19.56401824951172
    10. '<|end|>' → logprob: -19.56401824951172

Token 66: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.25193390250205994
    2. 'b' → logprob: -1.5019339323043823
    3. ' ' → logprob: -12.251934051513672
    4. 's' → logprob: -17.001934051513672
    5. ')' → logprob: -18.251934051513672
    6. '	b' → logprob: -18.626934051513672
    7. ' ' → logprob: -19.001934051513672
    8. ')b' → logprob: -19.126934051513672
    9. ' б' → logprob: -19.251934051513672
    10. '<|end|>' → logprob: -20.376934051513672

Token 67: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0025181116070598364
    2. ')
' → logprob: -6.002518177032471
    3. ' )' → logprob: -10.252517700195312
    4. ')
' → logprob: -12.627517700195312
    5. ' ' → logprob: -13.377517700195312
    6. '   ' → logprob: -14.127517700195312
    7. '')' → logprob: -14.252517700195312
    8. ' )
' → logprob: -14.377517700195312
    9. '")' → logprob: -16.127517700195312
    10. '）' → logprob: -16.502517700195312

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013946419348940253
    2. 'elif' → logprob: -7.251394748687744
    3. ' elif' → logprob: -7.501394748687744
    4. '	elif' → logprob: -9.751394271850586
    5. '<|end|>' → logprob: -10.001394271850586
    6. '```' → logprob: -11.001394271850586
    7. ' ' → logprob: -12.001394271850586
    8. '<|end|>' → logprob: -13.751394271850586
    9. '   ' → logprob: -13.876394271850586
    10. ')' → logprob: -13.876394271850586

Token 69: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.5811712741851807
    2. '   ' → logprob: -1.4561712741851807
    3. ' elif' → logprob: -1.5811712741851807
    4. '	elif' → logprob: -6.831171035766602
    5. ' ' → logprob: -7.581171035766602
    6. 'else' → logprob: -8.831171035766602
    7. ' else' → logprob: -9.706171035766602
    8. '*' → logprob: -9.831171035766602
    9. ')' → logprob: -11.331171035766602
    10. '<|end|>' → logprob: -11.581171035766602

Token 70: ' str' (ID: 989)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.005017309449613094
    2. ' '' → logprob: -6.130017280578613
    3. ' ' → logprob: -6.630017280578613
    4. ''*' → logprob: -6.630017280578613
    5. ''s' → logprob: -9.630017280578613
    6. '"' → logprob: -10.130017280578613
    7. 'str' → logprob: -11.130017280578613
    8. '  ' → logprob: -11.380017280578613
    9. ' '*'' → logprob: -11.505017280578613
    10. ''b' → logprob: -11.630017280578613

Token 71: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0038190761115401983
    2. '==' → logprob: -5.628818988800049
    3. '=='' → logprob: -9.253819465637207
    4. ' ' → logprob: -10.003819465637207
    5. ' '' → logprob: -10.753819465637207
    6. ' ===' → logprob: -11.753819465637207
    7. ''' → logprob: -12.003819465637207
    8. ' '*'' → logprob: -12.003819465637207
    9. ' =='' → logprob: -12.128819465637207
    10. '  ' → logprob: -12.503819465637207

Token 72: ' '*' (ID: 34958)
  Prédit: ''*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''*' → logprob: -0.0005176475970074534
    2. ' '*'' → logprob: -8.125517845153809
    3. ''' → logprob: -9.375517845153809
    4. ' '*' → logprob: -9.625517845153809
    5. '"*' → logprob: -9.875517845153809
    6. '*' → logprob: -11.375517845153809
    7. ' ' → logprob: -12.625517845153809
    8. '('*' → logprob: -13.250517845153809
    9. '"' → logprob: -13.250517845153809
    10. '`' → logprob: -15.250517845153809

Token 73: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2970332205295563
    2. ':
' → logprob: -2.4220333099365234
    3. '   ' → logprob: -3.2970333099365234
    4. ')' → logprob: -3.4220333099365234
    5. '):' → logprob: -3.5470333099365234
    6. '):
' → logprob: -3.7970333099365234
    7. ' ' → logprob: -4.047033309936523
    8. '')' → logprob: -4.422033309936523
    9. '     ' → logprob: -5.297033309936523
    10. ''):
' → logprob: -5.547033309936523

Token 74: '     ' (ID: 530)
  Prédit: '     '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '     ' → logprob: -0.05128409340977669
    2. 'stack' → logprob: -3.426284074783325
    3. '   ' → logprob: -4.301284313201904
    4. ' ' → logprob: -6.051284313201904
    5. ' stack' → logprob: -7.176284313201904
    6. '       ' → logprob: -8.426283836364746
    7. '    ' → logprob: -8.676283836364746
    8. '(stack' → logprob: -8.926283836364746
    9. '      
' → logprob: -9.926283836364746
    10. '	stack' → logprob: -10.051283836364746

Token 75: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.0068465652875602245
    2. ' stack' → logprob: -5.0068464279174805
    3. ' ' → logprob: -9.38184642791748
    4. '(stack' → logprob: -10.25684642791748
    5. '   ' → logprob: -12.25684642791748
    6. '	stack' → logprob: -12.88184642791748
    7. '.stack' → logprob: -13.50684642791748
    8. '     ' → logprob: -13.75684642791748
    9. '_stack' → logprob: -14.75684642791748
    10. '  ' → logprob: -15.00684642791748

Token 76: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0015902003506198525
    2. '.' → logprob: -6.501590251922607
    3. '.app' → logprob: -10.12658977508545
    4. '.Append' → logprob: -11.00158977508545
    5. 'append' → logprob: -11.50158977508545
    6. '.pop' → logprob: -12.00158977508545
    7. '.extend' → logprob: -12.25158977508545
    8. ' .' → logprob: -12.75158977508545
    9. '<|end|>' → logprob: -13.12658977508545
    10. '_append' → logprob: -13.75158977508545

Token 77: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0024763736873865128
    2. '(' → logprob: -6.002476215362549
    3. '('' → logprob: -15.752476692199707
    4. '(A' → logprob: -15.877476692199707
    5. '(ab' → logprob: -16.12747573852539
    6. '(
' → logprob: -16.25247573852539
    7. ' (' → logprob: -16.62747573852539
    8. '((' → logprob: -17.50247573852539
    9. '("("' → logprob: -17.87747573852539
    10. '(abs' → logprob: -18.00247573852539

Token 78: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.6556292176246643
    2. '*' → logprob: -0.9056292176246643
    3. ')' → logprob: -2.7806291580200195
    4. '*b' → logprob: -4.5306291580200195
    5. ' ' → logprob: -6.2806291580200195
    6. '<|end|>' → logprob: -6.4056291580200195
    7. ' ' → logprob: -9.03062915802002
    8. '*)' → logprob: -9.90562915802002
    9. '<|end|>' → logprob: -10.65562915802002
    10. ' )' → logprob: -11.40562915802002

Token 79: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02975071594119072
    2. ' b' → logprob: -3.5297508239746094
    3. ' ' → logprob: -15.77975082397461
    4. '	b' → logprob: -16.40475082397461
    5. ')b' → logprob: -18.77975082397461
    6. ' б' → logprob: -20.65475082397461
    7. '<|end|>' → logprob: -21.27975082397461
    8. '  ' → logprob: -21.40475082397461
    9. '(b' → logprob: -21.65475082397461
    10. 's' → logprob: -22.27975082397461

Token 80: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00022117885237094015
    2. '   ' → logprob: -9.375221252441406
    3. ')
' → logprob: -10.375221252441406
    4. '')' → logprob: -10.500221252441406
    5. ' ' → logprob: -10.625221252441406
    6. ' )' → logprob: -10.875221252441406
    7. 'elif' → logprob: -11.000221252441406
    8. '}' → logprob: -12.750221252441406
    9. ' elif' → logprob: -12.750221252441406
    10. '**' → logprob: -12.875221252441406

Token 81: 'print' (ID: 1598)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08198630809783936
    2. 'elif' → logprob: -2.706986427307129
    3. ' elif' → logprob: -4.581986427307129
    4. ' ' → logprob: -7.581986427307129
    5. '<|end|>' → logprob: -7.581986427307129
    6. '	elif' → logprob: -7.831986427307129
    7. '  ' → logprob: -8.831986427307129
    8. 'else' → logprob: -9.456986427307129
    9. ' else' → logprob: -10.081986427307129
    10. '<|end|>' → logprob: -10.956986427307129

Token 82: '(stack' (ID: 52691)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10023298859596252
    2. '(stack' → logprob: -2.3502330780029297
    3. '("("' → logprob: -10.85023307800293
    4. '('' → logprob: -12.85023307800293
    5. '(Stack' → logprob: -13.47523307800293
    6. '(
' → logprob: -14.60023307800293
    7. 'stack' → logprob: -14.85023307800293
    8. '(`' → logprob: -14.97523307800293
    9. '(len' → logprob: -15.35023307800293
    10. '((' → logprob: -15.35023307800293

Token 83: '.pop' (ID: 15746)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.25624963641166687
    2. '.pop' → logprob: -1.5062496662139893
    3. ')' → logprob: -5.63124942779541
    4. '[-' → logprob: -7.25624942779541
    5. 'pop' → logprob: -10.88124942779541
    6. 'Pop' → logprob: -13.88124942779541
    7. '.' → logprob: -14.75624942779541
    8. ' pop' → logprob: -15.00624942779541
    9. '.Pop' → logprob: -15.50624942779541
    10. '[]' → logprob: -16.256250381469727

Token 84: '())' (ID: 3516)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06209686025977135
    2. '())' → logprob: -2.8120968341827393
    3. ')' → logprob: -9.06209659576416
    4. '(' → logprob: -11.56209659576416
    5. '()
' → logprob: -13.93709659576416
    6. '();)' → logprob: -13.93709659576416
    7. '()]' → logprob: -14.68709659576416
    8. ' ())' → logprob: -15.06209659576416
    9. '().' → logprob: -15.31209659576416
    10. '()`' → logprob: -15.68709659576416


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 82
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 66
Précision stricte (1ère position): 42.68%
Précision adaptée (1ère position): 47.56%
Précision (top 10): 80.49%
================================================================================
