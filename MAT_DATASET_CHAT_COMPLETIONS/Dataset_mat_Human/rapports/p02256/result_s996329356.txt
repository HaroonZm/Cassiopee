================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:58
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from enum import Enum
import sys
import math
 
BIG_NUM = 2000000000
MOD = 1000000007
EPS = 0.000000001
 
 
def calc_gcd(a,b):
    if a < b:
        a,b = b,a
    if b == 0:
        return a
    return calc_gcd(b,a%b)
 
 
A,B = map(int,input().split())
print("%d"%(calc_gcd(A,B)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' enum' (ID: 15238)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' Enum' (ID: 35827)
  Prédit: ' Enum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Enum' → logprob: -0.2014382779598236
    2. 'Enum' → logprob: -1.701438307762146
    3. ' Int' → logprob: -11.451437950134277
    4. 'Int' → logprob: -11.826437950134277
    5. '.Enum' → logprob: -12.201437950134277
    6. '(Enum' → logprob: -13.451437950134277
    7. 'enum' → logprob: -14.576437950134277
    8. '_enum' → logprob: -16.201438903808594
    9. '`' → logprob: -17.076438903808594
    10. ' enum' → logprob: -17.076438903808594

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3195054531097412
    2. '\n' → logprob: -2.569505453109741
    3. '
' → logprob: -2.819505453109741
    4. '\' → logprob: -3.069505453109741
    5. '```' → logprob: -3.319505453109741
    6. '[' → logprob: -3.694505453109741
    7. 'newline' → logprob: -5.44450569152832
    8. '' → logprob: -5.69450569152832
    9. '\[' → logprob: -5.69450569152832
    10. '\(' → logprob: -5.81950569152832

Token 5: 'import' (ID: 561)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08036922663450241
    2. '```' → logprob: -3.455369234085083
    3. 'class' → logprob: -4.080368995666504
    4. '\n' → logprob: -4.205368995666504
    5. '' → logprob: -4.955368995666504
    6. '\' → logprob: -6.455368995666504
    7. '`' → logprob: -6.580368995666504
    8. '(' → logprob: -7.830368995666504
    9. '

' → logprob: -7.830368995666504
    10. '[
' → logprob: -7.955368995666504

Token 6: ' sys' (ID: 12228)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.049048300832509995
    2. ' sys' → logprob: -3.0490481853485107
    3. ' json' → logprob: -8.67404842376709
    4. ' re' → logprob: -9.29904842376709
    5. ' requests' → logprob: -9.79904842376709
    6. 'os' → logprob: -10.17404842376709
    7. ' typing' → logprob: -10.17404842376709
    8. ' math' → logprob: -11.29904842376709
    9. ' pathlib' → logprob: -11.79904842376709
    10. ' datetime' → logprob: -11.92404842376709

Token 7: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4542042315006256
    2. '

' → logprob: -1.5792042016983032
    3. '\n' → logprob: -2.7042043209075928
    4. '.' → logprob: -3.0792043209075928
    5. '\' → logprob: -3.9542043209075928
    6. '```' → logprob: -4.329204082489014
    7. '' → logprob: -5.579204082489014
    8. ',' → logprob: -6.329204082489014
    9. '<|end|>' → logprob: -6.454204082489014
    10. '.
' → logprob: -7.204204082489014

Token 8: 'import' (ID: 561)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1664322316646576
    2. '```' → logprob: -3.0414321422576904
    3. '

' → logprob: -3.0414321422576904
    4. '\n' → logprob: -3.1664321422576904
    5. '\' → logprob: -5.0414323806762695
    6. 'class' → logprob: -5.9164323806762695
    7. '.' → logprob: -6.4164323806762695
    8. '' → logprob: -7.1664323806762695
    9. '`' → logprob: -7.2914323806762695
    10. '<|end|>' → logprob: -7.4164323806762695

Token 9: ' math' (ID: 13324)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.0019374389667063951
    2. 'os' → logprob: -6.251937389373779
    3. ' typing' → logprob: -12.751937866210938
    4. ' argparse' → logprob: -12.876937866210938
    5. ' pathlib' → logprob: -13.751937866210938
    6. ' io' → logprob: -13.876937866210938
    7. ' re' → logprob: -14.501937866210938
    8. '"os' → logprob: -15.501937866210938
    9. ' traceback' → logprob: -15.876937866210938
    10. ' getopt' → logprob: -16.001937866210938

Token 10: '
 
' (ID: 47812)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.0737488269805908
    2. '
' → logprob: -1.4487488269805908
    3. '\n' → logprob: -1.4487488269805908
    4. '

' → logprob: -2.573748826980591
    5. '<|end|>' → logprob: -2.823748826980591
    6. '\' → logprob: -3.823748826980591
    7. 'class' → logprob: -4.323748588562012
    8. 'import' → logprob: -5.573748588562012
    9. '' → logprob: -5.698748588562012
    10. '<|end|>' → logprob: -6.198748588562012

Token 11: 'BIG' (ID: 118898)
  Prédit: 'class'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'class' → logprob: -0.016474649310112
    2. '#' → logprob: -4.766474723815918
    3. '```' → logprob: -5.516474723815918
    4. '
' → logprob: -7.141474723815918
    5. ' class' → logprob: -7.641474723815918
    6. '\' → logprob: -7.766474723815918
    7. '\n' → logprob: -7.891474723815918
    8. '`' → logprob: -7.891474723815918
    9. '' → logprob: -8.641474723815918
    10. ' 
' → logprob: -8.641474723815918

Token 12: '_NUM' (ID: 20468)
  Prédit: '_NUMBER'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_NUMBER' → logprob: -0.7039276361465454
    2. '_' → logprob: -1.5789276361465454
    3. 'INT' → logprob: -1.9539276361465454
    4. '_INT' → logprob: -3.203927516937256
    5. 'GEST' → logprob: -3.453927516937256
    6. '_INTEGER' → logprob: -4.078927516937256
    7. ' ' → logprob: -4.578927516937256
    8. '_WORD' → logprob: -4.828927516937256
    9. '_ENDIAN' → logprob: -5.078927516937256
    10. ' =' → logprob: -5.203927516937256

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.26780223846435547
    2. '=' → logprob: -1.5178022384643555
    3. '_' → logprob: -4.8928022384643555
    4. 'S' → logprob: -5.2678022384643555
    5. ' ' → logprob: -6.6428022384643555
    6. ')' → logprob: -7.2678022384643555
    7. '  ' → logprob: -8.642802238464355
    8. 's' → logprob: -8.767802238464355
    9. '   ' → logprob: -8.767802238464355
    10. ',' → logprob: -9.642802238464355

Token 14: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006721536163240671
    2. '10' → logprob: -5.131721496582031
    3. '1' → logprob: -7.881721496582031
    4. '100' → logprob: -8.506721496582031
    5. ' float' → logprob: -8.881721496582031
    6. 'float' → logprob: -10.256721496582031
    7. ' math' → logprob: -11.631721496582031
    8. 'int' → logprob: -11.756721496582031
    9. '999' → logprob: -11.881721496582031
    10. ' int' → logprob: -11.881721496582031

Token 15: '200' (ID: 1179)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.47986292839050293
    2. '100' → logprob: -1.729862928390503
    3. '1' → logprob: -1.979862928390503
    4. ' ' → logprob: -3.354862928390503
    5. '999' → logprob: -3.729862928390503
    6. 'float' → logprob: -5.604863166809082
    7. 'int' → logprob: -6.354863166809082
    8. 'math' → logprob: -7.979863166809082
    9. '123' → logprob: -8.354863166809082
    10. ' float' → logprob: -8.854863166809082

Token 16: '000' (ID: 1302)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012048760429024696
    2. '000' → logprob: -4.637048721313477
    3. '_' → logprob: -6.887048721313477
    4. '00' → logprob: -7.137048721313477
    5. '\' → logprob: -8.887048721313477
    6. '+' → logprob: -9.387048721313477
    7. ' ' → logprob: -10.387048721313477
    8. '\n' → logprob: -10.512048721313477
    9. ' 
' → logprob: -10.637048721313477
    10. '' → logprob: -10.762048721313477

Token 17: '000' (ID: 1302)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.31362611055374146
    2. '
' → logprob: -2.1886260509490967
    3. '000' → logprob: -2.5636260509490967
    4. '\n' → logprob: -4.063626289367676
    5. '_' → logprob: -4.188626289367676
    6. '\' → logprob: -4.313626289367676
    7. ' 
' → logprob: -4.563626289367676
    8. '_
' → logprob: -5.188626289367676
    9. '' → logprob: -5.563626289367676
    10. '

' → logprob: -6.438626289367676

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.16798245906829834
    2. '\' → logprob: -2.792982578277588
    3. '_' → logprob: -3.542982578277588
    4. '\n' → logprob: -4.417982578277588
    5. '000' → logprob: -4.542982578277588
    6. '+' → logprob: -4.542982578277588
    7. '*' → logprob: -5.167982578277588
    8. ' 
' → logprob: -5.917982578277588
    9. '
' → logprob: -5.917982578277588
    10. '' → logprob: -5.917982578277588

Token 19: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37358567118644714
    2. ' 
' → logprob: -1.8735857009887695
    3. '#' → logprob: -3.6235857009887695
    4. ' 

' → logprob: -3.7485857009887695
    5. '

' → logprob: -3.7485857009887695
    6. '\' → logprob: -3.8735857009887695
    7. ' ' → logprob: -4.4985857009887695
    8. '\n' → logprob: -4.7485857009887695
    9. '' → logprob: -4.9985857009887695
    10. ' 
 
' → logprob: -4.9985857009887695

Token 20: 'MOD' (ID: 52135)
  Prédit: 'class'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'class' → logprob: -0.7116663455963135
    2. '
' → logprob: -0.9616663455963135
    3. ' 
' → logprob: -2.9616663455963135
    4. ' class' → logprob: -3.3366663455963135
    5. '

' → logprob: -4.461666107177734
    6. ' 

' → logprob: -4.711666107177734
    7. '#' → logprob: -4.961666107177734
    8. ' ' → logprob: -5.961666107177734
    9. ' 
 
' → logprob: -6.336666107177734
    10. '
 
' → logprob: -6.461666107177734

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05450938269495964
    2. '_' → logprob: -3.554509401321411
    3. '=' → logprob: -3.804509401321411
    4. ' ' → logprob: -6.179509162902832
    5. ' _' → logprob: -9.554509162902832
    6. '  ' → logprob: -11.304509162902832
    7. '_=' → logprob: -11.679509162902832
    8. '_SPACE' → logprob: -11.929509162902832
    9. ',' → logprob: -13.054509162902832
    10. ')' → logprob: -13.179509162902832

Token 22: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.008066260255873203
    2. '100' → logprob: -5.008066177368164
    3. '10' → logprob: -6.633066177368164
    4. ' (' → logprob: -11.383066177368164
    5. '200' → logprob: -11.633066177368164
    6. '1' → logprob: -11.883066177368164
    7. '(' → logprob: -13.508066177368164
    8. '2' → logprob: -13.758066177368164
    9. ' ' → logprob: -13.758066177368164
    10. '32' → logprob: -14.258066177368164

Token 23: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.012227187864482403
    2. '10' → logprob: -4.7622270584106445
    3. ' ' → logprob: -5.6372270584106445
    4. '998' → logprob: -10.637227058410645
    5. '1' → logprob: -11.137227058410645
    6. '(' → logprob: -13.512227058410645
    7. '200' → logprob: -14.262227058410645
    8. '2' → logprob: -14.387227058410645
    9. 'int' → logprob: -15.012227058410645
    10. ' (' → logprob: -15.137227058410645

Token 24: '000' (ID: 1302)
  Prédit: '000'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.021061811596155167
    2. '0' → logprob: -4.771061897277832
    3. '00' → logprob: -5.021061897277832
    4. '9' → logprob: -5.521061897277832
    5. '%' → logprob: -7.521061897277832
    6. '\' → logprob: -7.646061897277832
    7. '\n' → logprob: -8.271061897277832
    8. ')' → logprob: -9.021061897277832
    9. '```' → logprob: -9.021061897277832
    10. '*' → logprob: -9.896061897277832

Token 25: '000' (ID: 1302)
  Prédit: '000'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.44097062945365906
    2. '0' → logprob: -1.0659706592559814
    3. '00' → logprob: -4.940970420837402
    4. '+' → logprob: -5.565970420837402
    5. '9' → logprob: -8.565970420837402
    6. '7' → logprob: -8.565970420837402
    7. '```' → logprob: -8.565970420837402
    8. '\n' → logprob: -8.815970420837402
    9. ')' → logprob: -9.190970420837402
    10. ' ' → logprob: -9.690970420837402

Token 26: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -6.392202976712724e-06
    2. '9' → logprob: -12.500006675720215
    3. '+' → logprob: -13.500006675720215
    4. '07' → logprob: -14.750006675720215
    5. '0' → logprob: -15.000006675720215
    6. '```' → logprob: -15.125006675720215
    7. ' ' → logprob: -15.500006675720215
    8. ' +' → logprob: -17.3750057220459
    9. '``' → logprob: -19.0625057220459
    10. ')' → logprob: -19.5625057220459

Token 27: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.13016226887702942
    2. '

' → logprob: -2.380162239074707
    3. 'class' → logprob: -3.630162239074707
    4. ' class' → logprob: -6.630162239074707
    5. ' 
' → logprob: -7.630162239074707
    6. ' 

' → logprob: -8.005162239074707
    7. '
' → logprob: -8.380162239074707
    8. '```' → logprob: -8.755162239074707
    9. '
 
' → logprob: -9.130162239074707
    10. '' → logprob: -9.255162239074707

Token 28: 'EPS' (ID: 82793)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37446582317352295
    2. 'class' → logprob: -1.374465823173523
    3. '

' → logprob: -2.9994659423828125
    4. ' class' → logprob: -5.3744659423828125
    5. ' 
' → logprob: -5.8744659423828125
    6. ' 

' → logprob: -6.7494659423828125
    7. '
 
' → logprob: -8.249465942382812
    8. '```' → logprob: -8.374465942382812
    9. '
' → logprob: -8.999465942382812
    10. '' → logprob: -9.124465942382812

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.005089545156806707
    2. '=' → logprob: -6.13008975982666
    3. ' ' → logprob: -6.13008975982666
    4. '_' → logprob: -7.63008975982666
    5. ' _' → logprob: -9.25508975982666
    6. '.' → logprob: -10.50508975982666
    7. ' =)' → logprob: -10.88008975982666
    8. '  ' → logprob: -11.00508975982666
    9. '_SPACE' → logprob: -11.13008975982666
    10. ',' → logprob: -12.13008975982666

Token 30: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.009799530729651451
    2. '1' → logprob: -4.634799480438232
    3. '0' → logprob: -10.63479995727539
    4. ' ' → logprob: -11.50979995727539
    5. '10' → logprob: -11.75979995727539
    6. '  ' → logprob: -15.00979995727539
    7. '<|end|>' → logprob: -15.88479995727539
    8. '2' → logprob: -16.00979995727539
    9. ' ,' → logprob: -16.07229995727539
    10. '9' → logprob: -16.38479995727539

Token 31: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0024934951215982437
    2. ' ' → logprob: -6.002493381500244
    3. '0' → logprob: -11.002493858337402
    4. '10' → logprob: -13.877493858337402
    5. '-' → logprob: -16.127492904663086
    6. '   ' → logprob: -16.877492904663086
    7. ' ' → logprob: -17.752492904663086
    8. '```' → logprob: -17.752492904663086
    9. '  ' → logprob: -18.002492904663086
    10. '2' → logprob: -18.377492904663086

Token 32: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -1.9743012671824545e-05
    2. ' .' → logprob: -11.250020027160645
    3. '.
' → logprob: -12.500020027160645
    4. '1' → logprob: -13.875020027160645
    5. '0' → logprob: -14.625020027160645
    6. 'e' → logprob: -15.625020027160645
    7. '```' → logprob: -15.625020027160645
    8. '46' → logprob: -15.750020027160645
    9. '\.' → logprob: -15.750020027160645
    10. '.

' → logprob: -16.000019073486328

Token 33: '000' (ID: 1302)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7130742073059082
    2. '9' → logprob: -0.7130742073059082
    3. '000' → logprob: -4.213074207305908
    4. '0' → logprob: -5.838074207305908
    5. '10' → logprob: -7.963074207305908
    6. '3' → logprob: -8.08807373046875
    7. '8' → logprob: -8.21307373046875
    8. '-' → logprob: -8.58807373046875
    9. '6' → logprob: -9.08807373046875
    10. '12' → logprob: -9.21307373046875

Token 34: '000' (ID: 1302)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005266957450658083
    2. '001' → logprob: -5.630267143249512
    3. '000' → logprob: -6.880267143249512
    4. '01' → logprob: -7.380267143249512
    5. ' ' → logprob: -11.630267143249512
    6. '9' → logprob: -12.880267143249512
    7. '0' → logprob: -13.630267143249512
    8. '5' → logprob: -14.380267143249512
    9. '100' → logprob: -15.255267143249512
    10. '00' → logprob: -15.505267143249512

Token 35: '001' (ID: 7659)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00035798799945041537
    2. '01' → logprob: -8.000357627868652
    3. '001' → logprob: -10.750357627868652
    4. '000' → logprob: -13.750357627868652
    5. '```' → logprob: -17.75035858154297
    6. '2' → logprob: -18.62535858154297
    7. '0' → logprob: -19.37535858154297
    8. ' ' → logprob: -19.50035858154297
    9. '１' → logprob: -19.62535858154297
    10. '5' → logprob: -19.87535858154297

Token 36: '
 
' (ID: 47812)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.023048151284456253
    2. ' 
' → logprob: -4.648047924041748
    3. '

' → logprob: -5.023047924041748
    4. 'class' → logprob: -6.023047924041748
    5. '
 
' → logprob: -6.773047924041748
    6. '' → logprob: -7.398047924041748
    7. ' 

' → logprob: -7.648047924041748
    8. '<|end|>' → logprob: -7.648047924041748
    9. '\n' → logprob: -7.898047924041748
    10. '#' → logprob: -7.898047924041748

Token 37: ' 
' (ID: 793)
  Prédit: 'class'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'class' → logprob: -0.003763974644243717
    2. '
' → logprob: -6.1287641525268555
    3. ' 
' → logprob: -6.6287641525268555
    4. ' class' → logprob: -8.378764152526855
    5. '
 
' → logprob: -12.253764152526855
    6. '

' → logprob: -12.628764152526855
    7. ' 
 
' → logprob: -12.753764152526855
    8. '  
' → logprob: -12.878764152526855
    9. 'cl' → logprob: -13.003764152526855
    10. ' 

' → logprob: -13.253764152526855

Token 38: 'def' (ID: 1314)
  Prédit: 'class'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'class' → logprob: -0.0004080315411556512
    2. ' 
' → logprob: -8.000408172607422
    3. '
' → logprob: -10.125408172607422
    4. ' class' → logprob: -10.500408172607422
    5. 'clas' → logprob: -13.625408172607422
    6. 'cl' → logprob: -13.750408172607422
    7. '  
' → logprob: -14.000408172607422
    8. 'c' → logprob: -14.875408172607422
    9. 'cla' → logprob: -14.875408172607422
    10. ' 
 
' → logprob: -15.125408172607422

Token 39: ' calc' (ID: 25691)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.04711131379008293
    2. ' solve' → logprob: -3.2971112728118896
    3. ' factorial' → logprob: -6.297111511230469
    4. ' calculate' → logprob: -6.422111511230469
    5. ' binary' → logprob: -7.047111511230469
    6. ' is' → logprob: -7.047111511230469
    7. ' gcd' → logprob: -7.047111511230469
    8. ' max' → logprob: -7.547111511230469
    9. ' ma' → logprob: -7.547111511230469
    10. ' pow' → logprob: -8.047111511230469

Token 40: '_g' (ID: 5439)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.18100641667842865
    2. '_area' → logprob: -3.05600643157959
    3. '_factor' → logprob: -3.18100643157959
    4. '_sum' → logprob: -4.18100643157959
    5. '_val' → logprob: -4.30600643157959
    6. '(' → logprob: -4.55600643157959
    7. 'ulate' → logprob: -4.80600643157959
    8. '_value' → logprob: -5.18100643157959
    9. '_distance' → logprob: -5.55600643157959
    10. 'ual' → logprob: -6.18100643157959

Token 41: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.030634727329015732
    2. 'reat' → logprob: -3.655634641647339
    3. 'r' → logprob: -6.405634880065918
    4. 'a' → logprob: -7.530634880065918
    5. 'reater' → logprob: -7.780634880065918
    6. '```' → logprob: -8.030634880065918
    7. 'CD' → logprob: -8.530634880065918
    8. 'e' → logprob: -8.905634880065918
    9. 'c' → logprob: -8.905634880065918
    10. 'roup' → logprob: -9.030634880065918

Token 42: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01096280850470066
    2. '(a' → logprob: -4.635962963104248
    3. ' (' → logprob: -7.635962963104248
    4. '(x' → logprob: -7.760962963104248
    5. '<|end|>' → logprob: -9.38596248626709
    6. '(n' → logprob: -9.88596248626709
    7. '("("' → logprob: -10.88596248626709
    8. '(number' → logprob: -10.88596248626709
    9. '(value' → logprob: -11.51096248626709
    10. '(

' → logprob: -11.63596248626709

Token 43: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005676874425262213
    2. ' ,' → logprob: -8.125567436218262
    3. ',b' → logprob: -8.500567436218262
    4. ',a' → logprob: -10.500567436218262
    5. ',)' → logprob: -10.500567436218262
    6. ')' → logprob: -11.750567436218262
    7. 'a' → logprob: -14.375567436218262
    8. ',n' → logprob: -14.500567436218262
    9. ',:)' → logprob: -14.875567436218262
    10. ',

' → logprob: -14.875567436218262

Token 44: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.06205294281244278
    2. ')' → logprob: -2.8120529651641846
    3. ',' → logprob: -10.062052726745605
    4. ':' → logprob: -11.062052726745605
    5. '):
' → logprob: -11.687052726745605
    6. ' ):' → logprob: -12.187052726745605
    7. '),' → logprob: -12.312052726745605
    8. ')**' → logprob: -13.312052726745605
    9. '**' → logprob: -13.812052726745605
    10. ')：' → logprob: -14.062052726745605

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.55246502161026
    2. ':' → logprob: -1.1774649620056152
    3. '):' → logprob: -2.9274649620056152
    4. ' ' → logprob: -3.5524649620056152
    5. ')' → logprob: -4.302464962005615
    6. ' :' → logprob: -5.052464962005615
    7. ' return' → logprob: -5.302464962005615
    8. ',' → logprob: -6.552464962005615
    9. ':return' → logprob: -6.927464962005615
    10. ' ):' → logprob: -7.052464962005615

Token 46: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9345909357070923
    2. ' return' → logprob: -1.0595909357070923
    3. '   ' → logprob: -1.6845909357070923
    4. '    ' → logprob: -3.4345908164978027
    5. 'return' → logprob: -3.9345908164978027
    6. ' \' → logprob: -5.684590816497803
    7. ' 
' → logprob: -5.809590816497803
    8. '```' → logprob: -6.684590816497803
    9. 'r' → logprob: -6.809590816497803
    10. ' if' → logprob: -6.934590816497803

Token 47: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.12296535074710846
    2. ' b' → logprob: -2.7479653358459473
    3. 'a' → logprob: -3.2479653358459473
    4. ' ' → logprob: -4.747965335845947
    5. 'b' → logprob: -5.497965335845947
    6. '	a' → logprob: -11.497965812683105
    7. ' not' → logprob: -11.747965812683105
    8. ' ' → logprob: -12.622965812683105
    9. '   ' → logprob: -12.872965812683105
    10. '  ' → logprob: -12.872965812683105

Token 48: ' <' (ID: 464)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.516046404838562
    2. ' ==' → logprob: -1.391046404838562
    3. '%' → logprob: -2.0160465240478516
    4. '==' → logprob: -4.016046524047852
    5. ' ' → logprob: -6.641046524047852
    6. ' <' → logprob: -6.766046524047852
    7. '%b' → logprob: -8.266046524047852
    8. '   ' → logprob: -9.391046524047852
    9. '=' → logprob: -9.641046524047852
    10. ' >' → logprob: -10.266046524047852

Token 49: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.0076941680163145065
    2. ' b' → logprob: -5.007694244384766
    3. '0' → logprob: -7.382694244384766
    4. '1' → logprob: -8.132694244384766
    5. ' ' → logprob: -10.132694244384766
    6. '=' → logprob: -11.382694244384766
    7. '=b' → logprob: -11.757694244384766
    8. '2' → logprob: -13.757694244384766
    9. '   ' → logprob: -14.382694244384766
    10. '	b' → logprob: -14.382694244384766

Token 50: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0023040547966957092
    2. ':
' → logprob: -6.6273040771484375
    3. ' :' → logprob: -7.7523040771484375
    4. '   ' → logprob: -7.8773040771484375
    5. '       ' → logprob: -9.752304077148438
    6. ':return' → logprob: -9.877304077148438
    7. '):' → logprob: -10.002304077148438
    8. ' :
' → logprob: -12.502304077148438
    9. ',' → logprob: -13.127304077148438
    10. ':
' → logprob: -13.252304077148438

Token 51: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08169016242027283
    2. ' return' → logprob: -3.7066900730133057
    3. '   ' → logprob: -3.8316900730133057
    4. '<|end|>' → logprob: -4.331690311431885
    5. ':return' → logprob: -5.331690311431885
    6. '
' → logprob: -6.081690311431885
    7. '\n' → logprob: -6.206690311431885
    8. 'return' → logprob: -6.206690311431885
    9. ':' → logprob: -6.456690311431885
    10. ' ' → logprob: -6.706690311431885

Token 52: ' a' (ID: 261)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.184907078742981
    2. ' b' → logprob: -1.434907078742981
    3. 'return' → logprob: -2.0599069595336914
    4. 'a' (adapté à ' a') → logprob: -2.1849069595336914
    5. ' a' → logprob: -2.3099069595336914
    6. 'b' → logprob: -2.5599069595336914
    7. '   ' → logprob: -3.4349069595336914
    8. '       ' → logprob: -4.934906959533691
    9. '    ' → logprob: -10.059906959533691
    10. '	return' → logprob: -10.559906959533691

Token 53: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0014292863197624683
    2. ',b' → logprob: -6.876429080963135
    3. ',a' → logprob: -8.501429557800293
    4. ' ,' → logprob: -8.626429557800293
    5. '%' → logprob: -12.501429557800293
    6. '   ' → logprob: -12.751429557800293
    7. 'a' → logprob: -13.626429557800293
    8. ' b' → logprob: -14.126429557800293
    9. '=' → logprob: -14.376429557800293
    10. ',s' → logprob: -14.501429557800293

Token 54: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.31327205896377563
    2. ' =' → logprob: -1.3132719993591309
    3. '=b' → logprob: -12.938272476196289
    4. '=a' → logprob: -12.938272476196289
    5. ',' → logprob: -13.063272476196289
    6. '=
' → logprob: -14.438272476196289
    7. '<|end|>' → logprob: -14.438272476196289
    8. '=}' → logprob: -15.188272476196289
    9. '=

' → logprob: -15.563272476196289
    10. ')' → logprob: -15.563272476196289

Token 55: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.12693870067596436
    2. 'b' → logprob: -2.126938819885254
    3. ' ' → logprob: -12.251938819885254
    4. '    ' → logprob: -12.751938819885254
    5. '   ' → logprob: -13.626938819885254
    6. '	b' → logprob: -13.751938819885254
    7. ' ' → logprob: -15.001938819885254
    8. '>b' → logprob: -15.876938819885254
    9. '  ' → logprob: -16.376937866210938
    10. ' б' → logprob: -16.626937866210938

Token 56: ',a' (ID: 26776)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0824274942278862
    2. ',a' → logprob: -2.582427501678467
    3. ' ,' → logprob: -5.707427501678467
    4. ' a' → logprob: -8.832427024841309
    5. 'a' → logprob: -9.957427024841309
    6. ' ' → logprob: -12.207427024841309
    7. ',b' → logprob: -12.332427024841309
    8. '   ' → logprob: -13.332427024841309
    9. ',
' → logprob: -13.707427024841309
    10. ',user' → logprob: -14.207427024841309

Token 57: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2543366849422455
    2. '   ' → logprob: -2.3793365955352783
    3. ' 
' → logprob: -2.3793365955352783
    4. '<|end|>' → logprob: -4.129336833953857
    5. '    
' → logprob: -4.504336833953857
    6. '  
' → logprob: -5.004336833953857
    7. '
' → logprob: -6.379336833953857
    8. '   
' → logprob: -6.629336833953857
    9. '\n' → logprob: -6.879336833953857
    10. '<|end|>' → logprob: -7.879336833953857

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.058124180883169174
    2. '
' → logprob: -3.18312406539917
    3. ' 
' → logprob: -5.05812406539917
    4. '    
' → logprob: -5.43312406539917
    5. '<|end|>' → logprob: -6.43312406539917
    6. '  
' → logprob: -6.80812406539917
    7. '   
' → logprob: -8.183124542236328
    8. ' ' → logprob: -8.433124542236328
    9. '```' → logprob: -8.433124542236328
    10. '
' → logprob: -8.683124542236328

Token 59: ' if' (ID: 538)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.8946098685264587
    2. ' if' → logprob: -1.5196099281311035
    3. 'if' (adapté à ' if') → logprob: -1.8946099281311035
    4. '   ' → logprob: -2.2696099281311035
    5. 'while' → logprob: -2.3946099281311035
    6. ' 
' → logprob: -4.1446099281311035
    7. '    
' → logprob: -5.1446099281311035
    8. ' ' → logprob: -6.2696099281311035
    9. 'return' → logprob: -7.3946099281311035
    10. ' return' → logprob: -7.3946099281311035

Token 60: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.14269891381263733
    2. ' b' → logprob: -2.0176990032196045
    3. 'a' → logprob: -11.642699241638184
    4. '   ' → logprob: -11.892699241638184
    5. ' a' → logprob: -12.767699241638184
    6. ' not' → logprob: -13.142699241638184
    7. ' ' → logprob: -13.142699241638184
    8. 'not' → logprob: -14.267699241638184
    9. '```' → logprob: -15.767699241638184
    10. '	b' → logprob: -15.830199241638184

Token 61: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5231829285621643
    2. ' ==' → logprob: -0.8981829285621643
    3. '=' → logprob: -10.14818286895752
    4. ' ' → logprob: -11.89818286895752
    5. ' ' → logprob: -12.02318286895752
    6. '0' → logprob: -12.77318286895752
    7. ']==' → logprob: -14.39818286895752
    8. ' =' → logprob: -14.52318286895752
    9. '!=' → logprob: -14.77318286895752
    10. '>' → logprob: -14.89818286895752

Token 62: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0015023599844425917
    2. ' ' → logprob: -6.501502513885498
    3. ' ' → logprob: -16.751502990722656
    4. '   ' → logprob: -17.501502990722656
    5. '۰' → logprob: -17.626502990722656
    6. '```' → logprob: -18.439002990722656
    7. '  ' → logprob: -18.564002990722656
    8. '０' → logprob: -19.314002990722656
    9. '000' → logprob: -19.564002990722656
    10. '1' → logprob: -20.001502990722656

Token 63: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001234428636962548
    2. ' ' → logprob: -9.000123023986816
    3. '   ' → logprob: -17.500123977661133
    4. '۰' → logprob: -18.125123977661133
    5. '  ' → logprob: -18.687623977661133
    6. '000' → logprob: -18.750123977661133
    7. '０' → logprob: -19.562623977661133
    8. ' ' → logprob: -19.687623977661133
    9. '00' → logprob: -20.000123977661133
    10. '```' → logprob: -20.125123977661133

Token 64: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2081412523984909
    2. ':return' → logprob: -1.8331412076950073
    3. ':
' → logprob: -3.583141326904297
    4. '   ' → logprob: -9.083141326904297
    5. ' return' → logprob: -10.833141326904297
    6. '<|end|>' → logprob: -11.333141326904297
    7. '       ' → logprob: -11.708141326904297
    8. 'return' → logprob: -11.833141326904297
    9. '
' → logprob: -11.958141326904297
    10. ' :' → logprob: -12.083141326904297

Token 65: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3816160261631012
    2. '       ' → logprob: -1.5066159963607788
    3. ' return' → logprob: -3.1316161155700684
    4. '\n' → logprob: -4.006616115570068
    5. ':return' → logprob: -4.006616115570068
    6. '    ' → logprob: -5.381616115570068
    7. 'return' → logprob: -6.131616115570068
    8. '
' → logprob: -6.256616115570068
    9. '<|end|>' → logprob: -6.756616115570068
    10. ' 
' → logprob: -6.756616115570068

Token 66: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.03856809809803963
    2. 'return' (adapté à ' return') → logprob: -3.2885680198669434
    3. ' a' → logprob: -8.288568496704102
    4. '   ' → logprob: -8.413568496704102
    5. 'a' → logprob: -11.288568496704102
    6. ':return' → logprob: -11.538568496704102
    7. '	return' → logprob: -11.663568496704102
    8. '    ' → logprob: -11.788568496704102
    9. ' ' → logprob: -11.788568496704102
    10. '       ' → logprob: -12.288568496704102

Token 67: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.011047814972698689
    2. ' a' → logprob: -4.511047840118408
    3. ' ' → logprob: -18.26104736328125
    4. '	a' → logprob: -18.51104736328125
    5. '   ' → logprob: -18.76104736328125
    6. '0' → logprob: -18.88604736328125
    7. '1' → logprob: -20.51104736328125
    8. '  ' → logprob: -20.63604736328125
    9. ' ' → logprob: -21.13604736328125
    10. '_a' → logprob: -21.26104736328125

Token 68: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07883746922016144
    2. '\n' → logprob: -2.9538373947143555
    3. '    
' → logprob: -4.7038373947143555
    4. '
' → logprob: -4.9538373947143555
    5. ' 
' → logprob: -5.9538373947143555
    6. '  
' → logprob: -6.2038373947143555
    7. '<|end|>' → logprob: -6.9538373947143555
    8. '   
' → logprob: -7.7038373947143555
    9. '  ' → logprob: -8.578837394714355
    10. ' ' → logprob: -8.578837394714355

Token 69: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.059184715151786804
    2. '    
' → logprob: -3.5591847896575928
    3. ' 
' → logprob: -4.684184551239014
    4. '
' → logprob: -4.809184551239014
    5. '\n' → logprob: -5.309184551239014
    6. '	return' → logprob: -5.684184551239014
    7. '  
' → logprob: -7.309184551239014
    8. ' return' → logprob: -7.934184551239014
    9. 'return' → logprob: -8.059185028076172
    10. '	
' → logprob: -8.184185028076172

Token 70: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.4562385380268097
    2. ' return' → logprob: -1.7062385082244873
    3. '   ' → logprob: -2.3312385082244873
    4. '
' → logprob: -3.3312385082244873
    5. '    
' → logprob: -4.206238746643066
    6. '	return' → logprob: -4.206238746643066
    7. ' 
' → logprob: -4.206238746643066
    8. ' ' → logprob: -6.331238746643066
    9. '\n' → logprob: -6.456238746643066
    10. '  
' → logprob: -6.956238746643066

Token 71: ' calc' (ID: 25691)
  Prédit: ' calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calc' → logprob: -0.693149983882904
    2. 'calc' → logprob: -0.693149983882904
    3. '(calc' → logprob: -13.31814956665039
    4. 'cal' → logprob: -15.19314956665039
    5. '.calc' → logprob: -15.31814956665039
    6. ' ' → logprob: -15.56814956665039
    7. '_calc' → logprob: -15.81814956665039
    8. 'math' → logprob: -16.56814956665039
    9. ' math' → logprob: -16.56814956665039
    10. '   ' → logprob: -17.06814956665039

Token 72: '_g' (ID: 5439)
  Prédit: '_g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -2.6656825866666622e-05
    2. '_' → logprob: -10.62502670288086
    3. '```' → logprob: -14.37502670288086
    4. ' _' → logprob: -14.87502670288086
    5. '_gc' → logprob: -15.25002670288086
    6. '_s' → logprob: -15.62502670288086
    7. '_f' → logprob: -16.25002670288086
    8. '_b' → logprob: -16.37502670288086
    9. ''_' → logprob: -16.62502670288086
    10. '_a' → logprob: -16.62502670288086

Token 73: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.0010678203543648124
    2. '_cd' → logprob: -6.876067638397217
    3. '_c' → logprob: -10.751068115234375
    4. 'CD' → logprob: -12.001068115234375
    5. 'c' → logprob: -12.251068115234375
    6. 'cdn' → logprob: -14.376068115234375
    7. '_g' → logprob: -14.376068115234375
    8. 'b' → logprob: -14.876068115234375
    9. 'd' → logprob: -15.251068115234375
    10. 'g' → logprob: -15.376068115234375

Token 74: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.045395419001579285
    2. '(a' → logprob: -3.2953953742980957
    3. '(' → logprob: -4.920395374298096
    4. '(
' → logprob: -11.295395851135254
    5. '(abs' → logprob: -11.420395851135254
    6. '((' → logprob: -12.670395851135254
    7. '(math' → logprob: -13.920395851135254
    8. '(B' → logprob: -14.045395851135254
    9. ' (' → logprob: -14.545395851135254
    10. '(

' → logprob: -14.920395851135254

Token 75: ',a' (ID: 26776)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.013974029570817947
    2. ',a' → logprob: -4.388974189758301
    3. ' ,' → logprob: -6.888974189758301
    4. 'a' → logprob: -7.763974189758301
    5. ' a' → logprob: -11.0139741897583
    6. '%' → logprob: -13.1389741897583
    7. ' ' → logprob: -14.7639741897583
    8. ')' → logprob: -15.3889741897583
    9. ',b' → logprob: -16.013973236083984
    10. '%,' → logprob: -16.263973236083984

Token 76: '%b' (ID: 148937)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.6651366353034973
    2. '%' → logprob: -1.4151365756988525
    3. '%b' → logprob: -1.4151365756988525
    4. '%B' → logprob: -12.165136337280273
    5. '%i' → logprob: -12.665136337280273
    6. '%c' → logprob: -13.915136337280273
    7. '%s' → logprob: -14.290136337280273
    8. ' ' → logprob: -14.665136337280273
    9. ' ' → logprob: -15.040136337280273
    10. '%x' → logprob: -15.040136337280273

Token 77: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ' )' → logprob: -13.625001907348633
    3. ')
' → logprob: -14.500001907348633
    4. '))' → logprob: -17.875001907348633
    5. ')return' → logprob: -17.875001907348633
    6. ')`' → logprob: -18.000001907348633
    7. '),' → logprob: -18.750001907348633
    8. '   ' → logprob: -19.125001907348633
    9. '`)' → logprob: -19.125001907348633
    10. '')' → logprob: -19.250001907348633

Token 78: ' 
 
' (ID: 56319)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04709925875067711
    2. 'def' → logprob: -4.2970991134643555
    3. '

' → logprob: -4.4220991134643555
    4. ' 
' → logprob: -4.7970991134643555
    5. '\n' → logprob: -4.9220991134643555
    6. '```' → logprob: -6.7970991134643555
    7. '<|end|>' → logprob: -7.4220991134643555
    8. '\' → logprob: -7.4220991134643555
    9. ' 

' → logprob: -7.5470991134643555
    10. '#' → logprob: -8.047099113464355

Token 79: 'A' (ID: 32)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3869611620903015
    2. 'class' → logprob: -1.1369612216949463
    3. ' 
' → logprob: -10.261960983276367
    4. '
' → logprob: -11.261960983276367
    5. ' class' → logprob: -11.511960983276367
    6. ' def' → logprob: -11.636960983276367
    7. '#' → logprob: -12.261960983276367
    8. '  
' → logprob: -12.261960983276367
    9. 'from' → logprob: -12.511960983276367
    10. '```' → logprob: -12.761960983276367

Token 80: ',B' (ID: 19853)
  Prédit: 'rray'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rray' → logprob: -0.9299535751342773
    2. ' =' → logprob: -1.4299535751342773
    3. '=' → logprob: -1.9299535751342773
    4. '_' → logprob: -3.1799535751342773
    5. '[' → logprob: -3.1799535751342773
    6. 'rr' → logprob: -3.3049535751342773
    7. 'rg' → logprob: -3.9299535751342773
    8. 'r' → logprob: -4.179953575134277
    9. 'I' → logprob: -4.304953575134277
    10. '_r' → logprob: -5.554953575134277

Token 81: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08978507667779922
    2. '=' → logprob: -2.464785099029541
    3. ',' → logprob: -7.589785099029541
    4. ' ' → logprob: -8.214784622192383
    5. ')' → logprob: -10.214784622192383
    6. '=input' → logprob: -11.714784622192383
    7. ' ,' → logprob: -11.964784622192383
    8. '_' → logprob: -12.464784622192383
    9. '  ' → logprob: -13.214784622192383
    10. '<|end|>' → logprob: -13.339784622192383

Token 82: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.02123280242085457
    2. 'map' → logprob: -3.896232843399048
    3. ' list' → logprob: -8.021232604980469
    4. ' ' → logprob: -8.771232604980469
    5. ' input' → logprob: -9.146232604980469
    6. ' [' → logprob: -10.021232604980469
    7. 'input' → logprob: -10.896232604980469
    8. 'list' → logprob: -11.021232604980469
    9. '[' → logprob: -11.271232604980469
    10. ' sys' → logprob: -12.646232604980469

Token 83: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.23647341132164001
    2. '(int' → logprob: -1.6114734411239624
    3. '(input' → logprob: -5.236473560333252
    4. '(lambda' → logprob: -5.736473560333252
    5. '(str' → logprob: -6.111473560333252
    6. '(list' → logprob: -9.111473083496094
    7. '(
' → logprob: -9.986473083496094
    8. '(s' → logprob: -10.986473083496094
    9. ' (' → logprob: -10.986473083496094
    10. '<|end|>' → logprob: -11.986473083496094

Token 84: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.21293790638446808
    2. ',input' → logprob: -2.462937831878662
    3. ')' → logprob: -2.962937831878662
    4. 'input' → logprob: -3.712937831878662
    5. '(sys' → logprob: -4.087937831878662
    6. '(' → logprob: -4.962937831878662
    7. ',' → logprob: -5.337937831878662
    8. ' input' → logprob: -6.587937831878662
    9. '=input' → logprob: -9.08793830871582
    10. '(stdin' → logprob: -9.58793830871582

Token 85: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.10568580776453018
    2. '())' → logprob: -2.3556857109069824
    3. '()' → logprob: -5.230685710906982
    4. ')' → logprob: -10.23068618774414
    5. '());' → logprob: -10.73068618774414
    6. '(' → logprob: -11.10568618774414
    7. '()>' → logprob: -11.48068618774414
    8. '();)' → logprob: -11.98068618774414
    9. '()`' → logprob: -12.60568618774414
    10. '()))' → logprob: -12.73068618774414

Token 86: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016325322212651372
    2. 'strip' → logprob: -8.750163078308105
    3. ')' → logprob: -13.125163078308105
    4. ' split' → logprob: -13.250163078308105
    5. 'rstrip' → logprob: -14.500163078308105
    6. '(split' → logprob: -14.875163078308105
    7. 'spl' → logprob: -16.875164031982422
    8. 'read' → logprob: -17.250164031982422
    9. '().' → logprob: -17.750164031982422
    10. ' ' → logprob: -17.875164031982422

Token 87: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.002137294039130211
    2. '()' → logprob: -6.627137184143066
    3. ')' → logprob: -7.502137184143066
    4. '('' → logprob: -9.002137184143066
    5. '()))' → logprob: -9.752137184143066
    6. '(' → logprob: -9.752137184143066
    7. '(','' → logprob: -12.252137184143066
    8. ' ())' → logprob: -12.752137184143066
    9. '))' → logprob: -13.002137184143066
    10. '())
' → logprob: -13.127137184143066

Token 88: 'print' (ID: 1598)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.022155754268169403
    2. 'x' → logprob: -5.39715576171875
    3. 'a' → logprob: -6.02215576171875
    4. '<|end|>' → logprob: -6.02215576171875
    5. ' 
' → logprob: -6.64715576171875
    6. 'n' → logprob: -6.64715576171875
    7. 'l' → logprob: -6.64715576171875
    8. '
' → logprob: -6.77215576171875
    9. 'c' → logprob: -6.89715576171875
    10. '```' → logprob: -7.02215576171875

Token 89: '("%' (ID: 9336)
  Prédit: '(calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(calc' → logprob: -0.15085700154304504
    2. '(' → logprob: -2.1508569717407227
    3. '(A' → logprob: -3.9008569717407227
    4. '((' → logprob: -6.525856971740723
    5. '(max' → logprob: -7.025856971740723
    6. '(B' → logprob: -7.775856971740723
    7. '(math' → logprob: -8.025856971740723
    8. '(a' → logprob: -9.275856971740723
    9. '(pow' → logprob: -10.275856971740723
    10. '(min' → logprob: -10.400856971740723

Token 90: 'd' (ID: 67)
  Prédit: 'd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -8.268254896393046e-05
    2. '.' → logprob: -10.125082969665527
    3. '0' → logprob: -10.625082969665527
    4. 's' → logprob: -12.500082969665527
    5. 'f' → logprob: -12.625082969665527
    6. 'lld' → logprob: -13.125082969665527
    7. '.d' → logprob: -13.375082969665527
    8. 'i' → logprob: -13.750082969665527
    9. '{' → logprob: -13.875082969665527
    10. '{}' → logprob: -14.375082969665527

Token 91: '"%(' (ID: 152579)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1895275115966797
    2. '"%(' → logprob: -1.9395275115966797
    3. '\n' → logprob: -4.56452751159668
    4. ' "' → logprob: -4.56452751159668
    5. '"%' → logprob: -5.56452751159668
    6. '/%' → logprob: -7.06452751159668
    7. '",(' → logprob: -7.31452751159668
    8. ' /' → logprob: -7.93952751159668
    9. '%' → logprob: -7.93952751159668
    10. ' %' → logprob: -7.93952751159668

Token 92: 'calc' (ID: 49633)
  Prédit: 'calc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.3878263831138611
    2. 'A' → logprob: -1.2628264427185059
    3. 'math' → logprob: -3.637826442718506
    4. 'B' → logprob: -5.512826442718506
    5. 'max' → logprob: -6.262826442718506
    6. ' calc' → logprob: -6.512826442718506
    7. '(calc' → logprob: -6.637826442718506
    8. '(A' → logprob: -7.387826442718506
    9. 'min' → logprob: -7.387826442718506
    10. ' A' → logprob: -7.512826442718506

Token 93: '_g' (ID: 5439)
  Prédit: '_g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -4.36574100604048e-06
    2. ' _' → logprob: -13.500004768371582
    3. '_' → logprob: -14.000004768371582
    4. ')_' → logprob: -14.125004768371582
    5. ')' → logprob: -14.250004768371582
    6. '_a' → logprob: -16.375003814697266
    7. '"_' → logprob: -16.625003814697266
    8. ' ' → logprob: -16.625003814697266
    9. '_gc' → logprob: -16.875003814697266
    10. '_f' → logprob: -16.875003814697266

Token 94: 'cd' (ID: 8301)
  Prédit: 'cd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.0003335585934109986
    2. '_cd' → logprob: -8.125333786010742
    3. 'c' → logprob: -10.750333786010742
    4. 'CD' → logprob: -11.750333786010742
    5. 'd' → logprob: -13.375333786010742
    6. '_c' → logprob: -13.500333786010742
    7. 'cdn' → logprob: -13.625333786010742
    8. 'cdf' → logprob: -13.750333786010742
    9. 'Cd' → logprob: -14.375333786010742
    10. '	cd' → logprob: -15.500333786010742

Token 95: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.0028866638895124197
    2. '(' → logprob: -5.877886772155762
    3. ' (' → logprob: -9.752886772155762
    4. '(
' → logprob: -10.877886772155762
    5. '(B' → logprob: -12.752886772155762
    6. '((' → logprob: -14.127886772155762
    7. '(a' → logprob: -14.377886772155762
    8. ')' → logprob: -15.627886772155762
    9. ' ' → logprob: -16.002885818481445
    10. '(

' → logprob: -16.127885818481445

Token 96: ',B' (ID: 19853)
  Prédit: ',B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',B' → logprob: -0.3169359266757965
    2. ',' → logprob: -1.3169358968734741
    3. ' ,' → logprob: -5.816936016082764
    4. ',b' → logprob: -7.441936016082764
    5. ',
' → logprob: -10.316935539245605
    6. ' ' → logprob: -10.941935539245605
    7. '(' → logprob: -11.816935539245605
    8. '   ' → logprob: -12.066935539245605
    9. 'B' → logprob: -12.316935539245605
    10. ',A' → logprob: -12.441935539245605

Token 97: ')))' (ID: 15975)
  Prédit: ')))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.11665689945220947
    2. '))' → logprob: -2.36665678024292
    3. ')' → logprob: -4.11665678024292
    4. '))))' → logprob: -11.866657257080078
    5. ' ' → logprob: -12.366657257080078
    6. ')))
' → logprob: -12.741657257080078
    7. ')));' → logprob: -14.491657257080078
    8. ' ))' → logprob: -14.741657257080078
    9. '))
' → logprob: -14.741657257080078
    10. '),' → logprob: -15.491657257080078


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 95
Tokens correctement prédits (1ère position, stricte): 41
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 78
Précision stricte (1ère position): 43.16%
Précision adaptée (1ère position): 44.21%
Précision (top 10): 82.11%
================================================================================
