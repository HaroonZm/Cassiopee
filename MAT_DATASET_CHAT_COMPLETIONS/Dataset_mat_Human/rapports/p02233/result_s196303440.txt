================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def memolize(f):
    cache = {}

    def helper(x):
        if x not in cache:
            cache[x] = f(x)
        return cache[x]
    return helper

@memolize
def fib(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1

    return fib(n - 1) + fib(n - 2)

n = int(input())
print(fib(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' mem' (ID: 3225)
  → Token d'amorce (pas de prédiction)

Token 2: 'ol' (ID: 340)
  → Token d'amorce (pas de prédiction)

Token 3: 'ize' (ID: 750)
  Prédit: 'ize'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ize' → logprob: -0.5471776723861694
    2. 'ized' → logprob: -1.0471776723861694
    3. 'y' → logprob: -2.797177791595459
    4. '_' → logprob: -5.422177791595459
    5. 'ization' → logprob: -6.547177791595459
    6. 'izing' → logprob: -6.797177791595459
    7. ' ' → logprob: -7.172177791595459
    8. 'i' → logprob: -7.422177791595459
    9. 'izer' → logprob: -8.2971773147583
    10. 'iz' → logprob: -8.4221773147583

Token 4: '(f' (ID: 1526)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4597901701927185
    2. 'z' → logprob: -1.8347902297973633
    3. 'r' → logprob: -2.4597902297973633
    4. 'ize' → logprob: -2.9597902297973633
    5. '```' → logprob: -3.4597902297973633
    6. 't' → logprob: -4.209790229797363
    7. '   ' → logprob: -4.959790229797363
    8. '       ' → logprob: -5.709790229797363
    9. 'i' → logprob: -6.084790229797363
    10. 'def' → logprob: -6.209790229797363

Token 5: '):
' (ID: 1883)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.19712591171264648
    2. ')' → logprob: -2.4471259117126465
    3. 't' → logprob: -2.9471259117126465
    4. '):' → logprob: -4.0721259117126465
    5. '_' → logprob: -5.0721259117126465
    6. 'a' → logprob: -5.3221259117126465
    7. '```' → logprob: -5.5721259117126465
    8. ' ' → logprob: -5.8221259117126465
    9. '_t' → logprob: -6.9471259117126465
    10. 'r' → logprob: -7.6971259117126465

Token 6: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2160894125699997
    2. ' ' → logprob: -1.9660893678665161
    3. '```' → logprob: -4.216089248657227
    4. '(n' → logprob: -4.966089248657227
    5. ':' → logprob: -5.091089248657227
    6. '(' → logprob: -5.091089248657227
    7. '  ' → logprob: -5.341089248657227
    8. '    ' → logprob: -5.591089248657227
    9. '       ' → logprob: -6.091089248657227
    10. '\' → logprob: -6.716089248657227

Token 7: ' cache' (ID: 11956)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.546792209148407
    2. ' ' → logprob: -0.921792209148407
    3. '    ' → logprob: -5.171792030334473
    4. ' def' → logprob: -5.546792030334473
    5. '```' → logprob: -5.796792030334473
    6. 'def' → logprob: -6.171792030334473
    7. 'd' → logprob: -6.171792030334473
    8. '  ' → logprob: -6.296792030334473
    9. ' ```' → logprob: -6.546792030334473
    10. '       ' → logprob: -6.796792030334473

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07167063653469086
    2. '[' → logprob: -2.8216705322265625
    3. ' =' → logprob: -5.0716705322265625
    4. '.' → logprob: -5.9466705322265625
    5. '_' → logprob: -8.571670532226562
    6. ''' → logprob: -9.196670532226562
    7. '"' → logprob: -9.196670532226562
    8. '.setdefault' → logprob: -9.446670532226562
    9. '[:]' → logprob: -9.821670532226562
    10. '\[' → logprob: -10.196670532226562

Token 9: ' {}

' (ID: 21724)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.0010380487656220794
    2. ' {}' → logprob: -6.876038074493408
    3. 'dict' → logprob: -12.75103759765625
    4. '{}
' → logprob: -14.12603759765625
    5. '{' → logprob: -14.50103759765625
    6. '{}

' → logprob: -14.87603759765625
    7. '{})' → logprob: -15.37603759765625
    8. '   ' → logprob: -15.62603759765625
    9. ' ' → logprob: -15.75103759765625
    10. '{}\' → logprob: -16.00103759765625

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4783484935760498
    2. 'def' → logprob: -1.2283484935760498
    3. '\' → logprob: -3.22834849357605
    4. '
' → logprob: -4.103348731994629
    5. '    
' → logprob: -4.353348731994629
    6. '```' → logprob: -5.103348731994629
    7. ' def' → logprob: -5.728348731994629
    8. ' ' → logprob: -6.228348731994629
    9. '\n' → logprob: -6.228348731994629
    10. '`' → logprob: -6.853348731994629

Token 11: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.09325763583183289
    2. '   ' → logprob: -2.4682576656341553
    3. ' def' → logprob: -5.468257427215576
    4. '```' → logprob: -9.593257904052734
    5. '	def' → logprob: -11.343257904052734
    6. '    ' → logprob: -12.968257904052734
    7. '\' → logprob: -13.343257904052734
    8. '       ' → logprob: -13.343257904052734
    9. '`' → logprob: -13.468257904052734
    10. 'de' → logprob: -13.593257904052734

Token 12: ' helper' (ID: 25246)
  Prédit: ' wrapper'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' wrapper' → logprob: -0.0012092802207916975
    2. ' wrapped' → logprob: -7.376209259033203
    3. ' wrap' → logprob: -8.751209259033203
    4. 'wrapper' → logprob: -8.751209259033203
    5. ' memo' → logprob: -9.501209259033203
    6. ' inner' → logprob: -9.751209259033203
    7. '_wrapper' → logprob: -9.751209259033203
    8. ' decorator' → logprob: -10.626209259033203
    9. ' ' → logprob: -10.751209259033203
    10. ' mem' → logprob: -11.501209259033203

Token 13: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003265411127358675
    2. ' (' → logprob: -6.628265380859375
    3. '<|end|>' → logprob: -6.753265380859375
    4. '(f' → logprob: -7.878265380859375
    5. '<|end|>' → logprob: -9.378265380859375
    6. ')' → logprob: -9.753265380859375
    7. '(user' → logprob: -10.503265380859375
    8. '   ' → logprob: -10.753265380859375
    9. '```' → logprob: -10.753265380859375
    10. '(token' → logprob: -11.003265380859375

Token 14: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006444069440476596
    2. ')' → logprob: -7.375644207000732
    3. '):
' → logprob: -11.87564468383789
    4. ',' → logprob: -11.87564468383789
    5. ':' → logprob: -13.12564468383789
    6. '   ' → logprob: -13.87564468383789
    7. ' ):' → logprob: -14.87564468383789
    8. '),' → logprob: -16.12564468383789
    9. '       ' → logprob: -16.25064468383789
    10. ''):' → logprob: -16.37564468383789

Token 15: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005935909226536751
    2. '    ' → logprob: -6.005936145782471
    3. '   ' → logprob: -7.255936145782471
    4. ':' → logprob: -7.255936145782471
    5. ' ' → logprob: -7.505936145782471
    6. '        ' → logprob: -7.630936145782471
    7. ' if' → logprob: -8.505935668945312
    8. '        
' → logprob: -8.755935668945312
    9. '<|end|>' → logprob: -9.005935668945312
    10. 'if' → logprob: -9.005935668945312

Token 16: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5212421417236328
    2. 'if' (adapté à ' if') → logprob: -1.6462421417236328
    3. ' if' → logprob: -1.8962421417236328
    4. '    ' → logprob: -3.271242141723633
    5. '        ' → logprob: -4.271242141723633
    6. '   ' → logprob: -4.646242141723633
    7. ' ' → logprob: -7.771242141723633
    8. '     ' → logprob: -7.896242141723633
    9. '        
' → logprob: -8.771242141723633
    10. '           ' → logprob: -8.896242141723633

Token 17: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.001705771079286933
    2. 'x' → logprob: -6.376705646514893
    3. ' ' → logprob: -13.25170612335205
    4. '	x' → logprob: -13.50170612335205
    5. '(x' → logprob: -15.12670612335205
    6. ' not' → logprob: -16.751705169677734
    7. '   ' → logprob: -17.126705169677734
    8. ')x' → logprob: -17.251705169677734
    9. '    ' → logprob: -17.501705169677734
    10. ')' → logprob: -17.751705169677734

Token 18: ' not' (ID: 625)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1988428831100464
    2. ' not' → logprob: -1.8238428831100464
    3. 'in' → logprob: -4.323843002319336
    4. 'not' → logprob: -5.198843002319336
    5. ')' → logprob: -9.448843002319336
    6. '   ' → logprob: -10.448843002319336
    7. ' ' → logprob: -11.073843002319336
    8. ' )' → logprob: -12.573843002319336
    9. '	in' → logprob: -13.136343002319336
    10. '	not' → logprob: -13.198843002319336

Token 19: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00749233877286315
    2. 'in' → logprob: -5.007492542266846
    3. ' cache' → logprob: -8.132492065429688
    4. '   ' → logprob: -8.507492065429688
    5. 'cache' → logprob: -9.007492065429688
    6. ' ' → logprob: -9.507492065429688
    7. '  ' → logprob: -11.132492065429688
    8. '    ' → logprob: -11.507492065429688
    9. '<|end|>' → logprob: -11.632492065429688
    10. ')' → logprob: -12.007492065429688

Token 20: ' cache' (ID: 11956)
  Prédit: ' cache'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cache' → logprob: -0.11283540725708008
    2. 'cache' → logprob: -2.23783540725708
    3. '	cache' → logprob: -11.612834930419922
    4. ' ' → logprob: -13.612834930419922
    5. '.cache' → logprob: -13.862834930419922
    6. '_cache' → logprob: -14.862834930419922
    7. 'c' → logprob: -14.987834930419922
    8. '   ' → logprob: -15.487834930419922
    9. '(cache' → logprob: -15.612834930419922
    10. '```' → logprob: -15.612834930419922

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005756704485975206
    2. '):' → logprob: -7.500575542449951
    3. ' :' → logprob: -11.50057601928711
    4. ':**' → logprob: -12.50057601928711
    5. ':
' → logprob: -12.75057601928711
    6. ')' → logprob: -13.25057601928711
    7. '():' → logprob: -13.62557601928711
    8. '       ' → logprob: -14.50057601928711
    9. ':return' → logprob: -15.00057601928711
    10. '   ' → logprob: -15.12557601928711

Token 22: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006833644583821297
    2. ' :' → logprob: -8.000683784484863
    3. '):' → logprob: -8.625683784484863
    4. '       ' → logprob: -9.625683784484863
    5. ':
' → logprob: -9.750683784484863
    6. ':return' → logprob: -11.250683784484863
    7. '():' → logprob: -11.375683784484863
    8. '   ' → logprob: -12.625683784484863
    9. '           ' → logprob: -12.750683784484863
    10. ':**' → logprob: -13.125683784484863

Token 23: ' cache' (ID: 11956)
  Prédit: ' cache'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cache' → logprob: -0.26952850818634033
    2. 'cache' (adapté à ' cache') → logprob: -2.394528388977051
    3. '       ' → logprob: -2.894528388977051
    4. '               ' → logprob: -3.269528388977051
    5. '        ' → logprob: -4.144528388977051
    6. '           ' → logprob: -4.519528388977051
    7. '            ' → logprob: -5.019528388977051
    8. ' ' → logprob: -5.644528388977051
    9. ')' → logprob: -6.019528388977051
    10. '   ' → logprob: -6.019528388977051

Token 24: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.0028174780309200287
    2. '[' → logprob: -5.877817630767822
    3. ']' → logprob: -11.877817153930664
    4. ' [' → logprob: -13.627817153930664
    5. '[f' → logprob: -14.002817153930664
    6. '\[' → logprob: -14.252817153930664
    7. '][' → logprob: -14.627817153930664
    8. '[...]' → logprob: -14.752817153930664
    9. '```' → logprob: -15.002817153930664
    10. 'x' → logprob: -15.002817153930664

Token 25: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0001439459010725841
    2. ']=' → logprob: -9.500144004821777
    3. ' ]' → logprob: -9.750144004821777
    4. ')' → logprob: -11.750144004821777
    5. ')]' → logprob: -13.625144004821777
    6. '=' → logprob: -14.125144004821777
    7. '()]' → logprob: -15.000144004821777
    8. '](' → logprob: -15.875144004821777
    9. ']()' → logprob: -16.50014305114746
    10. '   ' → logprob: -16.62514305114746

Token 26: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6169114112854004
    2. ' =' → logprob: -0.8669114112854004
    3. ']' → logprob: -3.2419114112854004
    4. ']=' → logprob: -6.9919114112854
    5. ')' → logprob: -9.366910934448242
    6. '[' → logprob: -11.491910934448242
    7. '<|end|>' → logprob: -11.866910934448242
    8. ' ]' → logprob: -11.991910934448242
    9. ')=' → logprob: -12.491910934448242
    10. ',' → logprob: -12.991910934448242

Token 27: ' f' (ID: 285)
  Prédit: ' f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' f' → logprob: -0.2519325315952301
    2. 'f' → logprob: -1.5019325017929077
    3. '    ' → logprob: -13.626932144165039
    4. ' ' → logprob: -14.626932144165039
    5. '   ' → logprob: -14.751932144165039
    6. '	f' → logprob: -14.876932144165039
    7. '           ' → logprob: -14.876932144165039
    8. ' ' → logprob: -15.126932144165039
    9. '        ' → logprob: -16.00193214416504
    10. '            ' → logprob: -16.12693214416504

Token 28: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.0004883344518020749
    2. '(' → logprob: -7.62548828125
    3. '(
' → logprob: -15.62548828125
    4. ')' → logprob: -16.12548828125
    5. 'x' → logprob: -17.12548828125
    6. ')(' → logprob: -17.25048828125
    7. '<|end|>' → logprob: -17.50048828125
    8. ' (' → logprob: -18.00048828125
    9. ')x' → logprob: -18.25048828125
    10. '(s' → logprob: -18.37548828125

Token 29: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3902033970225602e-05
    2. ')
' → logprob: -11.250014305114746
    3. ' )' → logprob: -14.625014305114746
    4. ')

' → logprob: -16.12501335144043
    5. ')return' → logprob: -16.75001335144043
    6. '       ' → logprob: -17.00001335144043
    7. '))' → logprob: -17.62501335144043
    8. ')
' → logprob: -17.75001335144043
    9. '   ' → logprob: -18.25001335144043
    10. '<|end|>' → logprob: -18.37501335144043

Token 30: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006029533687978983
    2. '
' → logprob: -7.875602722167969
    3. '        
' → logprob: -9.750602722167969
    4. '   ' → logprob: -10.000602722167969
    5. '    
' → logprob: -10.000602722167969
    6. 'return' → logprob: -10.250602722167969
    7. ' return' → logprob: -10.875602722167969
    8. '           ' → logprob: -12.375602722167969
    9. '            
' → logprob: -12.625602722167969
    10. '
' → logprob: -12.875602722167969

Token 31: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009854302741587162
    2. '   ' → logprob: -5.509854316711426
    3. 'return' (adapté à ' return') → logprob: -6.259854316711426
    4. '
' → logprob: -6.509854316711426
    5. ' return' → logprob: -6.884854316711426
    6. '    
' → logprob: -7.259854316711426
    7. '        
' → logprob: -8.759854316711426
    8. '  
' → logprob: -9.009854316711426
    9. '	return' → logprob: -9.634854316711426
    10. '    ' → logprob: -9.634854316711426

Token 32: ' cache' (ID: 11956)
  Prédit: ' cache'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cache' → logprob: -0.06197473779320717
    2. 'cache' → logprob: -2.8119747638702393
    3. '(cache' → logprob: -12.93697452545166
    4. '	cache' → logprob: -13.06197452545166
    5. ' ' → logprob: -13.81197452545166
    6. ' cach' → logprob: -14.56197452545166
    7. '.cache' → logprob: -15.56197452545166
    8. ' ' → logprob: -15.93697452545166
    9. ' cached' → logprob: -15.93697452545166
    10. '    ' → logprob: -16.186975479125977

Token 33: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.003193874144926667
    2. '[' → logprob: -5.7531938552856445
    3. ' [' → logprob: -12.128193855285645
    4. ' ' → logprob: -13.003193855285645
    5. 'x' → logprob: -13.003193855285645
    6. '   ' → logprob: -13.503193855285645
    7. '       ' → logprob: -13.753193855285645
    8. '(x' → logprob: -14.128193855285645
    9. '```' → logprob: -14.378193855285645
    10. '[
' → logprob: -15.128193855285645

Token 34: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3544423381972592e-05
    2. ')
' → logprob: -11.75001335144043
    3. '}' → logprob: -12.87501335144043
    4. ']' → logprob: -14.12501335144043
    5. ' )' → logprob: -14.12501335144043
    6. '   ' → logprob: -14.50001335144043
    7. '）' → logprob: -15.00001335144043
    8. ')return' → logprob: -15.12501335144043
    9. '<|end|>' → logprob: -16.75001335144043
    10. '`)' → logprob: -16.87501335144043

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5334603190422058
    2. '
' → logprob: -1.0334603786468506
    3. '    
' → logprob: -2.9084603786468506
    4. '<|end|>' → logprob: -6.5334601402282715
    5. '        
' → logprob: -7.6584601402282715
    6. '       ' → logprob: -7.9084601402282715
    7. '  
' → logprob: -8.78346061706543
    8. '
' → logprob: -9.03346061706543
    9. '' → logprob: -9.28346061706543
    10. ' ' → logprob: -9.65846061706543

Token 36: ' return' (ID: 622)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.35877683758735657
    2. '   ' → logprob: -1.4837768077850342
    3. '    
' → logprob: -2.733776807785034
    4. 'return' (adapté à ' return') → logprob: -5.483777046203613
    5. '  
' → logprob: -6.483777046203613
    6. ' return' → logprob: -7.108777046203613
    7. ' ' → logprob: -7.358777046203613
    8. '<|end|>' → logprob: -7.608777046203613
    9. '\n' → logprob: -7.733777046203613
    10. '	return' → logprob: -8.108777046203613

Token 37: ' helper' (ID: 25246)
  Prédit: ' helper'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' helper' → logprob: -0.008620012551546097
    2. 'helper' → logprob: -4.758619785308838
    3. '(helper' → logprob: -12.758620262145996
    4. '_helper' → logprob: -13.633620262145996
    5. 'Helper' → logprob: -14.508620262145996
    6. ' help' → logprob: -14.758620262145996
    7. ' Helper' → logprob: -15.508620262145996
    8. 'help' → logprob: -15.633620262145996
    9. '-helper' → logprob: -16.00861930847168
    10. '.helper' → logprob: -17.13361930847168

Token 38: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4768860340118408
    2. '<|end|>' → logprob: -1.2268860340118408
    3. ')' → logprob: -3.851886034011841
    4. 'n' → logprob: -4.101885795593262
    5. '_' → logprob: -4.351885795593262
    6. '\' → logprob: -4.476885795593262
    7. '```' → logprob: -5.226885795593262
    8. '()' → logprob: -5.851885795593262
    9. '
' → logprob: -5.851885795593262
    10. 'm' → logprob: -6.351885795593262

Token 39: '@' (ID: 31)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9716542959213257
    2. '_' → logprob: -1.3466542959213257
    3. 'm' → logprob: -2.0966544151306152
    4. '<|end|>' → logprob: -2.8466544151306152
    5. 's' → logprob: -3.2216544151306152
    6. ')' → logprob: -3.3466544151306152
    7. 'n' → logprob: -3.7216544151306152
    8. ' ' → logprob: -3.8466544151306152
    9. 'd' → logprob: -4.221654415130615
    10. 'e' → logprob: -4.971654415130615

Token 40: 'mem' (ID: 17112)
  Prédit: 'mem'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mem' → logprob: -0.0015746140852570534
    2. 'memo' → logprob: -6.751574516296387
    3. 'l' → logprob: -8.251574516296387
    4. 'memor' → logprob: -10.251574516296387
    5. 'staticmethod' → logprob: -10.376574516296387
    6. 'm' → logprob: -10.751574516296387
    7. 'fun' → logprob: -11.501574516296387
    8. 'memory' → logprob: -12.001574516296387
    9. 'cache' → logprob: -12.251574516296387
    10. 'me' → logprob: -12.251574516296387

Token 41: 'ol' (ID: 340)
  Prédit: 'ol'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ol' → logprob: -0.5010732412338257
    2. 'o' → logprob: -1.2510732412338257
    3. 'oz' → logprob: -2.2510733604431152
    4. '@' → logprob: -6.501073360443115
    5. 'of' → logprob: -8.376072883605957
    6. '```' → logprob: -9.001072883605957
    7. 'or' → logprob: -9.251072883605957
    8. 'om' → logprob: -9.251072883605957
    9. 'O' → logprob: -9.376072883605957
    10. 'lo' → logprob: -9.751072883605957

Token 42: 'ize' (ID: 750)
  Prédit: 'ize'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ize' → logprob: -0.0006541779730468988
    2. 'iz' → logprob: -8.000654220581055
    3. 'ized' → logprob: -8.125654220581055
    4. '-' → logprob: -12.750654220581055
    5. 'izer' → logprob: -12.750654220581055
    6. 'i' → logprob: -13.000654220581055
    7. ' ' → logprob: -13.250654220581055
    8. '```' → logprob: -13.375654220581055
    9. '_' → logprob: -13.625654220581055
    10. '#' → logprob: -13.750654220581055

Token 43: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00031270162435248494
    2. '
' → logprob: -9.125312805175781
    3. '\' → logprob: -9.875312805175781
    4. '```' → logprob: -9.875312805175781
    5. '<|end|>' → logprob: -10.875312805175781
    6. '(' → logprob: -11.375312805175781
    7. 'factor' → logprob: -11.500312805175781
    8. 'fib' → logprob: -11.500312805175781
    9. '#' → logprob: -11.750312805175781
    10. 'd' → logprob: -12.250312805175781

Token 44: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.368984107510187e-05
    2. '<|end|>' → logprob: -10.875033378601074
    3. 'fib' → logprob: -12.125033378601074
    4. 'factor' → logprob: -12.375033378601074
    5. '```' → logprob: -13.125033378601074
    6. 'f' → logprob: -14.000033378601074
    7. ' def' → logprob: -14.125033378601074
    8. 'de' → logprob: -14.625033378601074
    9. 'pow' → logprob: -15.375033378601074
    10. 'd' → logprob: -15.625033378601074

Token 45: ' fib' (ID: 18795)
  Prédit: 'fib'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fib' → logprob: -1.0969066619873047
    2. ' factorial' → logprob: -1.5969066619873047
    3. ' fibonacci' → logprob: -1.5969066619873047
    4. 'f' → logprob: -2.0969066619873047
    5. ' fib' → logprob: -2.4719066619873047
    6. 'factor' → logprob: -2.9719066619873047
    7. ' f' → logprob: -7.096906661987305
    8. 'fact' → logprob: -7.596906661987305
    9. ' fact' → logprob: -7.846906661987305
    10. ' factor' → logprob: -8.096906661987305

Token 46: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.026405496522784233
    2. '(' → logprob: -3.6514055728912354
    3. '(x' → logprob: -9.776405334472656
    4. 'n' → logprob: -11.026405334472656
    5. 'o' → logprob: -11.651405334472656
    6. ' (' → logprob: -12.276405334472656
    7. 'onacci' → logprob: -12.276405334472656
    8. '(i' → logprob: -12.526405334472656
    9. '<|end|>' → logprob: -12.651405334472656
    10. '```' → logprob: -12.901405334472656

Token 47: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004176833899691701
    2. ')' → logprob: -8.000417709350586
    3. '):
' → logprob: -9.875417709350586
    4. ':' → logprob: -10.625417709350586
    5. ' ):' → logprob: -12.750417709350586
    6. '(n' → logprob: -13.250417709350586
    7. '+' → logprob: -14.875417709350586
    8. ')n' → logprob: -15.000417709350586
    9. '):
' → logprob: -15.500417709350586
    10. '   ' → logprob: -15.500417709350586

Token 48: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9291931986808777
    2. '0' → logprob: -1.0541932582855225
    3. ' if' → logprob: -1.5541932582855225
    4. 'if' → logprob: -3.6791932582855225
    5. ' n' → logprob: -4.804193019866943
    6. ' ' → logprob: -4.804193019866943
    7. 'n' → logprob: -6.179193019866943
    8. '    ' → logprob: -7.179193019866943
    9. '1' → logprob: -8.304193496704102
    10. ' 
' → logprob: -8.804193496704102

Token 49: ' if' (ID: 538)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09004025906324387
    2. 'if' (adapté à ' if') → logprob: -2.8400402069091797
    3. '1' → logprob: -4.09004020690918
    4. 'fib' → logprob: -5.46504020690918
    5. 'n' → logprob: -5.59004020690918
    6. ' ' → logprob: -6.46504020690918
    7. '   ' → logprob: -6.96504020690918
    8. ' if' → logprob: -7.84004020690918
    9. ' n' → logprob: -10.59004020690918
    10. 'f' → logprob: -11.59004020690918

Token 50: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.126930832862854
    2. 'n' → logprob: -2.1269307136535645
    3. '	n' → logprob: -13.876931190490723
    4. ' ' → logprob: -14.126931190490723
    5. '0' → logprob: -14.126931190490723
    6. '   ' → logprob: -16.001930236816406
    7. '(n' → logprob: -16.001930236816406
    8. '  ' → logprob: -16.876930236816406
    9. '<n' → logprob: -17.126930236816406
    10. ' ' → logprob: -18.001930236816406

Token 51: ' ==' (ID: 951)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.11573590338230133
    2. ' <=' → logprob: -2.3657360076904297
    3. '<' → logprob: -4.74073600769043
    4. '==' → logprob: -5.11573600769043
    5. ' <' → logprob: -7.74073600769043
    6. ' ==' → logprob: -8.49073600769043
    7. ' ' → logprob: -10.99073600769043
    8. '0' → logprob: -11.74073600769043
    9. '=' → logprob: -12.99073600769043
    10. '≤' → logprob: -13.61573600769043

Token 52: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12692831456661224
    2. ' ' → logprob: -2.1269283294677734
    3. '   ' → logprob: -16.251928329467773
    4. '1' → logprob: -16.251928329467773
    5. '  ' → logprob: -17.251928329467773
    6. '۰' → logprob: -17.251928329467773
    7. ' ' → logprob: -18.126928329467773
    8. '	' → logprob: -18.376928329467773
    9. '<' → logprob: -19.126928329467773
    10. '    ' → logprob: -19.251928329467773

Token 53: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.130576806142926e-05
    2. ' ' → logprob: -10.375031471252441
    3. '<' → logprob: -18.125030517578125
    4. '1' → logprob: -18.625030517578125
    5. '   ' → logprob: -20.000030517578125
    6. '۰' → logprob: -20.000030517578125
    7. '  ' → logprob: -21.250030517578125
    8. '０' → logprob: -21.500030517578125
    9. '<=' → logprob: -22.000030517578125
    10. '2' → logprob: -22.375030517578125

Token 54: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003983760252594948
    2. ':
' → logprob: -8.750398635864258
    3. ':return' → logprob: -8.875398635864258
    4. ' :' → logprob: -9.250398635864258
    5. ' or' → logprob: -13.000398635864258
    6. '0' → logprob: -14.500398635864258
    7. '   ' → logprob: -14.750398635864258
    8. '1' → logprob: -15.250398635864258
    9. ' :
' → logprob: -15.625398635864258
    10. ':def' → logprob: -16.125398635864258

Token 55: '       ' (ID: 309)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9978448152542114
    2. ' ' → logprob: -1.1228448152542114
    3. '   ' → logprob: -1.6228448152542114
    4. '1' → logprob: -2.622844696044922
    5. ' return' → logprob: -4.247844696044922
    6. ' 
' → logprob: -4.372844696044922
    7. '    ' → logprob: -4.997844696044922
    8. ' ' → logprob: -6.747844696044922
    9. '    
' → logprob: -8.497844696044922
    10. '  ' → logprob: -8.747844696044922

Token 56: ' return' (ID: 622)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00039158877916634083
    2. ' ' → logprob: -7.875391483306885
    3. '1' → logprob: -11.750391960144043
    4. 'return' (adapté à ' return') → logprob: -12.750391960144043
    5. '   ' → logprob: -14.500391960144043
    6. 'n' → logprob: -16.125391006469727
    7. ' return' → logprob: -16.125391006469727
    8. '  ' → logprob: -19.000391006469727
    9. '```' → logprob: -20.000391006469727
    10. ' ' → logprob: -20.125391006469727

Token 57: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04860372841358185
    2. ' ' → logprob: -3.0486037731170654
    3. '1' → logprob: -11.048604011535645
    4. 'n' → logprob: -14.923604011535645
    5. ' ' → logprob: -16.048603057861328
    6. ' n' → logprob: -17.423603057861328
    7. '   ' → logprob: -18.673603057861328
    8. '  ' → logprob: -19.548603057861328
    9. '۰' → logprob: -19.673603057861328
    10. '_' → logprob: -20.798603057861328

Token 58: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.896309739408025e-07
    2. 'n' → logprob: -14.750000953674316
    3. '1' → logprob: -15.375000953674316
    4. ' ' → logprob: -16.25
    5. '   ' → logprob: -21.25
    6. '۰' → logprob: -22.375
    7. '2' → logprob: -23.0
    8. '```' → logprob: -23.25
    9. '3' → logprob: -23.375
    10. '00' → logprob: -23.75

Token 59: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40936702489852905
    2. 'elif' → logprob: -1.4093670845031738
    3. ' elif' → logprob: -2.534367084503174
    4. '\n' → logprob: -6.159367084503174
    5. '    ' → logprob: -6.284367084503174
    6. ' ' → logprob: -6.284367084503174
    7. '    
' → logprob: -6.909367084503174
    8. 'n' → logprob: -6.909367084503174
    9. '	elif' → logprob: -7.284367084503174
    10. '  ' → logprob: -7.284367084503174

Token 60: '   ' (ID: 271)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.6198664307594299
    2. '   ' → logprob: -1.4948663711547852
    3. ' elif' → logprob: -1.9948663711547852
    4. '
' → logprob: -2.744866371154785
    5. '    
' → logprob: -4.369866371154785
    6. '\n' → logprob: -4.869866371154785
    7. ' 
' → logprob: -5.119866371154785
    8. '	elif' → logprob: -6.119866371154785
    9. ' ' → logprob: -6.369866371154785
    10. '<|end|>' → logprob: -6.869866371154785

Token 61: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.6477057933807373
    2. ' elif' → logprob: -0.7727057933807373
    3. '   ' → logprob: -4.647706031799316
    4. ' if' → logprob: -5.772706031799316
    5. 'if' → logprob: -6.647706031799316
    6. '	elif' → logprob: -8.272706031799316
    7. ' ' → logprob: -8.397706031799316
    8. '\n' → logprob: -9.147706031799316
    9. 'n' → logprob: -9.397706031799316
    10. '    
' → logprob: -9.647706031799316

Token 62: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3133319318294525
    2. ' n' → logprob: -1.313331961631775
    3. '1' → logprob: -9.688331604003906
    4. ' ' → logprob: -12.313331604003906
    5. '	n' → logprob: -12.813331604003906
    6. ' ' → logprob: -14.188331604003906
    7. '   ' → logprob: -15.438331604003906
    8. '(n' → logprob: -17.438331604003906
    9. '  ' → logprob: -17.688331604003906
    10. '    ' → logprob: -18.438331604003906

Token 63: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.31337499618530273
    2. '==' → logprob: -1.3133749961853027
    3. ' <=' → logprob: -9.938375473022461
    4. ' ' → logprob: -10.438375473022461
    5. '<=' → logprob: -11.188375473022461
    6. '1' → logprob: -11.438375473022461
    7. '=' → logprob: -12.438375473022461
    8. '   ' → logprob: -12.938375473022461
    9. ' in' → logprob: -13.313375473022461
    10. '===' → logprob: -13.813375473022461

Token 64: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012514949776232243
    2. ' ' → logprob: -4.387515068054199
    3. '0' → logprob: -12.3875150680542
    4. ' ' → logprob: -15.1375150680542
    5. '   ' → logprob: -15.6375150680542
    6. '  ' → logprob: -15.8250150680542
    7. '-' → logprob: -15.9500150680542
    8. '```' → logprob: -16.262514114379883
    9. '01' → logprob: -16.950014114379883
    10. '(' → logprob: -17.075014114379883

Token 65: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.000297685619443655
    2. ' ' → logprob: -8.125297546386719
    3. '0' → logprob: -13.500297546386719
    4. '   ' → logprob: -16.62529754638672
    5. '  ' → logprob: -17.12529754638672
    6. '-' → logprob: -17.43779754638672
    7. '01' → logprob: -17.50029754638672
    8. 'n' → logprob: -17.50029754638672
    9. '```' → logprob: -17.56279754638672
    10. '2' → logprob: -17.81279754638672

Token 66: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008319015032611787
    2. ':
' → logprob: -7.5008320808410645
    3. ':return' → logprob: -8.250831604003906
    4. '   ' → logprob: -12.000831604003906
    5. '<|end|>' → logprob: -12.250831604003906
    6. '       ' → logprob: -12.875831604003906
    7. '):' → logprob: -14.000831604003906
    8. ':

' → logprob: -14.500831604003906
    9. '```' → logprob: -14.625831604003906
    10. ' :' → logprob: -14.750831604003906

Token 67: '       ' (ID: 309)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.9579514265060425
    2. '       ' → logprob: -1.2079514265060425
    3. '    ' → logprob: -2.207951545715332
    4. '   ' → logprob: -2.457951545715332
    5. ' return' → logprob: -2.832951545715332
    6. ' ' → logprob: -3.082951545715332
    7. 'return' → logprob: -4.332951545715332
    8. '        ' → logprob: -5.832951545715332
    9. '2' → logprob: -7.957951545715332
    10. '     ' → logprob: -8.082951545715332

Token 68: ' return' (ID: 622)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003154432924930006
    2. 'return' (adapté à ' return') → logprob: -8.87531566619873
    3. 'fib' → logprob: -9.25031566619873
    4. ' ' → logprob: -9.75031566619873
    5. '   ' → logprob: -11.12531566619873
    6. ' return' → logprob: -12.62531566619873
    7. 'n' → logprob: -13.25031566619873
    8. '    ' → logprob: -14.62531566619873
    9. ' fib' → logprob: -14.75031566619873
    10. 'f' → logprob: -15.62531566619873

Token 69: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.36742037534713745
    2. 'fib' → logprob: -1.2424204349517822
    3. ' fib' → logprob: -4.367420196533203
    4. ' ' → logprob: -5.117420196533203
    5. 'f' → logprob: -9.492420196533203
    6. '0' → logprob: -10.742420196533203
    7. '   ' → logprob: -12.367420196533203
    8. 'n' → logprob: -12.492420196533203
    9. ' fibonacci' → logprob: -13.117420196533203
    10. '```' → logprob: -13.304920196533203

Token 70: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.953082341467962e-05
    2. ' ' → logprob: -10.875039100646973
    3. 'fib' → logprob: -10.875039100646973
    4. '2' → logprob: -13.750039100646973
    5. '0' → logprob: -14.875039100646973
    6. '   ' → logprob: -16.37504005432129
    7. ' fib' → logprob: -16.37504005432129
    8. 'f' → logprob: -16.75004005432129
    9. 'n' → logprob: -18.06254005432129
    10. '```' → logprob: -18.06254005432129

Token 71: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005186201073229313
    2. 'else' → logprob: -6.255186080932617
    3. 'elif' → logprob: -7.130186080932617
    4. '    
' → logprob: -7.255186080932617
    5. ' else' → logprob: -7.380186080932617
    6. '\n' → logprob: -7.380186080932617
    7. '```' → logprob: -8.880186080932617
    8. 'n' → logprob: -9.380186080932617
    9. '\' → logprob: -9.755186080932617
    10. '
' → logprob: -10.255186080932617

Token 72: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024111783131957054
    2. 'else' → logprob: -3.774111747741699
    3. ' else' → logprob: -7.399111747741699
    4. 'elif' → logprob: -8.3991117477417
    5. '    
' → logprob: -11.1491117477417
    6. 'return' → logprob: -11.7741117477417
    7. 'n' → logprob: -12.5241117477417
    8. ' elif' → logprob: -13.7741117477417
    9. '  ' → logprob: -14.2741117477417
    10. ' ' → logprob: -14.7741117477417

Token 73: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.341951459646225
    2. 'else' → logprob: -1.3419514894485474
    3. 'return' (adapté à ' return') → logprob: -3.841951370239258
    4. ' else' → logprob: -5.216951370239258
    5. 'elif' → logprob: -7.341951370239258
    6. ' return' → logprob: -7.841951370239258
    7. 'n' → logprob: -8.466951370239258
    8. '  ' → logprob: -10.216951370239258
    9. '    
' → logprob: -10.216951370239258
    10. '    ' → logprob: -10.341951370239258

Token 74: ' fib' (ID: 18795)
  Prédit: 'fib'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fib' → logprob: -0.3132711946964264
    2. ' fib' → logprob: -1.313271164894104
    3. 'f' → logprob: -11.688271522521973
    4. ' f' → logprob: -15.313271522521973
    5. ' fibonacci' → logprob: -15.438271522521973
    6. ' ' → logprob: -15.688271522521973
    7. ' ' → logprob: -15.688271522521973
    8. '	f' → logprob: -15.813271522521973
    9. 'mem' → logprob: -17.063270568847656
    10. '   ' → logprob: -17.813270568847656

Token 75: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00014013137842994183
    2. '(' → logprob: -8.875140190124512
    3. 'n' → logprob: -15.375140190124512
    4. ' (' → logprob: -17.500139236450195
    5. '((' → logprob: -17.875139236450195
    6. '(
' → logprob: -18.125139236450195
    7. '\(' → logprob: -18.500139236450195
    8. '```' → logprob: -20.250139236450195
    9. '(x' → logprob: -21.125139236450195
    10. '﻿' → logprob: -21.125139236450195

Token 76: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0004306692280806601
    2. ' -' → logprob: -7.750430583953857
    3. ' ' → logprob: -18.500431060791016
    4. '-)' → logprob: -19.375431060791016
    5. '-n' → logprob: -19.500431060791016
    6. ')' → logprob: -19.875431060791016
    7. '1' → logprob: -20.750431060791016
    8. '−' → logprob: -20.875431060791016
    9. '   ' → logprob: -21.125431060791016
    10. '-
' → logprob: -21.500431060791016

Token 77: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.954393079970032e-05
    2. ' ' → logprob: -10.000049591064453
    3. '2' → logprob: -12.875049591064453
    4. '   ' → logprob: -13.750049591064453
    5. ')' → logprob: -15.625049591064453
    6. '```' → logprob: -15.750049591064453
    7. '  ' → logprob: -16.250049591064453
    8. '	' → logprob: -17.250049591064453
    9. '-' → logprob: -17.437549591064453
    10. '       ' → logprob: -17.687549591064453

Token 78: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5690089639974758e-05
    2. ' ' → logprob: -11.750015258789062
    3. '2' → logprob: -11.875015258789062
    4. ')' → logprob: -15.250015258789062
    5. '   ' → logprob: -15.375015258789062
    6. '```' → logprob: -16.000015258789062
    7. '  ' → logprob: -17.062515258789062
    8. '-' → logprob: -17.312515258789062
    9. '۱' → logprob: -17.750015258789062
    10. '１' → logprob: -17.937515258789062

Token 79: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005289373453706503
    2. ' )' → logprob: -5.380289554595947
    3. '-' → logprob: -7.505289554595947
    4. ' -' → logprob: -9.255289077758789
    5. ' ' → logprob: -11.505289077758789
    6. '-)' → logprob: -11.755289077758789
    7. ')+' → logprob: -13.005289077758789
    8. '   ' → logprob: -14.005289077758789
    9. '+' → logprob: -14.880289077758789
    10. ')
' → logprob: -15.130289077758789

Token 80: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.042022500187158585
    2. '+' → logprob: -3.417022466659546
    3. ' ' → logprob: -4.792022705078125
    4. ' +
' → logprob: -10.292022705078125
    5. '-' → logprob: -12.042022705078125
    6. '  ' → logprob: -13.542022705078125
    7. ' ' → logprob: -13.667022705078125
    8. '+
' → logprob: -13.917022705078125
    9. ' -' → logprob: -14.292022705078125
    10. ' +
' → logprob: -15.042022705078125

Token 81: ' fib' (ID: 18795)
  Prédit: ' fib'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fib' → logprob: -0.04859895631670952
    2. 'fib' → logprob: -3.0485990047454834
    3. ' ' → logprob: -12.423599243164062
    4. 'f' → logprob: -12.923599243164062
    5. ' ' → logprob: -13.048599243164062
    6. ' fibonacci' → logprob: -13.798599243164062
    7. ' f' → logprob: -14.298599243164062
    8. 'n' → logprob: -14.673599243164062
    9. '1' → logprob: -14.923599243164062
    10. '```' → logprob: -16.173599243164062

Token 82: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5759702324867249
    2. '(' → logprob: -0.8259702324867249
    3. ' (' → logprob: -10.575970649719238
    4. '(
' → logprob: -12.200970649719238
    5. '((' → logprob: -15.950970649719238
    6. '(

' → logprob: -15.950970649719238
    7. ' ' → logprob: -17.575969696044922
    8. 'n' → logprob: -18.825969696044922
    9. '(
' → logprob: -19.075969696044922
    10. '('' → logprob: -19.075969696044922

Token 83: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.25210317969322205
    2. '-' → logprob: -1.5021032094955444
    3. ' ' → logprob: -8.877102851867676
    4. ')' → logprob: -10.377102851867676
    5. ' -
' → logprob: -14.127102851867676
    6. ' )' → logprob: -14.252102851867676
    7. '2' → logprob: -14.627102851867676
    8. ' ' → logprob: -14.627102851867676
    9. '  ' → logprob: -15.377102851867676
    10. '   ' → logprob: -15.752102851867676

Token 84: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00026169343618676066
    2. ' ' → logprob: -8.250261306762695
    3. ')' → logprob: -16.000261306762695
    4. '۲' → logprob: -16.125261306762695
    5. '```' → logprob: -16.375261306762695
    6. '   ' → logprob: -17.750261306762695
    7. '  ' → logprob: -18.500261306762695
    8. '1' → logprob: -18.500261306762695
    9. '２' → logprob: -18.625261306762695
    10. '٢' → logprob: -19.187761306762695

Token 85: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.125000953674316
    3. '۲' → logprob: -17.0
    4. ')' → logprob: -18.5
    5. '1' → logprob: -18.75
    6. '２' → logprob: -19.5
    7. '```' → logprob: -19.5
    8. '٢' → logprob: -20.125
    9. '   ' → logprob: -20.625
    10. '२' → logprob: -20.625

Token 86: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. ')
' → logprob: -14.000000953674316
    3. ' )' → logprob: -14.875000953674316
    4. ')

' → logprob: -19.875001907348633
    5. ')`' → logprob: -20.500001907348633
    6. '）' → logprob: -20.875001907348633
    7. ')#' → logprob: -21.000001907348633
    8. ')n' → logprob: -21.125001907348633
    9. '))' → logprob: -21.375001907348633
    10. ')
' → logprob: -21.500001907348633

Token 87: 'n' (ID: 77)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6082752346992493
    2. '#' → logprob: -1.8582751750946045
    3. '(' → logprob: -2.1082751750946045
    4. 'n' → logprob: -2.9832751750946045
    5. '```' → logprob: -3.3582751750946045
    6. '\n' → logprob: -3.4832751750946045
    7. ' ' → logprob: -4.483275413513184
    8. '
' → logprob: -4.483275413513184
    9. '<|end|>' → logprob: -4.858275413513184
    10. '0' → logprob: -4.983275413513184

Token 88: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1880972534418106
    2. '(' → logprob: -2.1880972385406494
    3. '<|end|>' → logprob: -3.0630972385406494
    4. ')' → logprob: -5.0630974769592285
    5. '  ' → logprob: -6.9380974769592285
    6. ' =' → logprob: -6.9380974769592285
    7. '=' → logprob: -6.9380974769592285
    8. '<|end|>' → logprob: -7.1880974769592285
    9. ' (' → logprob: -7.8130974769592285
    10. '(n' → logprob: -7.9380974769592285

Token 89: ' int' (ID: 677)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.07934709638357162
    2. ' ' → logprob: -2.5793471336364746
    3. '20' → logprob: -8.704346656799316
    4. '1' → logprob: -9.079346656799316
    5. '5' → logprob: -9.204346656799316
    6. '7' → logprob: -9.829346656799316
    7. '30' → logprob: -11.704346656799316
    8. '6' → logprob: -12.079346656799316
    9. '40' → logprob: -12.954346656799316
    10. '15' → logprob: -13.454346656799316

Token 90: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006295174825936556
    2. '(input' → logprob: -7.875629425048828
    3. '('' → logprob: -8.750629425048828
    4. ' (' → logprob: -11.000629425048828
    5. '("' → logprob: -11.125629425048828
    6. '(
' → logprob: -11.125629425048828
    7. '<|end|>' → logprob: -11.250629425048828
    8. '()' → logprob: -11.500629425048828
    9. 'input' → logprob: -12.000629425048828
    10. ' ' → logprob: -12.375629425048828

Token 91: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3739855885505676
    2. '()' → logprob: -1.2489855289459229
    3. '('' → logprob: -4.498985767364502
    4. '())' → logprob: -4.748985767364502
    5. ')' → logprob: -6.123985767364502
    6. '("("' → logprob: -6.373985767364502
    7. '("")' → logprob: -7.623985767364502
    8. '("' → logprob: -7.623985767364502
    9. '(
' → logprob: -7.998985767364502
    10. '(""))' → logprob: -9.748985290527344

Token 92: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -3.128163257315464e-07
    2. ' print' → logprob: -15.875
    3. 'for' → logprob: -17.75
    4. '```' → logprob: -17.75
    5. '(print' → logprob: -18.0
    6. 'result' → logprob: -18.5
    7. 'pr' → logprob: -18.875
    8. '#print' → logprob: -18.875
    9. '
' → logprob: -19.0
    10. 'prin' → logprob: -19.125

Token 93: '(f' (ID: 1526)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.048590436577796936
    2. '(f' → logprob: -3.0485904216766357
    3. '(F' → logprob: -14.048590660095215
    4. '('' → logprob: -14.173590660095215
    5. '(
' → logprob: -14.798590660095215
    6. '(n' → logprob: -14.923590660095215
    7. '(

' → logprob: -15.048590660095215
    8. '((' → logprob: -15.673590660095215
    9. '("("' → logprob: -16.0485897064209
    10. '()' → logprob: -16.9235897064209

Token 94: 'ib' (ID: 526)
  Prédit: 'ib'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ib' → logprob: -0.003532605478540063
    2. 'b' → logprob: -6.753532409667969
    3. 'i' → logprob: -6.753532409667969
    4. '(' → logprob: -7.378532409667969
    5. 'fib' → logprob: -8.128532409667969
    6. '(n' → logprob: -8.503532409667969
    7. 'n' → logprob: -10.503532409667969
    8. '(i' → logprob: -11.128532409667969
    9. ')' → logprob: -11.628532409667969
    10. '(f' → logprob: -12.753532409667969

Token 95: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2519347369670868
    2. '(' → logprob: -1.5019347667694092
    3. '(
' → logprob: -12.501935005187988
    4. ')' → logprob: -13.751935005187988
    5. '(

' → logprob: -14.876935005187988
    6. '('' → logprob: -15.751935005187988
    7. ' (' → logprob: -16.126934051513672
    8. ')n' → logprob: -16.376934051513672
    9. ')(' → logprob: -16.751934051513672
    10. '((' → logprob: -17.626934051513672

Token 96: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6931490898132324
    2. '))' → logprob: -0.6931490898132324
    3. ')))' → logprob: -14.44314956665039
    4. ' )' → logprob: -14.69314956665039
    5. ')
' → logprob: -14.81814956665039
    6. '))
' → logprob: -15.06814956665039
    7. ' ))' → logprob: -15.69314956665039
    8. ')**' → logprob: -17.06814956665039
    9. '})' → logprob: -18.06814956665039
    10. ')}' → logprob: -18.06814956665039


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 94
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 80
Précision stricte (1ère position): 42.55%
Précision adaptée (1ère position): 44.68%
Précision (top 10): 85.11%
================================================================================
