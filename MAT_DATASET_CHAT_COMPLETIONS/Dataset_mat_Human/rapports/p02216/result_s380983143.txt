================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = list(map(int, input().split()))
min_a  = min(a)
sum_a  = sum(a)
rest = sum_a - n * min_a

def first():
    print("First")
    exit()

def second():
    print("Second")
    exit()

if n % 2 == 1:
    if sum_a % 2 == 0:second()
    if sum_a % 2 == 1:first()

if min_a % 2 == 1:first()

if rest % 2 == 1:first()
if rest % 2 == 0:second()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13287097215652466
    2. ')' → logprob: -2.13287091255188
    3. '()' → logprob: -5.382871150970459
    4. '())' → logprob: -7.382871150970459
    5. '(
' → logprob: -8.1328706741333
    6. '```' → logprob: -9.8828706741333
    7. '(

' → logprob: -10.2578706741333
    8. '('' → logprob: -10.3828706741333
    9. ''' → logprob: -10.6328706741333
    10. '(n' → logprob: -10.7578706741333

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7040315866470337
    2. 'if' → logprob: -1.4540315866470337
    3. 'for' → logprob: -2.329031467437744
    4. 's' → logprob: -2.454031467437744
    5. 'f' → logprob: -4.329031467437744
    6. ' ' → logprob: -4.454031467437744
    7. 'x' → logprob: -4.829031467437744
    8. ')' → logprob: -4.954031467437744
    9. 'a' → logprob: -4.954031467437744
    10. ''' → logprob: -5.079031467437744

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0034043090417981148
    2. '[a' → logprob: -6.503404140472412
    3. 'a' → logprob: -7.753404140472412
    4. '[i' → logprob: -7.878404140472412
    5. '+' → logprob: -8.25340461730957
    6. '[n' → logprob: -8.37840461730957
    7. '.' → logprob: -9.50340461730957
    8. '\[' → logprob: -9.50340461730957
    9. '[:]' → logprob: -9.50340461730957
    10. '=' → logprob: -9.62840461730957

Token 7: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.9402151703834534
    2. '[]' → logprob: -1.0652151107788086
    3. 'list' → logprob: -1.8152151107788086
    4. ' list' → logprob: -2.9402151107788086
    5. 'input' → logprob: -4.315215110778809
    6. ' [' → logprob: -4.315215110778809
    7. '[input' → logprob: -5.065215110778809
    8. '[' → logprob: -5.440215110778809
    9. '[int' → logprob: -5.690215110778809
    10. '0' → logprob: -5.690215110778809

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0023174879606813192
    2. '(a' → logprob: -6.377317428588867
    3. '()' → logprob: -8.252317428588867
    4. '(range' → logprob: -8.377317428588867
    5. '(input' → logprob: -9.627317428588867
    6. '(int' → logprob: -11.877317428588867
    7. '(
' → logprob: -12.252317428588867
    8. '(n' → logprob: -12.377317428588867
    9. 'a' → logprob: -12.377317428588867
    10. '(`' → logprob: -12.502317428588867

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.020255954936146736
    2. '(' → logprob: -4.145256042480469
    3. '(str' → logprob: -6.770256042480469
    4. '(input' → logprob: -7.020256042480469
    5. '(lambda' → logprob: -7.145256042480469
    6. '<int' → logprob: -7.770256042480469
    7. ')' → logprob: -8.520256042480469
    8. '[int' → logprob: -8.520256042480469
    9. 'int' → logprob: -8.645256042480469
    10. '```' → logprob: -9.020256042480469

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0046382686123251915
    2. '(' → logprob: -5.879638195037842
    3. '))' → logprob: -7.254638195037842
    4. ',input' → logprob: -7.379638195037842
    5. 'input' → logprob: -8.629638671875
    6. ')' → logprob: -8.754638671875
    7. '=input' → logprob: -9.629638671875
    8. '[input' → logprob: -11.379638671875
    9. '(user' → logprob: -11.879638671875
    10. ')))' → logprob: -12.004638671875

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.006735026836395264
    2. ' input' → logprob: -5.006734848022461
    3. '(input' → logprob: -10.881734848022461
    4. ',input' → logprob: -15.131734848022461
    5. ')' → logprob: -15.506734848022461
    6. '=input' → logprob: -15.631734848022461
    7. '	input' → logprob: -16.25673484802246
    8. '<input' → logprob: -17.25673484802246
    9. '_input' → logprob: -18.00673484802246
    10. '))' → logprob: -18.00673484802246

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.47280365228652954
    2. '())' → logprob: -1.4728035926818848
    3. '()' → logprob: -1.9728035926818848
    4. '().' → logprob: -5.097803592681885
    5. '(' → logprob: -7.347803592681885
    6. '()));' → logprob: -7.472803592681885
    7. ')' → logprob: -7.972803592681885
    8. '))' → logprob: -8.347804069519043
    9. '())))' → logprob: -8.597804069519043
    10. '()>' → logprob: -8.972804069519043

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000573167169932276
    2. 'strip' → logprob: -7.50057315826416
    3. 'rstrip' → logprob: -10.87557315826416
    4. ' split' → logprob: -13.87557315826416
    5. '(split' → logprob: -15.75057315826416
    6. 'spl' → logprob: -16.500574111938477
    7. ')' → logprob: -18.375574111938477
    8. 's' → logprob: -18.500574111938477
    9. 'sp' → logprob: -19.250574111938477
    10. 'replace' → logprob: -19.875574111938477

Token 14: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.8037156462669373
    2. '()))' → logprob: -0.8037156462669373
    3. ')' → logprob: -2.928715705871582
    4. '())' → logprob: -3.178715705871582
    5. '(' → logprob: -5.178715705871582
    6. '()' → logprob: -6.053715705871582
    7. '('' → logprob: -7.303715705871582
    8. ')))' → logprob: -7.803715705871582
    9. ''))' → logprob: -8.553715705871582
    10. '())))' → logprob: -9.053715705871582

Token 15: 'min' (ID: 1493)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6516948342323303
    2. 's' → logprob: -1.0266947746276855
    3. 'c' → logprob: -3.2766947746276855
    4. 'for' → logprob: -3.7766947746276855
    5. 'sum' → logprob: -4.2766947746276855
    6. 'b' → logprob: -4.6516947746276855
    7. 'count' → logprob: -4.6516947746276855
    8. 'm' → logprob: -4.7766947746276855
    9. 'result' → logprob: -5.0266947746276855
    10. 'd' → logprob: -6.5266947746276855

Token 16: '_a' (ID: 10852)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.024310749024152756
    2. '_val' → logprob: -3.899310827255249
    3. '_a' → logprob: -5.89931058883667
    4. '_)' → logprob: -7.64931058883667
    5. '(' → logprob: -8.274311065673828
    6. '_value' → logprob: -9.024311065673828
    7. '_v' → logprob: -10.024311065673828
    8. 'a' → logprob: -10.774311065673828
    9. '_len' → logprob: -10.899311065673828
    10. '(a' → logprob: -10.899311065673828

Token 17: ' ' (ID: 220)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0034909043461084366
    2. '[' → logprob: -6.628490924835205
    3. '(' → logprob: -7.503490924835205
    4. ' =' → logprob: -7.503490924835205
    5. '=' → logprob: -7.878490924835205
    6. '_val' → logprob: -8.378490447998047
    7. '_=' → logprob: -9.003490447998047
    8. ' _' → logprob: -9.878490447998047
    9. '_a' → logprob: -10.253490447998047
    10. '()' → logprob: -10.378490447998047

Token 18: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4647209644317627
    2. '=' → logprob: -1.2147209644317627
    3. '[' → logprob: -2.7147209644317627
    4. ' =' → logprob: -5.339720726013184
    5. ')' → logprob: -6.339720726013184
    6. '_=' → logprob: -6.589720726013184
    7. ' _' → logprob: -8.464720726013184
    8. '_)' → logprob: -9.839720726013184
    9. '_min' → logprob: -10.089720726013184
    10. '=_' → logprob: -10.089720726013184

Token 19: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.40060171484947205
    2. ' min' → logprob: -1.1506017446517944
    3. 'float' → logprob: -4.650601863861084
    4. ' float' → logprob: -6.025601863861084
    5. 'a' → logprob: -6.525601863861084
    6. ' a' → logprob: -9.650601387023926
    7. '10' → logprob: -10.150601387023926
    8. '[min' → logprob: -10.525601387023926
    9. 'inf' → logprob: -11.150601387023926
    10. '100' → logprob: -11.150601387023926

Token 20: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.5253259539604187
    2. '(' → logprob: -0.9003259539604187
    3. '(_' → logprob: -6.275325775146484
    4. '_a' → logprob: -9.775325775146484
    5. '(
' → logprob: -10.275325775146484
    6. '(min' → logprob: -10.525325775146484
    7. 'a' → logprob: -10.525325775146484
    8. '(n' → logprob: -10.775325775146484
    9. '(A' → logprob: -10.775325775146484
    10. '(_)' → logprob: -10.900325775146484

Token 21: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006527475197799504
    2. '))' → logprob: -8.000652313232422
    3. '[' → logprob: -8.500652313232422
    4. 'a' → logprob: -10.000652313232422
    5. ')
' → logprob: -11.125652313232422
    6. '()' → logprob: -11.125652313232422
    7. ' )' → logprob: -11.625652313232422
    8. ')))' → logprob: -12.000652313232422
    9. '(a' → logprob: -12.125652313232422
    10. '[a' → logprob: -12.375652313232422

Token 22: 'sum' (ID: 12298)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.4861748218536377
    2. ')' → logprob: -1.7361748218536377
    3. 'max' → logprob: -1.7361748218536377
    4. '_' → logprob: -2.1111748218536377
    5. '*' → logprob: -2.7361748218536377
    6. '\n' → logprob: -3.6111748218536377
    7. 'min' → logprob: -3.9861748218536377
    8. '_max' → logprob: -4.111174583435059
    9. '<|end|>' → logprob: -4.236174583435059
    10. '```' → logprob: -4.361174583435059

Token 23: '_a' (ID: 10852)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028081197291612625
    2. '_' → logprob: -3.778081178665161
    3. '(a' → logprob: -5.65308141708374
    4. '_a' → logprob: -7.40308141708374
    5. '(sum' → logprob: -8.028080940246582
    6. '(_)' → logprob: -8.903080940246582
    7. '_sum' → logprob: -9.278080940246582
    8. '(s' → logprob: -10.528080940246582
    9. 'a' → logprob: -10.653080940246582
    10. '(_' → logprob: -10.903080940246582

Token 24: ' ' (ID: 220)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8351761698722839
    2. ')' → logprob: -1.3351762294769287
    3. '_' → logprob: -1.8351762294769287
    4. '+' → logprob: -2.7101762294769287
    5. ' +' → logprob: -3.2101762294769287
    6. '<|end|>' → logprob: -3.9601762294769287
    7. ' ' → logprob: -5.58517599105835
    8. '[' → logprob: -5.71017599105835
    9. ' (' → logprob: -6.46017599105835
    10. '(a' → logprob: -6.58517599105835

Token 25: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6855639219284058
    2. '_' → logprob: -1.6855639219284058
    3. '+' → logprob: -2.0605640411376953
    4. ')' → logprob: -2.6855640411376953
    5. '<|end|>' → logprob: -2.9355640411376953
    6. ' +' → logprob: -3.9355640411376953
    7. '=' → logprob: -4.060564041137695
    8. '<|end|>' → logprob: -5.310564041137695
    9. ' =' → logprob: -5.560564041137695
    10. ' +=' → logprob: -5.935564041137695

Token 26: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.1813357174396515
    2. 'sum' → logprob: -1.806335687637329
    3. '0' → logprob: -6.556335926055908
    4. ' ' → logprob: -8.93133544921875
    5. '(sum' → logprob: -11.18133544921875
    6. ' max' → logprob: -12.30633544921875
    7. ' min' → logprob: -12.55633544921875
    8. '=sum' → logprob: -12.55633544921875
    9. '	sum' → logprob: -12.55633544921875
    10. 'max' → logprob: -13.68133544921875

Token 27: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.20202210545539856
    2. '(' → logprob: -1.7020220756530762
    3. '_a' → logprob: -8.202022552490234
    4. '(sum' → logprob: -8.827022552490234
    5. '(_' → logprob: -9.077022552490234
    6. '_' → logprob: -11.327022552490234
    7. 'a' → logprob: -11.452022552490234
    8. '(s' → logprob: -11.702022552490234
    9. ')' → logprob: -12.077022552490234
    10. '((' → logprob: -12.327022552490234

Token 28: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006731167086400092
    2. '-' → logprob: -7.500673294067383
    3. ' -' → logprob: -9.875673294067383
    4. ' )' → logprob: -10.750673294067383
    5. '))' → logprob: -11.250673294067383
    6. '-)' → logprob: -12.125673294067383
    7. '')' → logprob: -12.250673294067383
    8. '`)' → logprob: -12.375673294067383
    9. ')-' → logprob: -12.500673294067383
    10. ')
' → logprob: -12.500673294067383

Token 29: 'rest' (ID: 7134)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.8449563980102539
    2. '+' → logprob: -2.094956398010254
    3. '
' → logprob: -2.594956398010254
    4. '#' → logprob: -2.969956398010254
    5. 'if' → logprob: -3.094956398010254
    6. 'print' → logprob: -3.094956398010254
    7. '/' → logprob: -3.219956398010254
    8. 'n' → logprob: -3.344956398010254
    9. '=' → logprob: -3.719956398010254
    10. ',' → logprob: -3.969956398010254

Token 30: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029378514736890793
    2. '=' → logprob: -4.029378414154053
    3. '_' → logprob: -4.529378414154053
    4. '_a' → logprob: -8.029378890991211
    5. ' ' → logprob: -10.904378890991211
    6. 'a' → logprob: -11.654378890991211
    7. 's' → logprob: -12.779378890991211
    8. '_sum' → logprob: -12.779378890991211
    9. '=sum' → logprob: -12.779378890991211
    10. ')' → logprob: -13.029378890991211

Token 31: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.11523471027612686
    2. 'sum' → logprob: -2.240234613418579
    3. ' n' → logprob: -6.490234851837158
    4. ' ' → logprob: -7.740234851837158
    5. '(sum' → logprob: -8.740234375
    6. 'n' → logprob: -9.115234375
    7. ' max' → logprob: -9.740234375
    8. ' min' → logprob: -9.865234375
    9. ' (' → logprob: -11.490234375
    10. ' rest' → logprob: -11.740234375

Token 32: '_a' (ID: 10852)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7876975536346436
    2. '_a' → logprob: -0.7876975536346436
    3. '_' → logprob: -2.6626975536346436
    4. '(a' → logprob: -4.037697792053223
    5. '(_' → logprob: -6.787697792053223
    6. '_(' → logprob: -7.912697792053223
    7. 'a' → logprob: -7.912697792053223
    8. '(_)' → logprob: -8.287697792053223
    9. '(sum' → logprob: -8.412697792053223
    10. '(rest' → logprob: -9.162697792053223

Token 33: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.01300257071852684
    2. '-' → logprob: -4.388002395629883
    3. '<|end|>' → logprob: -8.138002395629883
    4. ' ' → logprob: -9.013002395629883
    5. ')' → logprob: -10.763002395629883
    6. '-min' → logprob: -10.888002395629883
    7. '-n' → logprob: -11.388002395629883
    8. ' -
' → logprob: -11.513002395629883
    9. '<|end|>' → logprob: -12.513002395629883
    10. ' ' → logprob: -12.763002395629883

Token 34: ' n' (ID: 297)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.07000679522752762
    2. ' min' → logprob: -2.695006847381592
    3. '(min' → logprob: -9.695006370544434
    4. 'n' → logprob: -12.945006370544434
    5. ' ' → logprob: -13.195006370544434
    6. ' (' → logprob: -13.820006370544434
    7. '	min' → logprob: -13.945006370544434
    8. ' n' → logprob: -13.945006370544434
    9. '[min' → logprob: -14.570006370544434
    10. 'mi' → logprob: -15.320006370544434

Token 35: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.6337271928787231
    2. '*' → logprob: -0.7587271928787231
    3. ' ' → logprob: -7.383727073669434
    4. '_' → logprob: -8.758727073669434
    5. '**' → logprob: -9.133727073669434
    6. 'min' → logprob: -9.258727073669434
    7. ')' → logprob: -10.133727073669434
    8. '<|end|>' → logprob: -11.258727073669434
    9. ' **' → logprob: -11.383727073669434
    10. '  ' → logprob: -12.133727073669434

Token 36: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.004078878089785576
    2. ' min' → logprob: -5.5040788650512695
    3. '(min' → logprob: -15.62907886505127
    4. ' ' → logprob: -16.754079818725586
    5. '[min' → logprob: -17.004079818725586
    6. '	min' → logprob: -17.004079818725586
    7. '```' → logprob: -17.504079818725586
    8. 'max' → logprob: -18.004079818725586
    9. '_min' → logprob: -18.254079818725586
    10. '  ' → logprob: -19.129079818725586

Token 37: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -1.4259644558478612e-05
    2. 'a' → logprob: -11.750014305114746
    3. '_' → logprob: -12.125014305114746
    4. '_o' → logprob: -16.25001335144043
    5. '_s' → logprob: -16.37501335144043
    6. ' _' → logprob: -16.37501335144043
    7. '```' → logprob: -16.50001335144043
    8. '​' → logprob: -16.62501335144043
    9. '_c' → logprob: -16.87501335144043
    10. '_ai' → logprob: -16.87501335144043

Token 38: '

' (ID: 279)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.118535041809082
    2. '\n' → logprob: -1.618535041809082
    3. '
' → logprob: -2.243535041809082
    4. '(' → logprob: -2.243535041809082
    5. '\' → logprob: -2.743535041809082
    6. '%' → logprob: -3.118535041809082
    7. '<|end|>' → logprob: -3.493535041809082
    8. '+' → logprob: -3.493535041809082
    9. '*' → logprob: -4.243535041809082
    10. ')' → logprob: -4.243535041809082

Token 39: 'def' (ID: 1314)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5686191320419312
    2. '%' → logprob: -1.3186191320419312
    3. '*' → logprob: -3.3186192512512207
    4. 'print' → logprob: -3.5686192512512207
    5. '<|end|>' → logprob: -3.5686192512512207
    6. '\' → logprob: -3.6936192512512207
    7. '
' → logprob: -4.318619251251221
    8. ')' → logprob: -5.068619251251221
    9. ' ' → logprob: -5.068619251251221
    10. ' 
' → logprob: -5.193619251251221

Token 40: ' first' (ID: 1577)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.229655459523201
    2. ' min' → logprob: -3.4796555042266846
    3. ' find' → logprob: -3.6046555042266846
    4. ' main' → logprob: -3.7296555042266846
    5. ' average' → logprob: -3.7296555042266846
    6. ' factorial' → logprob: -3.7296555042266846
    7. ' solve' → logprob: -4.4796552658081055
    8. ' calculate' → logprob: -4.4796552658081055
    9. ' rest' → logprob: -5.2296552658081055
    10. ' gcd' → logprob: -5.4796552658081055

Token 41: '():
' (ID: 8595)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.018437525257468224
    2. '(' → logprob: -4.893437385559082
    3. '_(' → logprob: -5.393437385559082
    4. '_a' → logprob: -6.518437385559082
    5. '_element' → logprob: -7.143437385559082
    6. '_occ' → logprob: -7.643437385559082
    7. '_diff' → logprob: -8.268437385559082
    8. '_factor' → logprob: -8.393437385559082
    9. '_div' → logprob: -8.393437385559082
    10. '(_' → logprob: -8.393437385559082

Token 42: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025167636573314667
    2. '    ' → logprob: -4.275167465209961
    3. ' ' → logprob: -5.525167465209961
    4. '(' → logprob: -5.775167465209961
    5. '    
' → logprob: -7.025167465209961
    6. ' 
' → logprob: -7.400167465209961
    7. ' return' → logprob: -7.650167465209961
    8. 'n' → logprob: -8.275167465209961
    9. '\' → logprob: -8.525167465209961
    10. '_' → logprob: -8.525167465209961

Token 43: ' print' (ID: 2123)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.1072206497192383
    2. ' for' → logprob: -2.3572206497192383
    3. 'r' → logprob: -2.8572206497192383
    4. ' i' → logprob: -2.8572206497192383
    5. '   ' → logprob: -3.2322206497192383
    6. 'n' → logprob: -3.3572206497192383
    7. ' a' → logprob: -3.4822206497192383
    8. ' ' → logprob: -3.4822206497192383
    9. '    ' → logprob: -3.4822206497192383
    10. ' if' → logprob: -3.4822206497192383

Token 44: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.293923556804657
    2. '(rest' → logprob: -1.4189236164093018
    3. '(a' → logprob: -5.168923377990723
    4. '(min' → logprob: -6.043923377990723
    5. '(sum' → logprob: -6.668923377990723
    6. '((' → logprob: -6.918923377990723
    7. '()' → logprob: -7.293923377990723
    8. '(max' → logprob: -7.918923377990723
    9. '(n' → logprob: -7.918923377990723
    10. '('' → logprob: -8.043923377990723

Token 45: 'First' (ID: 7127)
  Prédit: 'rest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rest' → logprob: -0.8671355843544006
    2. '0' → logprob: -1.9921355247497559
    3. '1' → logprob: -2.367135524749756
    4. 'min' → logprob: -2.492135524749756
    5. 'YES' → logprob: -2.742135524749756
    6. 'Yes' → logprob: -2.867135524749756
    7. 'Rest' → logprob: -3.992135524749756
    8. 'Hello' → logprob: -4.117135524749756
    9. '"' → logprob: -4.117135524749756
    10. 'a' → logprob: -4.992135524749756

Token 46: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1821954846382141
    2. '()' → logprob: -1.8071954250335693
    3. ')")' → logprob: -7.182195663452148
    4. '("' → logprob: -7.557195663452148
    5. ')' → logprob: -7.557195663452148
    6. '"' → logprob: -8.682195663452148
    7. '(' → logprob: -9.057195663452148
    8. '")
' → logprob: -9.682195663452148
    9. '\n' → logprob: -9.807195663452148
    10. '())' → logprob: -10.057195663452148

Token 47: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.20055782794952393
    2. '
' → logprob: -2.2005577087402344
    3. ' if' → logprob: -3.5755577087402344
    4. '()' → logprob: -4.075557708740234
    5. ')' → logprob: -5.200557708740234
    6. '<|end|>' → logprob: -5.200557708740234
    7. 'rest' → logprob: -5.450557708740234
    8. ' ' → logprob: -6.575557708740234
    9. '(' → logprob: -6.575557708740234
    10. '(rest' → logprob: -6.575557708740234

Token 48: ' exit' (ID: 10654)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2013319581747055
    2. ' if' → logprob: -1.9513319730758667
    3. '   ' → logprob: -4.076332092285156
    4. ' ' → logprob: -5.326332092285156
    5. 'print' → logprob: -5.451332092285156
    6. 'for' → logprob: -5.951332092285156
    7. 'rest' → logprob: -6.201332092285156
    8. 'import' → logprob: -6.326332092285156
    9. 'return' → logprob: -6.326332092285156
    10. ' 
' → logprob: -6.951332092285156

Token 49: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.026335718110203743
    2. '(' → logprob: -3.6513357162475586
    3. '()
' → logprob: -12.151335716247559
    4. '()`' → logprob: -12.276335716247559
    5. ' ()' → logprob: -12.276335716247559
    6. '())' → logprob: -13.026335716247559
    7. '()\' → logprob: -13.026335716247559
    8. '()

' → logprob: -13.151335716247559
    9. '`()' → logprob: -13.151335716247559
    10. '();' → logprob: -13.651335716247559

Token 50: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00599598279222846
    2. 'for' → logprob: -5.755995750427246
    3. 'rest' → logprob: -6.255995750427246
    4. '```' → logprob: -7.880995750427246
    5. 'n' → logprob: -8.880995750427246
    6. 'print' → logprob: -9.630995750427246
    7. 'diff' → logprob: -9.755995750427246
    8. 'def' → logprob: -9.880995750427246
    9. 'max' → logprob: -10.505995750427246
    10. 'cnt' → logprob: -10.755995750427246

Token 51: ' second' (ID: 3099)
  Prédit: ' second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' second' → logprob: -0.006504574324935675
    2. 'second' → logprob: -5.256504535675049
    3. ' main' → logprob: -7.381504535675049
    4. '_second' → logprob: -8.006505012512207
    5. ' def' → logprob: -8.631505012512207
    6. 'Second' → logprob: -9.756505012512207
    7. 'def' → logprob: -10.881505012512207
    8. '	second' → logprob: -11.131505012512207
    9. ' ' → logprob: -11.631505012512207
    10. ' rest' → logprob: -12.256505012512207

Token 52: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.0003981376066803932
    2. '()' → logprob: -7.8753981590271
    3. '():
' → logprob: -11.250397682189941
    4. ' ():' → logprob: -13.000397682189941
    5. '()>' → logprob: -13.500397682189941
    6. '()">' → logprob: -15.000397682189941
    7. ':' → logprob: -15.500397682189941
    8. '():
' → logprob: -15.625397682189941
    9. ' ()' → logprob: -15.875397682189941
    10. '():

' → logprob: -16.125398635864258

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14563941955566406
    2. 'print' → logprob: -2.020639419555664
    3. ' print' → logprob: -6.145639419555664
    4. 'if' → logprob: -7.270639419555664
    5. ' if' → logprob: -9.270639419555664
    6. '```' → logprob: -12.020639419555664
    7. '	print' → logprob: -12.395639419555664
    8. '       ' → logprob: -12.395639419555664
    9. '  ' → logprob: -12.645639419555664
    10. ' ' → logprob: -13.020639419555664

Token 54: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0026868253480643034
    2. ' print' → logprob: -6.627686977386475
    3. 'if' → logprob: -6.877686977386475
    4. '   ' → logprob: -8.627686500549316
    5. 'count' → logprob: -10.502686500549316
    6. 'for' → logprob: -10.627686500549316
    7. ' if' → logprob: -10.627686500549316
    8. 'import' → logprob: -11.627686500549316
    9. 'sum' → logprob: -11.627686500549316
    10. 's' → logprob: -11.877686500549316

Token 55: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0031840058509260416
    2. '(' → logprob: -5.753183841705322
    3. '"' → logprob: -13.12818431854248
    4. 'Second' → logprob: -13.12818431854248
    5. '('' → logprob: -13.50318431854248
    6. '(("' → logprob: -15.50318431854248
    7. '("("' → logprob: -15.62818431854248
    8. 'The' → logprob: -16.003183364868164
    9. ' ("' → logprob: -16.378183364868164
    10. '(S' → logprob: -17.003183364868164

Token 56: 'Second' (ID: 17422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2028665393590927
    2. '("' → logprob: -1.702866554260254
    3. 'Second' → logprob: -6.577866554260254
    4. '"No' → logprob: -10.577866554260254
    5. '(' → logprob: -10.702866554260254
    6. 'second' → logprob: -12.202866554260254
    7. '(second' → logprob: -13.702866554260254
    8. '```' → logprob: -13.702866554260254
    9. '")' → logprob: -14.327866554260254
    10. '"I' → logprob: -14.702866554260254

Token 57: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0024345240090042353
    2. ')' → logprob: -6.127434730529785
    3. '()' → logprob: -8.502434730529785
    4. ')")' → logprob: -10.627434730529785
    5. '")
' → logprob: -11.252434730529785
    6. '"' → logprob: -12.377434730529785
    7. '')' → logprob: -13.002434730529785
    8. '```' → logprob: -13.502434730529785
    9. '}")' → logprob: -15.002434730529785
    10. ')
' → logprob: -15.877434730529785

Token 58: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03899962827563286
    2. 'if' → logprob: -3.663999557495117
    3. '\n' → logprob: -5.038999557495117
    4. '

' → logprob: -7.038999557495117
    5. 'for' → logprob: -7.038999557495117
    6. 'rest' → logprob: -7.038999557495117
    7. '```' → logprob: -7.288999557495117
    8. '\' → logprob: -7.538999557495117
    9. '
' → logprob: -7.663999557495117
    10. 'n' → logprob: -7.788999557495117

Token 59: ' exit' (ID: 10654)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.07660146057605743
    2. 'rest' → logprob: -2.826601505279541
    3. '```' → logprob: -5.826601505279541
    4. 'n' → logprob: -6.076601505279541
    5. ' if' → logprob: -6.326601505279541
    6. 'exit' (adapté à ' exit') → logprob: -6.951601505279541
    7. '
' → logprob: -6.951601505279541
    8. '   ' → logprob: -6.951601505279541
    9. 'for' → logprob: -7.326601505279541
    10. 'import' → logprob: -7.701601505279541

Token 60: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0001495484757469967
    2. '(' → logprob: -8.875149726867676
    3. '()
' → logprob: -12.375149726867676
    4. '()

' → logprob: -13.250149726867676
    5. '()\' → logprob: -14.000149726867676
    6. '()`' → logprob: -14.375149726867676
    7. '()]' → logprob: -14.375149726867676
    8. ' ()' → logprob: -15.000149726867676
    9. '())' → logprob: -15.250149726867676
    10. '()<' → logprob: -15.625149726867676

Token 61: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0009531481191515923
    2. 'for' → logprob: -7.500953197479248
    3. 'rest' → logprob: -8.00095272064209
    4. '```' → logprob: -11.12595272064209
    5. 'n' → logprob: -11.25095272064209
    6. 'print' → logprob: -11.75095272064209
    7. ' if' → logprob: -11.87595272064209
    8. '_' → logprob: -12.75095272064209
    9. 'max' → logprob: -12.87595272064209
    10. '#' → logprob: -13.00095272064209

Token 62: ' n' (ID: 297)
  Prédit: ' rest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.002866804599761963
    2. 'rest' → logprob: -6.627866744995117
    3. ' n' → logprob: -6.877866744995117
    4. ' sum' → logprob: -9.002866744995117
    5. ' len' → logprob: -9.002866744995117
    6. '(rest' → logprob: -9.002866744995117
    7. ' ' → logprob: -10.127866744995117
    8. ' not' → logprob: -10.752866744995117
    9. ' min' → logprob: -10.752866744995117
    10. ' (' → logprob: -10.877866744995117

Token 63: ' %' (ID: 1851)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.24967433512210846
    2. '==' → logprob: -2.9996743202209473
    3. ' <=' → logprob: -3.1246743202209473
    4. ' ' → logprob: -3.2496743202209473
    5. ' <' → logprob: -3.2496743202209473
    6. ' %' → logprob: -3.8746743202209473
    7. ' >' → logprob: -4.249674320220947
    8. '%' → logprob: -4.749674320220947
    9. '<' → logprob: -5.999674320220947
    10. '>' → logprob: -6.749674320220947

Token 64: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.183501293184236e-05
    2. ' ' → logprob: -9.62507152557373
    3. '3' → logprob: -12.25007152557373
    4. '4' → logprob: -14.50007152557373
    5. '```' → logprob: -16.375072479248047
    6. '  ' → logprob: -16.625072479248047
    7. '   ' → logprob: -17.000072479248047
    8. '1' → logprob: -17.375072479248047
    9. 'n' → logprob: -17.500072479248047
    10. '%' → logprob: -17.625072479248047

Token 65: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.0802738870552275e-05
    2. '3' → logprob: -11.75001049041748
    3. ' ' → logprob: -14.37501049041748
    4. '0' → logprob: -14.62501049041748
    5. '4' → logprob: -14.75001049041748
    6. '1' → logprob: -14.87501049041748
    7. '(' → logprob: -15.62501049041748
    8. '```' → logprob: -15.62501049041748
    9. '   ' → logprob: -16.000011444091797
    10. '{' → logprob: -16.437511444091797

Token 66: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.20171502232551575
    2. '==' → logprob: -1.7017149925231934
    3. ' !=' → logprob: -9.326715469360352
    4. ':' → logprob: -9.701715469360352
    5. '=' → logprob: -10.201715469360352
    6. '0' → logprob: -10.326715469360352
    7. ' ' → logprob: -10.701715469360352
    8. '!=' → logprob: -11.201715469360352
    9. ' :' → logprob: -11.326715469360352
    10. ' =' → logprob: -11.451715469360352

Token 67: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.023402942344546318
    2. '1' → logprob: -3.7734029293060303
    3. ' ' → logprob: -8.77340316772461
    4. '```' → logprob: -13.46090316772461
    5. '==' → logprob: -15.89840316772461
    6. '   ' → logprob: -16.02340316772461
    7. '=' → logprob: -16.71090316772461
    8. ' ' → logprob: -16.71090316772461
    9. '  ' → logprob: -16.77340316772461
    10. ')' → logprob: -16.77340316772461

Token 68: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07895412296056747
    2. '1' → logprob: -2.5789542198181152
    3. ' ' → logprob: -9.703953742980957
    4. '```' → logprob: -13.203953742980957
    5. '   ' → logprob: -15.891453742980957
    6. ')' → logprob: -16.203954696655273
    7. 'n' → logprob: -16.453954696655273
    8. '۰' → logprob: -16.516454696655273
    9. '``' → logprob: -16.516454696655273
    10. '  ' → logprob: -16.828954696655273

Token 69: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002518031978979707
    2. ' :' → logprob: -8.625251770019531
    3. ':
' → logprob: -9.750251770019531
    4. '):' → logprob: -11.875251770019531
    5. ' and' → logprob: -12.625251770019531
    6. '>:' → logprob: -14.250251770019531
    7. ':first' → logprob: -14.250251770019531
    8. '():' → logprob: -14.375251770019531
    9. ':**' → logprob: -14.500251770019531
    10. ' :
' → logprob: -15.625251770019531

Token 70: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0446982383728027
    2. ' first' → logprob: -1.1696982383728027
    3. '   ' → logprob: -1.4196982383728027
    4. 'first' → logprob: -4.169698238372803
    5. ':
' → logprob: -4.419698238372803
    6. '
' → logprob: -4.419698238372803
    7. '(first' → logprob: -4.544698238372803
    8. '<|end|>' → logprob: -4.794698238372803
    9. '	first' → logprob: -5.044698238372803
    10. ':first' → logprob: -5.294698238372803

Token 71: ' if' (ID: 538)
  Prédit: 'first'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'first' → logprob: -0.002816528081893921
    2. ' first' → logprob: -5.877816677093506
    3. '   ' → logprob: -12.127816200256348
    4. '	first' → logprob: -13.002816200256348
    5. ':first' → logprob: -13.877816200256348
    6. '[first' → logprob: -14.127816200256348
    7. '
' → logprob: -14.252816200256348
    8. ' ' → logprob: -15.002816200256348
    9. 'First' → logprob: -15.377816200256348
    10. '(first' → logprob: -15.627816200256348

Token 72: ' sum' (ID: 4215)
  Prédit: ' rest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.05003596842288971
    2. 'rest' → logprob: -3.0500359535217285
    3. ' min' → logprob: -7.1750359535217285
    4. ' sum' → logprob: -8.675036430358887
    5. ' a' → logprob: -8.800036430358887
    6. '(rest' → logprob: -9.425036430358887
    7. ' n' → logprob: -9.675036430358887
    8. ' ' → logprob: -10.050036430358887
    9. 'min' → logprob: -10.675036430358887
    10. ' max' → logprob: -10.800036430358887

Token 73: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.015350556932389736
    2. '_' → logprob: -4.390350341796875
    3. '(rest' → logprob: -6.390350341796875
    4. '(' → logprob: -7.890350341796875
    5. '(a' → logprob: -8.390350341796875
    6. '_)' → logprob: -8.640350341796875
    7. '_rest' → logprob: -9.015350341796875
    8. '_(' → logprob: -9.515350341796875
    9. 'rest' → logprob: -9.640350341796875
    10. ')' → logprob: -10.265350341796875

Token 74: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.2632933557033539
    2. '>' → logprob: -2.3882932662963867
    3. ' >' → logprob: -2.5132932662963867
    4. ' %' → logprob: -2.8882932662963867
    5. ' ' → logprob: -6.763293266296387
    6. '<' → logprob: -7.263293266296387
    7. '>=' → logprob: -7.888293266296387
    8. ' <' → logprob: -8.138293266296387
    9. ' >=' → logprob: -8.513293266296387
    10. '!=' → logprob: -10.138293266296387

Token 75: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004064628388732672
    2. ' ' → logprob: -5.754064559936523
    3. 'n' → logprob: -7.254064559936523
    4. ' n' → logprob: -9.129064559936523
    5. '3' → logprob: -9.879064559936523
    6. '(n' → logprob: -12.254064559936523
    7. '4' → logprob: -12.879064559936523
    8. '   ' → logprob: -13.004064559936523
    9. '(' → logprob: -13.004064559936523
    10. '  ' → logprob: -13.129064559936523

Token 76: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00020592445798683912
    2. 'n' → logprob: -8.500205993652344
    3. ' ' → logprob: -14.000205993652344
    4. '3' → logprob: -14.500205993652344
    5. '4' → logprob: -15.000205993652344
    6. '(n' → logprob: -15.625205993652344
    7. '   ' → logprob: -16.000205993652344
    8. '
' → logprob: -16.375205993652344
    9. ' n' → logprob: -16.375205993652344
    10. '

' → logprob: -16.500205993652344

Token 77: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.06938939541578293
    2. ' ==' → logprob: -2.9443893432617188
    3. '!=' → logprob: -4.694389343261719
    4. ':' → logprob: -5.944389343261719
    5. ' !=' → logprob: -6.444389343261719
    6. '=' → logprob: -7.569389343261719
    7. ')==' → logprob: -8.819389343261719
    8. ')' → logprob: -9.069389343261719
    9. '1' → logprob: -9.194389343261719
    10. '()==' → logprob: -10.069389343261719

Token 78: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03493882715702057
    2. '0' → logprob: -3.4099388122558594
    3. ' ' → logprob: -6.659938812255859
    4. 'n' → logprob: -12.53493881225586
    5. '```' → logprob: -13.34743881225586
    6. '

' → logprob: -13.78493881225586
    7. ' ' → logprob: -14.84743881225586
    8. '   ' → logprob: -14.97243881225586
    9. ')' → logprob: -15.28493881225586
    10. ' n' → logprob: -15.47243881225586

Token 79: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.17977789044380188
    2. '0' → logprob: -1.8047778606414795
    3. ' ' → logprob: -11.054778099060059
    4. 'n' → logprob: -11.742278099060059
    5. '
' → logprob: -13.117278099060059
    6. '```' → logprob: -13.617278099060059
    7. '

' → logprob: -13.742278099060059
    8. '' → logprob: -14.679778099060059
    9. '
' → logprob: -15.179778099060059
    10. '[' → logprob: -15.679778099060059

Token 80: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005577972042374313
    2. ':
' → logprob: -7.500557899475098
    3. '):' → logprob: -13.125557899475098
    4. ' :' → logprob: -13.875557899475098
    5. '   ' → logprob: -15.000557899475098
    6. '():' → logprob: -15.375557899475098
    7. ' and' → logprob: -15.500557899475098
    8. ':first' → logprob: -15.500557899475098
    9. ':

' → logprob: -15.625557899475098
    10. '       ' → logprob: -15.875557899475098

Token 81: 'second' (ID: 13901)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1322670876979828
    2. '\n' → logprob: -2.5072669982910156
    3. '       ' → logprob: -3.8822669982910156
    4. '   ' → logprob: -5.257266998291016
    5. '    
' → logprob: -5.257266998291016
    6. ' 
' → logprob: -5.882266998291016
    7. ' ' → logprob: -6.507266998291016
    8. '\' → logprob: -6.507266998291016
    9. '<|end|>' → logprob: -6.507266998291016
    10. '  
' → logprob: -7.257266998291016

Token 82: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07900381088256836
    2. '(' → logprob: -2.5790038108825684
    3. '()
' → logprob: -9.454004287719727
    4. '(
' → logprob: -11.454004287719727
    5. '(

' → logprob: -12.079004287719727
    6. '()

' → logprob: -12.204004287719727
    7. '()(' → logprob: -12.454004287719727
    8. '()\' → logprob: -13.454004287719727
    9. '()<' → logprob: -13.579004287719727
    10. ' ()' → logprob: -13.579004287719727

Token 83: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.03875447437167168
    2. ' else' → logprob: -4.038754463195801
    3. '()' → logprob: -4.663754463195801
    4. '<|end|>' → logprob: -5.288754463195801
    5. '
' → logprob: -6.788754463195801
    6. 'n' → logprob: -6.788754463195801
    7. 'elif' → logprob: -7.163754463195801
    8. ')' → logprob: -7.163754463195801
    9. '(' → logprob: -7.538754463195801
    10. '()
' → logprob: -8.0387544631958

Token 84: ' if' (ID: 538)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0299574825912714
    2. ' else' → logprob: -3.5299575328826904
    3. '<|end|>' → logprob: -9.77995777130127
    4. 'elif' → logprob: -10.52995777130127
    5. '
' → logprob: -10.65495777130127
    6. 'n' → logprob: -11.15495777130127
    7. '()' → logprob: -11.27995777130127
    8. 'e' → logprob: -11.40495777130127
    9. 'first' → logprob: -11.52995777130127
    10. 'elser' → logprob: -11.65495777130127

Token 85: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.007668610196560621
    2. 'sum' → logprob: -5.132668495178223
    3. ' rest' → logprob: -6.632668495178223
    4. ' ' → logprob: -8.632668495178223
    5. ' n' → logprob: -10.007668495178223
    6. ' not' → logprob: -10.007668495178223
    7. '(sum' → logprob: -10.132668495178223
    8. ' a' → logprob: -10.632668495178223
    9. '  ' → logprob: -11.007668495178223
    10. 'rest' → logprob: -11.007668495178223

Token 86: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.001711709308438003
    2. '_' → logprob: -6.626711845397949
    3. '%' → logprob: -8.00171184539795
    4. ' _' → logprob: -10.62671184539795
    5. ')' → logprob: -12.00171184539795
    6. 'a' → logprob: -12.12671184539795
    7. ' %' → logprob: -12.37671184539795
    8. ' ' → logprob: -12.75171184539795
    9. '   ' → logprob: -13.25171184539795
    10. '```' → logprob: -13.87671184539795

Token 87: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.3870159387588501
    2. ' %' → logprob: -1.13701593875885
    3. ' ' → logprob: -8.887016296386719
    4. '```' → logprob: -14.012016296386719
    5. '1' → logprob: -14.074516296386719
    6. ' ' → logprob: -14.637016296386719
    7. ')' → logprob: -14.637016296386719
    8. '>' → logprob: -14.699516296386719
    9. '2' → logprob: -15.262016296386719
    10. '`' → logprob: -15.324516296386719

Token 88: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.4302395284175873
    2. ' ' → logprob: -1.0552395582199097
    3. '1' → logprob: -6.555239677429199
    4. '```' → logprob: -10.8677396774292
    5. '=' → logprob: -11.1802396774292
    6. '==' → logprob: -11.6177396774292
    7. '   ' → logprob: -11.8052396774292
    8. '.' → logprob: -12.2427396774292
    9. '  ' → logprob: -12.4302396774292
    10. ')' → logprob: -12.4927396774292

Token 89: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.012975392863154411
    2. '1' → logprob: -4.637975215911865
    3. ' ' → logprob: -5.762975215911865
    4. '```' → logprob: -10.512975692749023
    5. '   ' → logprob: -11.950475692749023
    6. '==' → logprob: -11.950475692749023
    7. '=' → logprob: -12.700475692749023
    8. '  ' → logprob: -12.825475692749023
    9. '<|end|>' → logprob: -13.137975692749023
    10. ')' → logprob: -13.387975692749023

Token 90: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.455188125371933
    2. '==' → logprob: -1.0801881551742554
    3. ' !=' → logprob: -4.330188274383545
    4. ' ' → logprob: -5.080188274383545
    5. '!=' → logprob: -5.080188274383545
    6. '1' → logprob: -7.830188274383545
    7. ')' → logprob: -10.080187797546387
    8. '=' → logprob: -10.330187797546387
    9. ':' → logprob: -10.455187797546387
    10. '```' → logprob: -11.455187797546387

Token 91: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005679668392986059
    2. ' ' → logprob: -5.255679607391357
    3. '0' → logprob: -7.755679607391357
    4. '   ' → logprob: -11.755680084228516
    5. '```' → logprob: -13.818180084228516
    6. 'n' → logprob: -14.005680084228516
    7. ' ' → logprob: -14.255680084228516
    8. '=' → logprob: -14.443180084228516
    9. '
' → logprob: -14.943180084228516
    10. '!=' → logprob: -15.005680084228516

Token 92: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00033081689616665244
    2. ' ' → logprob: -8.500330924987793
    3. '0' → logprob: -9.000330924987793
    4. '```' → logprob: -13.937830924987793
    5. '   ' → logprob: -15.000330924987793
    6. '!' → logprob: -15.812830924987793
    7. 'n' → logprob: -15.812830924987793
    8. 'else' → logprob: -15.937830924987793
    9. '``' → logprob: -15.937830924987793
    10. '!=' → logprob: -16.000329971313477

Token 93: ':first' (ID: 120518)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.022772956639528275
    2. '():' → logprob: -3.897773027420044
    3. ':first' → logprob: -6.147772789001465
    4. ' :' → logprob: -10.147772789001465
    5. '   ' → logprob: -11.147772789001465
    6. '()' → logprob: -11.397772789001465
    7. ':
' → logprob: -12.272772789001465
    8. ' ():' → logprob: -12.272772789001465
    9. ':def' → logprob: -12.897772789001465
    10. ':f' → logprob: -13.147772789001465

Token 94: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005927092279307544
    2. '(' → logprob: -7.5005927085876465
    3. '()
' → logprob: -10.250593185424805
    4. '()

' → logprob: -13.000593185424805
    5. '())' → logprob: -15.000593185424805
    6. '()`' → logprob: -15.375593185424805
    7. '(

' → logprob: -15.625593185424805
    8. ' ()' → logprob: -15.625593185424805
    9. '()]' → logprob: -15.625593185424805
    10. '()\' → logprob: -15.625593185424805

Token 95: 'if' (ID: 366)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.46368491649627686
    2. '
' → logprob: -1.5886849164962769
    3. 'elif' → logprob: -2.0886850357055664
    4. '<|end|>' → logprob: -3.8386850357055664
    5. ' else' → logprob: -4.463685035705566
    6. '\n' → logprob: -5.463685035705566
    7. ' elif' → logprob: -6.588685035705566
    8. 'n' → logprob: -6.588685035705566
    9. '  
' → logprob: -7.463685035705566
    10. ' 
' → logprob: -7.963685035705566

Token 96: ' min' (ID: 1349)
  Prédit: ' rest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.1585957407951355
    2. 'rest' → logprob: -2.7835958003997803
    3. ' sum' → logprob: -3.4085958003997803
    4. ' n' → logprob: -3.5335958003997803
    5. ' min' → logprob: -4.283595561981201
    6. ' ' → logprob: -5.783595561981201
    7. 'sum' → logprob: -6.408595561981201
    8. 'n' → logprob: -6.658595561981201
    9. ' a' → logprob: -7.033595561981201
    10. 'min' → logprob: -7.783595561981201

Token 97: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -2.8087270038668066e-05
    2. '_' → logprob: -10.875027656555176
    3. '(a' → logprob: -12.750027656555176
    4. '(_' → logprob: -13.500027656555176
    5. 'a' → logprob: -13.625027656555176
    6. '%' → logprob: -13.625027656555176
    7. ' _' → logprob: -14.000027656555176
    8. '==' → logprob: -14.375027656555176
    9. '_b' → logprob: -15.875027656555176
    10. '```' → logprob: -16.000028610229492

Token 98: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.9586403965950012
    2. ' ==' → logprob: -1.4586403369903564
    3. '>' → logprob: -2.4586403369903564
    4. '==' → logprob: -2.5836403369903564
    5. ' %' → logprob: -2.7086403369903564
    6. '%' → logprob: -2.9586403369903564
    7. ' >=' → logprob: -2.9586403369903564
    8. ' <' → logprob: -3.8336403369903564
    9. '>=' → logprob: -4.4586405754089355
    10. ' ' → logprob: -4.5836405754089355

Token 99: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.048613592982292175
    2. ' ' → logprob: -3.0486135482788086
    3. '3' → logprob: -11.423613548278809
    4. '4' → logprob: -11.923613548278809
    5. '1' → logprob: -12.673613548278809
    6. '  ' → logprob: -14.048613548278809
    7. '```' → logprob: -14.298613548278809
    8. ')' → logprob: -14.736113548278809
    9. '   ' → logprob: -14.736113548278809
    10. '<|end|>' → logprob: -14.986113548278809

Token 100: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0003625177196227014
    2. ' ' → logprob: -8.000362396240234
    3. '3' → logprob: -11.250362396240234
    4. '1' → logprob: -12.375362396240234
    5. '4' → logprob: -13.000362396240234
    6. 'n' → logprob: -13.125362396240234
    7. '```' → logprob: -13.375362396240234
    8. '   ' → logprob: -13.875362396240234
    9. '  ' → logprob: -14.437862396240234
    10. '[' → logprob: -14.875362396240234

Token 101: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.038149937987327576
    2. ' ==' → logprob: -3.288149833679199
    3. '0' → logprob: -10.0381498336792
    4. '1' → logprob: -10.2881498336792
    5. '=' → logprob: -11.7881498336792
    6. '!=' → logprob: -11.9131498336792
    7. '==
' → logprob: -12.0381498336792
    8. '```' → logprob: -13.0381498336792
    9. ' ' → logprob: -13.1631498336792
    10. ':' → logprob: -13.2881498336792

Token 102: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14722420275211334
    2. '1' → logprob: -2.022224187850952
    3. ' ' → logprob: -5.397224426269531
    4. '==' → logprob: -13.334724426269531
    5. 'n' → logprob: -13.647224426269531
    6. '=' → logprob: -14.272224426269531
    7. '```' → logprob: -14.334724426269531
    8. '   ' → logprob: -14.584724426269531
    9. ' ' → logprob: -14.897224426269531
    10. '[' → logprob: -15.147224426269531

Token 103: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.17980287969112396
    2. '1' → logprob: -1.8048028945922852
    3. ' ' → logprob: -9.929802894592285
    4. '```' → logprob: -13.117302894592285
    5. '==' → logprob: -13.242302894592285
    6. '2' → logprob: -14.117302894592285
    7. '=' → logprob: -14.742302894592285
    8. 'n' → logprob: -14.804802894592285
    9. '[' → logprob: -15.117302894592285
    10. ' ==' → logprob: -15.242302894592285

Token 104: ':first' (ID: 120518)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5774545073509216
    2. ':first' → logprob: -0.8274545073509216
    3. ':
' → logprob: -6.577454566955566
    4. '   ' → logprob: -9.952454566955566
    5. ' :' → logprob: -10.202454566955566
    6. '[first' → logprob: -11.827454566955566
    7. 'first' → logprob: -12.202454566955566
    8. '=' → logprob: -12.327454566955566
    9. '(first' → logprob: -12.327454566955566
    10. 'second' → logprob: -13.077454566955566

Token 105: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -8.542423165636137e-05
    2. '(' → logprob: -9.875085830688477
    3. '()
' → logprob: -10.375085830688477
    4. '()

' → logprob: -13.250085830688477
    5. '())' → logprob: -15.750085830688477
    6. '()`' → logprob: -15.875085830688477
    7. ' ()' → logprob: -16.000085830688477
    8. '()\' → logprob: -16.125085830688477
    9. '()]' → logprob: -16.375085830688477
    10. '();' → logprob: -16.500085830688477

Token 106: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.24760659039020538
    2. 'second' → logprob: -1.622606635093689
    3. 'else' → logprob: -4.6226067543029785
    4. 'rest' → logprob: -4.7476067543029785
    5. 'print' → logprob: -5.9976067543029785
    6. 'elif' → logprob: -7.6226067543029785
    7. 'for' → logprob: -8.74760627746582
    8. 'first' → logprob: -8.99760627746582
    9. '```' → logprob: -9.49760627746582
    10. '#' → logprob: -10.87260627746582

Token 107: ' rest' (ID: 2867)
  Prédit: ' rest'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.10255225002765656
    2. 'rest' → logprob: -2.3525521755218506
    3. ' n' → logprob: -7.35255241394043
    4. '(rest' → logprob: -7.47755241394043
    5. ' min' → logprob: -7.97755241394043
    6. ' ' → logprob: -8.72755241394043
    7. ' sum' → logprob: -8.85255241394043
    8. ' (' → logprob: -8.85255241394043
    9. ' a' → logprob: -8.97755241394043
    10. 'n' → logprob: -9.47755241394043

Token 108: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.2690598666667938
    2. '%' → logprob: -2.269059896469116
    3. ' ==' → logprob: -2.644059896469116
    4. '==' → logprob: -3.644059896469116
    5. ' >' → logprob: -4.144059658050537
    6. '>' → logprob: -4.144059658050537
    7. ' !=' → logprob: -6.269059658050537
    8. ' ' → logprob: -7.269059658050537
    9. '!=' → logprob: -7.644059658050537
    10. ' <' → logprob: -8.769060134887695

Token 109: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3485511243343353
    2. '2' → logprob: -1.2235511541366577
    3. '4' → logprob: -10.473550796508789
    4. '3' → logprob: -10.598550796508789
    5. ' n' → logprob: -11.098550796508789
    6. 'n' → logprob: -11.848550796508789
    7. '1' → logprob: -11.911050796508789
    8. ' (' → logprob: -12.598550796508789
    9. '(' → logprob: -12.723550796508789
    10. '  ' → logprob: -13.411050796508789

Token 110: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0011303325882181525
    2. ' ' → logprob: -6.876130104064941
    3. '1' → logprob: -10.001130104064941
    4. 'n' → logprob: -11.251130104064941
    5. '3' → logprob: -11.376130104064941
    6. '4' → logprob: -11.626130104064941
    7. '0' → logprob: -11.751130104064941
    8. '```' → logprob: -13.501130104064941
    9. '   ' → logprob: -14.188630104064941
    10. '(' → logprob: -14.251130104064941

Token 111: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.024810809642076492
    2. ' ==' → logprob: -3.774810791015625
    3. '=' → logprob: -6.649810791015625
    4. '0' → logprob: -9.274810791015625
    5. '1' → logprob: -9.774810791015625
    6. '!=' → logprob: -10.149810791015625
    7. ':' → logprob: -10.649810791015625
    8. '==
' → logprob: -11.024810791015625
    9. '()==' → logprob: -12.024810791015625
    10. ' ' → logprob: -12.149810791015625

Token 112: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.40719074010849
    2. '0' → logprob: -1.1571907997131348
    3. ' ' → logprob: -3.9071907997131348
    4. '=' → logprob: -12.282190322875977
    5. ' ' → logprob: -12.844690322875977
    6. '==' → logprob: -13.344690322875977
    7. '```' → logprob: -13.532190322875977
    8. '   ' → logprob: -14.094690322875977
    9. 'n' → logprob: -14.469690322875977
    10. '[' → logprob: -14.719690322875977

Token 113: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.47412702441215515
    2. '0' → logprob: -0.9741270542144775
    3. ' ' → logprob: -10.224126815795898
    4. '==' → logprob: -13.099126815795898
    5. '=' → logprob: -13.161626815795898
    6. '```' → logprob: -13.599126815795898
    7. 'n' → logprob: -13.724126815795898
    8. 'o' → logprob: -14.411626815795898
    9. '{' → logprob: -15.161626815795898
    10. '[' → logprob: -15.349126815795898

Token 114: ':first' (ID: 120518)
  Prédit: ':first'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':first' → logprob: -0.10031256079673767
    2. ':' → logprob: -2.3503124713897705
    3. ':
' → logprob: -9.350312232971191
    4. 'first' → logprob: -12.225312232971191
    5. '(first' → logprob: -12.725312232971191
    6. ' :' → logprob: -12.975312232971191
    7. '   ' → logprob: -13.350312232971191
    8. ':def' → logprob: -13.350312232971191
    9. ':f' → logprob: -13.475312232971191
    10. '[first' → logprob: -13.975312232971191

Token 115: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00012725738633889705
    2. '()
' → logprob: -9.500126838684082
    3. '(' → logprob: -10.000126838684082
    4. '()

' → logprob: -12.125126838684082
    5. '()`' → logprob: -14.375126838684082
    6. ' ()' → logprob: -15.625126838684082
    7. '()
' → logprob: -15.875126838684082
    8. '()\' → logprob: -16.0001277923584
    9. '()]' → logprob: -16.5001277923584
    10. '():' → logprob: -16.7501277923584

Token 116: 'if' (ID: 366)
  Prédit: 'second'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'second' → logprob: -0.000454506283858791
    2. 'else' → logprob: -7.750454425811768
    3. 'rest' → logprob: -11.500454902648926
    4. 'if' → logprob: -12.125454902648926
    5. 'print' → logprob: -12.750454902648926
    6. ' second' → logprob: -13.125454902648926
    7. 'se' → logprob: -14.375454902648926
    8. '	second' → logprob: -14.750454902648926
    9. '```' → logprob: -14.875454902648926
    10. '
' → logprob: -14.875454902648926

Token 117: ' rest' (ID: 2867)
  Prédit: ' rest'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rest' → logprob: -0.061469078063964844
    2. 'rest' → logprob: -3.436469078063965
    3. ' min' → logprob: -4.561469078063965
    4. ' n' → logprob: -4.686469078063965
    5. ' sum' → logprob: -5.186469078063965
    6. ' ' → logprob: -7.311469078063965
    7. 'n' → logprob: -8.061469078063965
    8. ' (' → logprob: -8.061469078063965
    9. ' a' → logprob: -8.436469078063965
    10. 'sum' → logprob: -8.561469078063965

Token 118: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.24040764570236206
    2. '%' → logprob: -2.115407705307007
    3. ' ==' → logprob: -2.615407705307007
    4. '==' → logprob: -3.990407705307007
    5. ' ' → logprob: -6.740407466888428
    6. '2' → logprob: -9.740407943725586
    7. ' ' → logprob: -10.240407943725586
    8. '>' → logprob: -10.240407943725586
    9. ' >' → logprob: -10.240407943725586
    10. '=' → logprob: -10.615407943725586

Token 119: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.5764347910881042
    2. ' ' → logprob: -0.8264347910881042
    3. '0' → logprob: -7.70143461227417
    4. '=' → logprob: -12.326435089111328
    5. '  ' → logprob: -12.388935089111328
    6. 'n' → logprob: -12.638935089111328
    7. '10' → logprob: -12.638935089111328
    8. '   ' → logprob: -13.076435089111328
    9. '1' → logprob: -13.263935089111328
    10. '```' → logprob: -13.388935089111328

Token 120: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.001216186792589724
    2. '0' → logprob: -7.251216411590576
    3. ' ' → logprob: -7.626216411590576
    4. '1' → logprob: -11.501215934753418
    5. '%' → logprob: -13.438715934753418
    6. '4' → logprob: -13.876215934753418
    7. '```' → logprob: -14.063715934753418
    8. '=' → logprob: -14.626215934753418
    9. 'n' → logprob: -14.751215934753418
    10. '   ' → logprob: -14.813715934753418

Token 121: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.11305879801511765
    2. '==' → logprob: -2.2380588054656982
    3. '0' → logprob: -9.113059043884277
    4. ' ' → logprob: -9.238059043884277
    5. '=' → logprob: -11.238059043884277
    6. ' !=' → logprob: -11.738059043884277
    7. ' =' → logprob: -13.488059043884277
    8. '```' → logprob: -13.488059043884277
    9. ')' → logprob: -13.988059043884277
    10. '!=' → logprob: -14.363059043884277

Token 122: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004019521293230355
    2. ' ' → logprob: -7.875401973724365
    3. '1' → logprob: -10.875401496887207
    4. '   ' → logprob: -14.125401496887207
    5. 'second' → logprob: -14.187901496887207
    6. '=' → logprob: -15.250401496887207
    7. 'Second' → logprob: -15.500401496887207
    8. ' ' → logprob: -15.625401496887207
    9. ' second' → logprob: -15.875401496887207
    10. '```' → logprob: -15.875401496887207

Token 123: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.097437315271236e-05
    2. ' ' → logprob: -10.25005054473877
    3. '1' → logprob: -11.12505054473877
    4. '=' → logprob: -15.50005054473877
    5. '   ' → logprob: -15.87505054473877
    6. '```' → logprob: -15.93755054473877
    7. '۰' → logprob: -16.562551498413086
    8. 'o' → logprob: -17.312551498413086
    9. 'second' → logprob: -17.437551498413086
    10. ')' → logprob: -17.562551498413086

Token 124: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00016480287013109773
    2. ':
' → logprob: -8.750164985656738
    3. ':

' → logprob: -12.875164985656738
    4. ':first' → logprob: -13.625164985656738
    5. ':def' → logprob: -14.000164985656738
    6. '   ' → logprob: -14.625164985656738
    7. '(second' → logprob: -14.875164985656738
    8. 'second' → logprob: -15.125164985656738
    9. ' :' → logprob: -16.000164031982422
    10. '	second' → logprob: -16.375164031982422

Token 125: 'second' (ID: 13901)
  Prédit: 'second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'second' → logprob: -5.848420551046729e-05
    2. ' second' → logprob: -9.7500581741333
    3. '	second' → logprob: -16.125059127807617
    4. '(second' → logprob: -17.500059127807617
    5. '   ' → logprob: -17.750059127807617
    6. '.second' → logprob: -18.375059127807617
    7. 'first' → logprob: -19.000059127807617
    8. 'Second' → logprob: -19.250059127807617
    9. '_second' → logprob: -20.500059127807617
    10. ' ' → logprob: -20.625059127807617

Token 126: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.6240566083070007e-06
    2. '()
' → logprob: -14.500001907348633
    3. '()`' → logprob: -15.125001907348633
    4. '(' → logprob: -15.250001907348633
    5. ' ()' → logprob: -15.375001907348633
    6. '())' → logprob: -16.375001907348633
    7. '()]' → logprob: -16.375001907348633
    8. '();' → logprob: -17.125001907348633
    9. '()

' → logprob: -17.250001907348633
    10. '()\' → logprob: -17.250001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 124
Tokens correctement prédits (1ère position, stricte): 42
Tokens correctement prédits (1ère position, avec adaptation): 43
Tokens correctement prédits (top 10): 99
Précision stricte (1ère position): 33.87%
Précision adaptée (1ère position): 34.68%
Précision (top 10): 79.84%
================================================================================
