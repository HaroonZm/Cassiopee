================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:16:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
S = set(input().split())
q = int(input())
T = set(input().split())
print(len(S&T))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11869344860315323
    2. ')' → logprob: -2.2436933517456055
    3. '()' → logprob: -5.3686933517456055
    4. '())' → logprob: -7.4936933517456055
    5. '(
' → logprob: -8.243693351745605
    6. '```' → logprob: -9.993693351745605
    7. '(

' → logprob: -10.368693351745605
    8. '('' → logprob: -10.493693351745605
    9. ''' → logprob: -10.618693351745605
    10. '(n' → logprob: -10.868693351745605

Token 5: 'S' (ID: 50)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7040315866470337
    2. 'if' → logprob: -1.4540315866470337
    3. 'for' → logprob: -2.329031467437744
    4. 's' → logprob: -2.454031467437744
    5. 'f' → logprob: -4.329031467437744
    6. ' ' → logprob: -4.454031467437744
    7. 'x' → logprob: -4.829031467437744
    8. ')' → logprob: -4.954031467437744
    9. 'a' → logprob: -4.954031467437744
    10. ''' → logprob: -5.079031467437744

Token 6: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.19768550992012024
    2. '[' → logprob: -2.072685480117798
    3. '=' → logprob: -3.072685480117798
    4. ' =' → logprob: -5.447685718536377
    5. 't' → logprob: -7.447685718536377
    6. 'um' → logprob: -8.197685241699219
    7. ')' → logprob: -8.322685241699219
    8. '[i' → logprob: -8.322685241699219
    9. 'u' → logprob: -8.697685241699219
    10. '(' → logprob: -8.697685241699219

Token 7: ' set' (ID: 920)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6949172616004944
    2. ' input' → logprob: -0.6949172616004944
    3. '"' → logprob: -7.69491720199585
    4. '""' → logprob: -7.94491720199585
    5. ' "' → logprob: -8.444917678833008
    6. ' []' → logprob: -8.819917678833008
    7. ' ' → logprob: -9.069917678833008
    8. ''' → logprob: -9.319917678833008
    9. '(input' → logprob: -9.569917678833008
    10. '[input' → logprob: -9.944917678833008

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0383581705391407
    2. '()' → logprob: -3.288358211517334
    3. '(S' → logprob: -10.288357734680176
    4. '(range' → logprob: -10.288357734680176
    5. '([' → logprob: -10.538357734680176
    6. ' (' → logprob: -10.663357734680176
    7. '((' → logprob: -10.663357734680176
    8. '())' → logprob: -10.788357734680176
    9. '("("' → logprob: -10.788357734680176
    10. '([]' → logprob: -11.038357734680176

Token 9: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.4772284924983978
    2. '()' → logprob: -0.9772285223007202
    3. '(' → logprob: -6.22722864151001
    4. '().' → logprob: -7.72722864151001
    5. '()))' → logprob: -7.97722864151001
    6. ')' → logprob: -8.352228164672852
    7. ' ())' → logprob: -9.852228164672852
    8. '());' → logprob: -10.602228164672852
    9. '('' → logprob: -11.352228164672852
    10. '();)' → logprob: -11.602228164672852

Token 10: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.01819828897714615
    2. 'strip' → logprob: -4.018198490142822
    3. 'rstrip' → logprob: -10.643198013305664
    4. ' split' → logprob: -11.143198013305664
    5. ')' → logprob: -11.768198013305664
    6. 'spl' → logprob: -14.393198013305664
    7. ' strip' → logprob: -14.518198013305664
    8. 'replace' → logprob: -14.768198013305664
    9. '(split' → logprob: -15.143198013305664
    10. '```' → logprob: -15.768198013305664

Token 11: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.01737702637910843
    2. '()))' → logprob: -4.767376899719238
    3. ')' → logprob: -5.142376899719238
    4. '()' → logprob: -6.017376899719238
    5. '))' → logprob: -7.892376899719238
    6. '('' → logprob: -10.392376899719238
    7. '(' → logprob: -10.892376899719238
    8. ' ())' → logprob: -11.767376899719238
    9. '`)' → logprob: -12.767376899719238
    10. '')' → logprob: -13.017376899719238

Token 12: 'q' (ID: 80)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.09974553436040878
    2. 'print' → logprob: -3.849745512008667
    3. 'n' → logprob: -4.099745750427246
    4. 'm' → logprob: -4.724745750427246
    5. 's' → logprob: -5.099745750427246
    6. 'count' → logprob: -5.224745750427246
    7. 'M' → logprob: -5.349745750427246
    8. 'result' → logprob: -5.474745750427246
    9. 'if' → logprob: -5.849745750427246
    10. '.' → logprob: -5.974745750427246

Token 13: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3511475622653961
    2. 'u' → logprob: -1.3511475324630737
    3. '=' → logprob: -3.3511476516723633
    4. ' ' → logprob: -6.351147651672363
    5. '.' → logprob: -9.226147651672363
    6. 'uer' → logprob: -9.726147651672363
    7. 'ue' → logprob: -10.101147651672363
    8. 'uries' → logprob: -10.101147651672363
    9. ',' → logprob: -10.476147651672363
    10. 's' → logprob: -11.101147651672363

Token 14: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.018156498670578003
    2. ' int' → logprob: -4.0181565284729
    3. '[int' → logprob: -12.893156051635742
    4. ' ' → logprob: -13.143156051635742
    5. 'input' → logprob: -14.518156051635742
    6. '<int' → logprob: -15.018156051635742
    7. '=int' → logprob: -15.143156051635742
    8. '  ' → logprob: -15.518156051635742
    9. '(int' → logprob: -15.768156051635742
    10. '0' → logprob: -15.893156051635742

Token 15: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.050530917942523956
    2. '(input' → logprob: -3.1755309104919434
    3. '()' → logprob: -5.300530910491943
    4. '('' → logprob: -6.175530910491943
    5. '(
' → logprob: -9.300531387329102
    6. ''' → logprob: -9.675531387329102
    7. '("("' → logprob: -10.175531387329102
    8. '(open' → logprob: -10.300531387329102
    9. '(`' → logprob: -10.550531387329102
    10. ')' → logprob: -10.550531387329102

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.44822967052459717
    2. '()' → logprob: -1.1982296705245972
    3. ')' → logprob: -2.8232297897338867
    4. '()
' → logprob: -10.198229789733887
    5. '())
' → logprob: -10.323229789733887
    6. '(' → logprob: -11.823229789733887
    7. ' ())' → logprob: -12.073229789733887
    8. '`)' → logprob: -12.573229789733887
    9. '();)' → logprob: -12.823229789733887
    10. ' )' → logprob: -12.948229789733887

Token 17: 'T' (ID: 51)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2844719886779785
    2. 'count' → logprob: -1.4094719886779785
    3. 'result' → logprob: -6.6594719886779785
    4. 'c' → logprob: -7.6594719886779785
    5. 'score' → logprob: -7.7844719886779785
    6. 'results' → logprob: -8.15947151184082
    7. 'res' → logprob: -8.40947151184082
    8. 'correct' → logprob: -8.78447151184082
    9. 'ans' → logprob: -9.40947151184082
    10. 'r' → logprob: -9.53447151184082

Token 18: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04345722123980522
    2. '=' → logprob: -3.168457269668579
    3. ' ' → logprob: -8.41845703125
    4. '.' → logprob: -8.54345703125
    5. '_' → logprob: -11.16845703125
    6. 's' → logprob: -11.41845703125
    7. '=set' → logprob: -12.91845703125
    8. ')' → logprob: -13.04345703125
    9. 'arget' → logprob: -13.29345703125
    10. 'emp' → logprob: -13.29345703125

Token 19: ' set' (ID: 920)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.6609419584274292
    2. ' set' → logprob: -1.2859419584274292
    3. 'input' → logprob: -2.1609420776367188
    4. ' input' → logprob: -2.4109420776367188
    5. ' list' → logprob: -7.035942077636719
    6. 'list' → logprob: -7.160942077636719
    7. '[input' → logprob: -8.035942077636719
    8. ' [' → logprob: -9.160942077636719
    9. ' ' → logprob: -9.910942077636719
    10. '[]' → logprob: -9.910942077636719

Token 20: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.4029519259929657
    2. '(' → logprob: -1.152951955795288
    3. '()' → logprob: -4.152951717376709
    4. '((' → logprob: -10.277952194213867
    5. ' (' → logprob: -10.402952194213867
    6. '("("' → logprob: -10.902952194213867
    7. '(user' → logprob: -11.152952194213867
    8. '(
' → logprob: -11.152952194213867
    9. '('' → logprob: -11.152952194213867
    10. '(()' → logprob: -11.527952194213867

Token 21: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.8908587662735954e-05
    2. '()' → logprob: -11.000019073486328
    3. ' ().' → logprob: -13.125019073486328
    4. '.' → logprob: -16.500019073486328
    5. '(' → logprob: -16.500019073486328
    6. '()).' → logprob: -17.250019073486328
    7. '())' → logprob: -17.375019073486328
    8. ' ' → logprob: -18.625019073486328
    9. ').' → logprob: -19.250019073486328
    10. ')' → logprob: -19.625019073486328

Token 22: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.704273118884885e-07
    2. ' split' → logprob: -14.875000953674316
    3. 'strip' → logprob: -15.750000953674316
    4. 'spl' → logprob: -16.875
    5. '(split' → logprob: -18.0
    6. ')' → logprob: -19.25
    7. '```' → logprob: -19.25
    8. 's' → logprob: -19.75
    9. 'rstrip' → logprob: -20.25
    10. '_split' → logprob: -20.875

Token 23: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.04220651090145111
    2. '()' → logprob: -3.6672065258026123
    3. ')' → logprob: -4.167206287384033
    4. '()))' → logprob: -8.667206764221191
    5. '())
' → logprob: -10.167206764221191
    6. '))' → logprob: -10.417206764221191
    7. ' ())' → logprob: -11.292206764221191
    8. '`)' → logprob: -11.417206764221191
    9. '()
' → logprob: -12.417206764221191
    10. '();)' → logprob: -12.667206764221191

Token 24: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07671253383159637
    2. 'for' → logprob: -3.9517126083374023
    3. 's' → logprob: -4.076712608337402
    4. 'S' → logprob: -4.326712608337402
    5. 'result' → logprob: -4.701712608337402
    6. 'U' → logprob: -5.576712608337402
    7. 'n' → logprob: -6.076712608337402
    8. 'r' → logprob: -6.951712608337402
    9. 'count' → logprob: -6.951712608337402
    10. 'a' → logprob: -6.951712608337402

Token 25: '(len' (ID: 14990)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012797608505934477
    2. '(len' → logprob: -7.626279830932617
    3. '(S' → logprob: -8.126279830932617
    4. '((' → logprob: -8.501279830932617
    5. '('' → logprob: -8.751279830932617
    6. '()' → logprob: -9.376279830932617
    7. '("("' → logprob: -10.626279830932617
    8. '(T' → logprob: -11.376279830932617
    9. '(sum' → logprob: -13.001279830932617
    10. '("' → logprob: -13.251279830932617

Token 26: '(S' (ID: 6181)
  Prédit: '(S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.04319969192147255
    2. '(' → logprob: -3.1681997776031494
    3. '(s' → logprob: -9.54319953918457
    4. ')' → logprob: -10.04319953918457
    5. ' (' → logprob: -10.54319953918457
    6. '(T' → logprob: -10.54319953918457
    7. '(`' → logprob: -11.66819953918457
    8. '(n' → logprob: -11.79319953918457
    9. '((' → logprob: -11.91819953918457
    10. '()' → logprob: -12.41819953918457

Token 27: '&T' (ID: 52819)
  Prédit: ' &'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' &' → logprob: -0.2005823254585266
    2. '&' → logprob: -1.9505822658538818
    3. '.inter' → logprob: -3.325582265853882
    4. ')' → logprob: -6.200582504272461
    5. '&S' → logprob: -8.075582504272461
    6. '))' → logprob: -8.200582504272461
    7. ' ' → logprob: -8.325582504272461
    8. '.union' → logprob: -8.700582504272461
    9. '&T' → logprob: -8.950582504272461
    10. ' |' → logprob: -9.075582504272461

Token 28: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.06201507896184921
    2. ')' → logprob: -2.8120150566101074
    3. ')))' → logprob: -10.687015533447266
    4. '()))' → logprob: -10.937015533447266
    5. '())' → logprob: -13.187015533447266
    6. '()' → logprob: -13.312015533447266
    7. ' ))' → logprob: -14.187015533447266
    8. '))
' → logprob: -14.437015533447266
    9. '),' → logprob: -14.937015533447266
    10. ')>' → logprob: -15.812015533447266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 26
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 18
Précision stricte (1ère position): 34.62%
Précision adaptée (1ère position): 34.62%
Précision (top 10): 69.23%
================================================================================
