================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:17:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import deque
import sys
sys.setrecursionlimit(100000)

if __name__ == '__main__':

    n = int(input())
    pre = deque([int(i) for i in input().split(" ")])
    ino = deque([int(i) for i in input().split(" ")])

    post = []
    def reconstruction(l, r):
        if l >= r:
            return
        c = pre.popleft()
        m = ino.index(c)
        reconstruction(l, m)
        reconstruction(m+1, r)
        
        post.append(c)

    reconstruction(0, n)
    print(" ".join(map(str, post)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -1.037925124168396
    2. 'default' → logprob: -1.162925124168396
    3. 'abc' → logprob: -1.787925124168396
    4. 'Counter' → logprob: -2.4129252433776855
    5. ' defaultdict' → logprob: -2.7879252433776855
    6. 'named' → logprob: -5.4129252433776855
    7. ' Counter' → logprob: -5.5379252433776855
    8. ' abc' → logprob: -6.0379252433776855
    9. ' deque' → logprob: -6.4129252433776855
    10. '```' → logprob: -6.7879252433776855

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014323927462100983
    2. '.' → logprob: -5.014323711395264
    3. '\(' → logprob: -5.764323711395264
    4. '```' → logprob: -6.889323711395264
    5. '\' → logprob: -7.014323711395264
    6. '\n' → logprob: -7.264323711395264
    7. '[' → logprob: -8.014324188232422
    8. '(
' → logprob: -8.264324188232422
    9. 'import' → logprob: -8.389324188232422
    10. 'newline' → logprob: -8.389324188232422

Token 5: 'import' (ID: 561)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.536668598651886
    2. 'd' → logprob: -1.5366685390472412
    3. 'a' → logprob: -2.661668539047241
    4. '\n' → logprob: -3.536668539047241
    5. '\' → logprob: -3.786668539047241
    6. '[' → logprob: -4.53666877746582
    7. 'newline' → logprob: -4.78666877746582
    8. '
' → logprob: -4.78666877746582
    9. ',' → logprob: -5.16166877746582
    10. '.' → logprob: -5.41166877746582

Token 6: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.1530202329158783
    2. ' os' → logprob: -2.153020143508911
    3. ' collections' → logprob: -3.778020143508911
    4. ' itertools' → logprob: -6.77802038192749
    5. ' re' → logprob: -7.15302038192749
    6. ' ' → logprob: -8.028019905090332
    7. ' queue' → logprob: -8.528019905090332
    8. ' math' → logprob: -9.028019905090332
    9. ' heap' → logprob: -9.403019905090332
    10. ' threading' → logprob: -10.153019905090332

Token 7: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7641598582267761
    2. '\n' → logprob: -1.264159917831421
    3. '\' → logprob: -1.514159917831421
    4. '```' → logprob: -4.639159679412842
    5. 'newline' → logprob: -5.139159679412842
    6. '.readline' → logprob: -5.264159679412842
    7. '
' → logprob: -5.389159679412842
    8. '.
' → logprob: -6.639159679412842
    9. '[' → logprob: -6.639159679412842
    10. 'import' → logprob: -7.389159679412842

Token 8: 'sys' (ID: 17324)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7133030891418457
    2. '\' → logprob: -1.4633030891418457
    3. '.' → logprob: -1.7133030891418457
    4. '
' → logprob: -3.4633030891418457
    5. 'input' → logprob: -4.338303089141846
    6. '```' → logprob: -4.463303089141846
    7. 'newline' → logprob: -4.838303089141846
    8. 'for' → logprob: -5.088303089141846
    9. ',' → logprob: -5.838303089141846
    10. 'import' → logprob: -5.963303089141846

Token 9: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.002299420302733779
    2. '.readline' → logprob: -7.3772993087768555
    3. '.stdout' → logprob: -7.5022993087768555
    4. '.exit' → logprob: -7.6272993087768555
    5. '.stdin' → logprob: -8.252299308776855
    6. '.argv' → logprob: -8.877299308776855
    7. '.stderr' → logprob: -9.877299308776855
    8. '.setdefault' → logprob: -9.877299308776855
    9. ' .' → logprob: -10.252299308776855
    10. '.import' → logprob: -10.752299308776855

Token 10: 'rec' (ID: 9285)
  Prédit: 'rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' → logprob: -0.010820365510880947
    2. 'limit' → logprob: -5.385820388793945
    3. 'ursion' → logprob: -6.385820388793945
    4. '_limit' → logprob: -7.010820388793945
    5. '_rec' → logprob: -7.260820388793945
    6. 'execution' → logprob: -7.760820388793945
    7. 'set' → logprob: -7.885820388793945
    8. '_max' → logprob: -8.010820388793945
    9. 'ecution' → logprob: -8.635820388793945
    10. 'trace' → logprob: -8.885820388793945

Token 11: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -3.130576806142926e-05
    2. 'urs' → logprob: -11.000031471252441
    3. 'ursive' → logprob: -12.000031471252441
    4. 'usion' → logprob: -12.750031471252441
    5. 'ur' → logprob: -13.000031471252441
    6. 'ursor' → logprob: -13.125031471252441
    7. 'limit' → logprob: -14.125031471252441
    8. 'us' → logprob: -16.125030517578125
    9. 'usr' → logprob: -16.500030517578125
    10. 'ision' → logprob: -16.750030517578125

Token 12: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -7.815280696377158e-05
    2. 'depth' → logprob: -9.875078201293945
    3. '_limit' → logprob: -10.625078201293945
    4. 'lim' → logprob: -13.875078201293945
    5. ' limit' → logprob: -13.875078201293945
    6. 'Limit' → logprob: -15.625078201293945
    7. '_depth' → logprob: -16.000078201293945
    8. '(limit' → logprob: -16.750078201293945
    9. '.limit' → logprob: -17.750078201293945
    10. '_LIMIT' → logprob: -17.750078201293945

Token 13: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -6.153795766294934e-06
    2. ' (' → logprob: -12.625005722045898
    3. '((' → logprob: -14.125005722045898
    4. '(
' → logprob: -14.250005722045898
    5. '(

' → logprob: -14.750005722045898
    6. '()' → logprob: -15.250005722045898
    7. '40' → logprob: -15.875005722045898
    8. '```' → logprob: -16.0000057220459
    9. '(int' → logprob: -16.1250057220459
    10. '("("' → logprob: -16.5000057220459

Token 14: '100' (ID: 1353)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00862414762377739
    2. '100' → logprob: -4.758624076843262
    3. ' ' → logprob: -11.758624076843262
    4. '500' → logprob: -13.883624076843262
    5. '300' → logprob: -15.008624076843262
    6. '1' → logprob: -15.383624076843262
    7. '999' → logprob: -16.008625030517578
    8. '   ' → logprob: -16.258625030517578
    9. '200' → logprob: -16.258625030517578
    10. '250' → logprob: -16.758625030517578

Token 15: '000' (ID: 1302)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.22581303119659424
    2. '0' → logprob: -1.7258130311965942
    3. '000' → logprob: -3.7258129119873047
    4. '07' → logprob: -12.475812911987305
    5. '06' → logprob: -13.850812911987305
    6. '09' → logprob: -13.975812911987305
    7. '006' → logprob: -14.100812911987305
    8. '50' → logprob: -14.225812911987305
    9. '007' → logprob: -14.350812911987305
    10. '050' → logprob: -14.725812911987305

Token 16: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.4617256056226324e-05
    2. '0' → logprob: -11.250014305114746
    3. '))' → logprob: -14.000014305114746
    4. ' )' → logprob: -14.875014305114746
    5. ')
' → logprob: -15.875014305114746
    6. '1' → logprob: -16.500015258789062
    7. '`)' → logprob: -16.875015258789062
    8. '```' → logprob: -16.875015258789062
    9. '6' → logprob: -17.625015258789062
    10. '3' → logprob: -18.125015258789062

Token 17: 'if' (ID: 366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005675514694303274
    2. '
' → logprob: -6.380675315856934
    3. 'class' → logprob: -6.630675315856934
    4. '```' → logprob: -6.755675315856934
    5. '\' → logprob: -7.005675315856934
    6. 'n' → logprob: -8.630675315856934
    7. '

' → logprob: -9.255675315856934
    8. '
' → logprob: -9.255675315856934
    9. '\n' → logprob: -9.505675315856934
    10. '' → logprob: -10.130675315856934

Token 18: ' __' (ID: 2516)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.21019011735916138
    2. ' __' → logprob: -1.9601900577545166
    3. '  ' → logprob: -3.3351900577545166
    4. ' not' → logprob: -4.835190296173096
    5. ' True' → logprob: -5.960190296173096
    6. '__' → logprob: -6.960190296173096
    7. ' sys' → logprob: -7.835190296173096
    8. ' ' → logprob: -8.210189819335938
    9. '_' → logprob: -8.710189819335938
    10. ' space' → logprob: -9.335189819335938

Token 19: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.015768039971590042
    2. '==' → logprob: -5.015768051147461
    3. 'name' → logprob: -5.765768051147461
    4. ' ==' → logprob: -6.015768051147461
    5. '.__' → logprob: -6.890768051147461
    6. '__.__' → logprob: -6.890768051147461
    7. '__.' → logprob: -8.140768051147461
    8. '.' → logprob: -8.265768051147461
    9. '```' → logprob: -8.390768051147461
    10. ' __' → logprob: -8.515768051147461

Token 20: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.2664456789934775e-06
    2. '__.__' → logprob: -15.125000953674316
    3. '==' → logprob: -15.375000953674316
    4. 'name' → logprob: -15.875000953674316
    5. '____' → logprob: -16.125001907348633
    6. '___' → logprob: -16.125001907348633
    7. '__
' → logprob: -16.500001907348633
    8. '```' → logprob: -16.750001907348633
    9. '__('' → logprob: -16.875001907348633
    10. '_' → logprob: -17.250001907348633

Token 21: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.015524646267294884
    2. ' ==' → logprob: -4.765524864196777
    3. '__.__' → logprob: -5.390524864196777
    4. '==' → logprob: -6.515524864196777
    5. '___' → logprob: -9.140524864196777
    6. '__.' → logprob: -9.140524864196777
    7. '__["' → logprob: -9.265524864196777
    8. '__('' → logprob: -9.515524864196777
    9. '=="' → logprob: -9.765524864196777
    10. '"' → logprob: -10.140524864196777

Token 22: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.3136596381664276
    2. ''' → logprob: -1.31365966796875
    3. ' "__' → logprob: -8.06365966796875
    4. '__' → logprob: -10.18865966796875
    5. ' '__' → logprob: -10.18865966796875
    6. ' "' → logprob: -12.18865966796875
    7. ''s' → logprob: -14.43865966796875
    8. ' '' → logprob: -14.56365966796875
    9. '"user' → logprob: -14.56365966796875
    10. '"name' → logprob: -15.43865966796875

Token 23: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.14904223382472992
    2. 'name' → logprob: -2.0240421295166016
    3. '__' → logprob: -5.524042129516602
    4. 'm' → logprob: -6.774042129516602
    5. 'q' → logprob: -8.024042129516602
    6. '__.' → logprob: -8.649042129516602
    7. 'p' → logprob: -9.274042129516602
    8. '_main' → logprob: -9.399042129516602
    9. 'pt' → logprob: -9.399042129516602
    10. 'f' → logprob: -9.399042129516602

Token 24: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.2573559582233429
    2. '__':
' → logprob: -1.5073559284210205
    3. '__:' → logprob: -5.2573561668396
    4. '_' → logprob: -9.007355690002441
    5. '':' → logprob: -10.632355690002441
    6. '__":
' → logprob: -10.757355690002441
    7. '__.' → logprob: -11.007355690002441
    8. '__('' → logprob: -11.882355690002441
    9. ':' → logprob: -12.132355690002441
    10. '___' → logprob: -13.632355690002441

Token 25: '':

' (ID: 143071)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001553428708575666
    2. '):' → logprob: -7.251553535461426
    3. '>:' → logprob: -7.876553535461426
    4. '():' → logprob: -8.751553535461426
    5. ':**' → logprob: -9.001553535461426
    6. '':' → logprob: -9.376553535461426
    7. ':
' → logprob: -10.001553535461426
    8. ' :' → logprob: -11.501553535461426
    9. ']:' → logprob: -12.126553535461426
    10. '>' → logprob: -12.126553535461426

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004609318450093269
    2. '```' → logprob: -6.129609107971191
    3. '    
' → logprob: -6.879609107971191
    4. ' indentation' → logprob: -8.129609107971191
    5. '\' → logprob: -8.379609107971191
    6. '\t' → logprob: -8.754609107971191
    7. ' readline' → logprob: -8.879609107971191
    8. '   ' → logprob: -9.129609107971191
    9. 'n' → logprob: -9.879609107971191
    10. 'indent' → logprob: -10.254609107971191

Token 27: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0455167330801487
    2. 'n' (adapté à ' n') → logprob: -3.6705167293548584
    3. ' input' → logprob: -4.1705169677734375
    4. '   ' → logprob: -6.6705169677734375
    5. ' N' → logprob: -6.7955169677734375
    6. ' t' → logprob: -7.6705169677734375
    7. 'input' → logprob: -8.545516967773438
    8. ' import' → logprob: -8.670516967773438
    9. ' queue' → logprob: -10.045516967773438
    10. 't' → logprob: -10.295516967773438

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004009422846138477
    2. '=' → logprob: -5.629009246826172
    3. ' ' → logprob: -8.254009246826172
    4. ',' → logprob: -9.129009246826172
    5. ' ,' → logprob: -11.254009246826172
    6. '=int' → logprob: -11.379009246826172
    7. '  ' → logprob: -11.629009246826172
    8. '   ' → logprob: -13.254009246826172
    9. ' =)' → logprob: -13.504009246826172
    10. ')' → logprob: -14.129009246826172

Token 29: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.003627269994467497
    2. 'int' → logprob: -5.628627300262451
    3. ' ' → logprob: -11.128626823425293
    4. ' map' → logprob: -12.253626823425293
    5. ' input' → logprob: -12.878626823425293
    6. '10' → logprob: -12.878626823425293
    7. '=int' → logprob: -13.628626823425293
    8. '20' → logprob: -15.253626823425293
    9. 'map' → logprob: -15.753626823425293
    10. '5' → logprob: -15.753626823425293

Token 30: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5759897828102112
    2. '(' → logprob: -0.8259897828102112
    3. 'input' → logprob: -10.200989723205566
    4. '(sys' → logprob: -11.700989723205566
    5. '()' → logprob: -13.450989723205566
    6. ' input' → logprob: -13.825989723205566
    7. '(
' → logprob: -14.200989723205566
    8. ' (' → logprob: -15.200989723205566
    9. '(int' → logprob: -15.200989723205566
    10. '('' → logprob: -15.200989723205566

Token 31: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.69365394115448
    2. '())' → logprob: -0.69365394115448
    3. '(' → logprob: -7.8186540603637695
    4. '().' → logprob: -10.69365406036377
    5. '()))' → logprob: -11.19365406036377
    6. ')' → logprob: -11.56865406036377
    7. '()>' → logprob: -11.81865406036377
    8. '();)' → logprob: -11.81865406036377
    9. '()`' → logprob: -11.94365406036377
    10. '('' → logprob: -12.06865406036377

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26721838116645813
    2. '
' → logprob: -2.6422183513641357
    3. '<|end|>' → logprob: -2.6422183513641357
    4. 'n' → logprob: -3.6422183513641357
    5. ')' → logprob: -4.267218589782715
    6. '    
' → logprob: -4.517218589782715
    7. ' ' → logprob: -4.892218589782715
    8. 'd' → logprob: -5.267218589782715
    9. 'graph' → logprob: -5.517218589782715
    10. ' 
' → logprob: -5.892218589782715

Token 33: ' pre' (ID: 876)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.6153521537780762
    2. '   ' → logprob: -1.9903521537780762
    3. 'd' → logprob: -2.490352153778076
    4. ' graph' → logprob: -3.240352153778076
    5. 's' → logprob: -3.365352153778076
    6. 'a' → logprob: -3.865352153778076
    7. 'data' → logprob: -3.865352153778076
    8. ')' → logprob: -4.115352153778076
    9. 'deque' → logprob: -4.490352153778076
    10. 'arr' → logprob: -4.490352153778076

Token 34: ' =' (ID: 314)
  Prédit: 'order'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'order' → logprob: -0.49250587821006775
    2. 'fix' → logprob: -1.2425059080123901
    3. 'd' → logprob: -3.4925057888031006
    4. '_order' → logprob: -3.6175057888031006
    5. ' =' → logprob: -5.11750602722168
    6. 'deque' → logprob: -5.36750602722168
    7. 'decess' → logprob: -5.49250602722168
    8. '=' → logprob: -5.61750602722168
    9. '[]' → logprob: -5.74250602722168
    10. 'v' → logprob: -5.86750602722168

Token 35: ' deque' (ID: 90347)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.10335826873779297
    2. 'list' → logprob: -2.478358268737793
    3. ' []' → logprob: -5.353358268737793
    4. 'deque' → logprob: -5.853358268737793
    5. ' [' → logprob: -6.228358268737793
    6. ' input' → logprob: -6.478358268737793
    7. ' deque' → logprob: -6.603358268737793
    8. '[]' → logprob: -7.353358268737793
    9. 'input' → logprob: -7.353358268737793
    10. '[' → logprob: -8.353358268737793

Token 36: '([' (ID: 5194)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22419585287570953
    2. '()' → logprob: -2.099195957183838
    3. '([' → logprob: -2.724195957183838
    4. '([]' → logprob: -4.474195957183838
    5. '([(' → logprob: -7.724195957183838
    6. '(['' → logprob: -8.09919548034668
    7. '('' → logprob: -8.84919548034668
    8. '((' → logprob: -9.84919548034668
    9. '([
' → logprob: -10.09919548034668
    10. '(input' → logprob: -10.22419548034668

Token 37: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.021555209532380104
    2. 'n' → logprob: -4.396555423736572
    3. 'i' → logprob: -6.271555423736572
    4. '*' → logprob: -6.271555423736572
    5. '(int' → logprob: -6.896555423736572
    6. '0' → logprob: -7.021555423736572
    7. '1' → logprob: -7.146555423736572
    8. ' int' → logprob: -7.146555423736572
    9. 'map' → logprob: -7.646555423736572
    10. 'list' → logprob: -8.146554946899414

Token 38: '(i' (ID: 3649)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06735502928495407
    2. '(x' → logprob: -2.942354917526245
    3. '(' → logprob: -4.567355155944824
    4. '(i' → logprob: -6.317355155944824
    5. '()' → logprob: -9.442355155944824
    6. '(a' → logprob: -10.567355155944824
    7. '(token' → logprob: -10.817355155944824
    8. '(s' → logprob: -11.067355155944824
    9. 'input' → logprob: -11.192355155944824
    10. '(n' → logprob: -11.567355155944824

Token 39: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008771034888923168
    2. '(input' → logprob: -5.633770942687988
    3. '()' → logprob: -6.258770942687988
    4. '(x' → logprob: -6.758770942687988
    5. '())' → logprob: -7.008770942687988
    6. '(' → logprob: -7.758770942687988
    7. 'for' → logprob: -8.258770942687988
    8. '(i' → logprob: -8.508770942687988
    9. 'input' → logprob: -8.883770942687988
    10. ' )' → logprob: -10.133770942687988

Token 40: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5764079093933105
    2. ')' → logprob: -1.5764079093933105
    3. '()' → logprob: -2.0764079093933105
    4. ' for' → logprob: -2.8264079093933105
    5. '(input' → logprob: -3.4514079093933105
    6. '(' → logprob: -4.7014079093933105
    7. 'input' → logprob: -5.7014079093933105
    8. '(x' → logprob: -6.8264079093933105
    9. ']' → logprob: -7.8264079093933105
    10. '(i' → logprob: -7.9514079093933105

Token 41: ' i' (ID: 575)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.028167782351374626
    2. 'input' → logprob: -3.653167724609375
    3. ' range' → logprob: -6.653167724609375
    4. '(input' → logprob: -7.528167724609375
    5. 'range' → logprob: -10.528167724609375
    6. '(' → logprob: -11.903167724609375
    7. ' sys' → logprob: -13.653167724609375
    8. '(range' → logprob: -13.903167724609375
    9. ' ' → logprob: -14.153167724609375
    10. '	input' → logprob: -14.903167724609375

Token 42: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07846015691757202
    2. 'input' → logprob: -3.078460216522217
    3. 'in' → logprob: -4.453460216522217
    4. '(' → logprob: -4.828460216522217
    5. ' input' → logprob: -4.953460216522217
    6. '(input' → logprob: -6.203460216522217
    7. ' ' → logprob: -7.953460216522217
    8. ' (' → logprob: -9.078459739685059
    9. '=input' → logprob: -9.453459739685059
    10. ']' → logprob: -10.078459739685059

Token 43: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.25246766209602356
    2. ' input' → logprob: -1.5024676322937012
    3. ' sys' → logprob: -8.62746810913086
    4. 'range' → logprob: -8.87746810913086
    5. 'sys' → logprob: -9.12746810913086
    6. ' range' → logprob: -9.25246810913086
    7. '(input' → logprob: -11.25246810913086
    8. ' ' → logprob: -13.62746810913086
    9. '	input' → logprob: -15.50246810913086
    10. '=input' → logprob: -15.62746810913086

Token 44: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0019633667543530464
    2. '()' → logprob: -6.251963138580322
    3. '()]' → logprob: -10.50196361541748
    4. '()].' → logprob: -13.00196361541748
    5. '())' → logprob: -13.25196361541748
    6. '(' → logprob: -13.37696361541748
    7. 'split' → logprob: -14.87696361541748
    8. '().'' → logprob: -15.00196361541748
    9. ' ().' → logprob: -15.37696361541748
    10. '()[' → logprob: -16.376962661743164

Token 45: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0067771850153803825
    2. 'strip' → logprob: -5.006777286529541
    3. 'rstrip' → logprob: -9.756776809692383
    4. ' split' → logprob: -12.631776809692383
    5. '(split' → logprob: -14.756776809692383
    6. 'spl' → logprob: -16.006776809692383
    7. ' strip' → logprob: -16.756776809692383
    8. 's' → logprob: -17.756776809692383
    9. 'sp' → logprob: -19.131776809692383
    10. ' ' → logprob: -19.506776809692383

Token 46: '("' (ID: 568)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06126962974667549
    2. '()]' → logprob: -2.936269521713257
    3. '())' → logprob: -5.811269760131836
    4. '(' → logprob: -6.311269760131836
    5. ')])' → logprob: -6.811269760131836
    6. '])' → logprob: -8.061269760131836
    7. ']' → logprob: -10.061269760131836
    8. '('' → logprob: -10.811269760131836
    9. ']))' → logprob: -10.936269760131836
    10. '()],' → logprob: -11.311269760131836

Token 47: ' ")' (ID: 25221)
  Prédit: ')])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.4875871241092682
    2. ')' → logprob: -0.9875870943069458
    3. '")' → logprob: -4.987586975097656
    4. ' ")' → logprob: -5.862586975097656
    5. ' "' → logprob: -6.737586975097656
    6. ' )' → logprob: -7.112586975097656
    7. '()' → logprob: -7.112586975097656
    8. ')]' → logprob: -7.737586975097656
    9. '())' → logprob: -8.862586975097656
    10. ' ' → logprob: -9.112586975097656

Token 48: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.0202436875551939
    2. ')])' → logprob: -4.1452436447143555
    3. ']))' → logprob: -5.7702436447143555
    4. ')' → logprob: -7.1452436447143555
    5. '])]' → logprob: -9.520243644714355
    6. ')]' → logprob: -9.645243644714355
    7. ' ])' → logprob: -9.770243644714355
    8. ']' → logprob: -10.145243644714355
    9. '   ' → logprob: -11.020243644714355
    10. ']])' → logprob: -11.020243644714355

Token 49: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7954628467559814
    2. '<|end|>' → logprob: -1.2954628467559814
    3. '
' → logprob: -1.4204628467559814
    4. '    
' → logprob: -3.7954628467559814
    5. ')' → logprob: -5.045462608337402
    6. '<|end|>' → logprob: -6.920462608337402
    7. '    ' → logprob: -7.295462608337402
    8. ',' → logprob: -7.545462608337402
    9. '  ' → logprob: -8.295462608337402
    10. '#' → logprob: -8.295462608337402

Token 50: ' ino' (ID: 89364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0089210271835327
    2. '
' → logprob: -1.6339210271835327
    3. ' ' → logprob: -2.1339211463928223
    4. 'def' → logprob: -2.2589211463928223
    5. '<|end|>' → logprob: -2.6339211463928223
    6. '    
' → logprob: -4.008921146392822
    7. 'd' → logprob: -4.008921146392822
    8. 'stack' → logprob: -4.133921146392822
    9. ')' → logprob: -4.258921146392822
    10. '    ' → logprob: -4.508921146392822

Token 51: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5403714179992676
    2. 'r' → logprob: -1.1653714179992676
    3. '=' → logprob: -2.2903714179992676
    4. 'rt' → logprob: -6.540371417999268
    5. 'order' → logprob: -6.915371417999268
    6. '   ' → logprob: -7.665371417999268
    7. 't' → logprob: -8.29037094116211
    8. ' ' → logprob: -8.41537094116211
    9. '_order' → logprob: -9.04037094116211
    10. '_' → logprob: -9.41537094116211

Token 52: ' deque' (ID: 90347)
  Prédit: ' deque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.2520442605018616
    2. 'deque' → logprob: -1.5020442008972168
    3. ' list' → logprob: -10.627044677734375
    4. 'de' → logprob: -10.752044677734375
    5. ' [' → logprob: -10.877044677734375
    6. ' ' → logprob: -11.002044677734375
    7. ' de' → logprob: -11.127044677734375
    8. 'list' → logprob: -12.002044677734375
    9. '[' → logprob: -12.127044677734375
    10. '	de' → logprob: -13.627044677734375

Token 53: '([' (ID: 5194)
  Prédit: '(['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([' → logprob: -5.037835580878891e-05
    2. '(' → logprob: -10.50005054473877
    3. ' ([' → logprob: -11.75005054473877
    4. '([]' → logprob: -11.87505054473877
    5. '(int' → logprob: -13.12505054473877
    6. '([(' → logprob: -13.37505054473877
    7. '(([' → logprob: -13.62505054473877
    8. '((' → logprob: -13.62505054473877
    9. '([...' → logprob: -14.12505054473877
    10. '[' → logprob: -14.87505054473877

Token 54: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.692145012086257e-05
    2. '(int' → logprob: -10.000046730041504
    3. ' int' → logprob: -13.500046730041504
    4. '[int' → logprob: -16.00004768371582
    5. '<int' → logprob: -18.00004768371582
    6. ']int' → logprob: -19.75004768371582
    7. ':int' → logprob: -21.12504768371582
    8. '	int' → logprob: -21.12504768371582
    9. '=int' → logprob: -21.37504768371582
    10. '   ' → logprob: -21.62504768371582

Token 55: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -1.8789383830153383e-05
    2. '(' → logprob: -11.000019073486328
    3. ' (' → logprob: -13.500019073486328
    4. '(int' → logprob: -14.750019073486328
    5. '(ii' → logprob: -15.500019073486328
    6. '(input' → logprob: -17.125019073486328
    7. '(I' → logprob: -17.250019073486328
    8. '(in' → logprob: -17.750019073486328
    9. '(s' → logprob: -18.250019073486328
    10. '(x' → logprob: -19.000019073486328

Token 56: ')' (ID: 8)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0012326111318543553
    2. ' for' → logprob: -7.001232624053955
    3. 'for' → logprob: -8.626232147216797
    4. ')' → logprob: -9.376232147216797
    5. '(' → logprob: -10.501232147216797
    6. '(in' → logprob: -11.751232147216797
    7. '(input' → logprob: -12.376232147216797
    8. ' (' → logprob: -12.751232147216797
    9. '(s' → logprob: -13.001232147216797
    10. '(x' → logprob: -13.001232147216797

Token 57: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2335759848356247
    2. 'for' → logprob: -1.6085759401321411
    3. '[i' → logprob: -5.733575820922852
    4. '(i' → logprob: -5.983575820922852
    5. ')' → logprob: -6.358575820922852
    6. '[' → logprob: -8.733575820922852
    7. '(for' → logprob: -8.733575820922852
    8. ' ' → logprob: -9.858575820922852
    9. '	for' → logprob: -9.983575820922852
    10. '(input' → logprob: -10.108575820922852

Token 58: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.7225891947746277
    2. '(i' → logprob: -0.7225891947746277
    3. 'i' → logprob: -3.9725892543792725
    4. ' input' → logprob: -5.597589015960693
    5. '(' → logprob: -5.972589015960693
    6. '(input' → logprob: -6.597589015960693
    7. ' (' → logprob: -7.097589015960693
    8. 'input' → logprob: -7.222589015960693
    9. ')' → logprob: -7.972589015960693
    10. ' in' → logprob: -8.597589492797852

Token 59: ' in' (ID: 306)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.18376906216144562
    2. ' in' → logprob: -2.9337689876556396
    3. '=input' → logprob: -3.3087689876556396
    4. 'input' → logprob: -3.4337689876556396
    5. 'in' → logprob: -4.683769226074219
    6. ' input' → logprob: -4.683769226074219
    7. ')' → logprob: -4.808769226074219
    8. '(' → logprob: -4.808769226074219
    9. '.' → logprob: -5.433769226074219
    10. 'import' → logprob: -5.808769226074219

Token 60: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6932966709136963
    2. ' input' → logprob: -0.6932966709136963
    3. '(input' → logprob: -8.818296432495117
    4. '=input' → logprob: -14.318296432495117
    5. '[input' → logprob: -15.443296432495117
    6. ' ' → logprob: -15.568296432495117
    7. 'sys' → logprob: -15.693296432495117
    8. '	input' → logprob: -16.193296432495117
    9. ',input' → logprob: -17.443296432495117
    10. '<input' → logprob: -17.693296432495117

Token 61: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.2603901015827432e-05
    2. '()' → logprob: -11.000022888183594
    3. '(".' → logprob: -12.625022888183594
    4. '("").' → logprob: -13.875022888183594
    5. '("' → logprob: -14.250022888183594
    6. '(' → logprob: -14.375022888183594
    7. '()["' → logprob: -15.750022888183594
    8. '()[' → logprob: -16.625022888183594
    9. '("("' → logprob: -16.875022888183594
    10. '.split' → logprob: -16.875022888183594

Token 62: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.465036105713807e-06
    2. ' split' → logprob: -12.250007629394531
    3. 'strip' → logprob: -13.000007629394531
    4. '(split' → logprob: -15.375007629394531
    5. 'rstrip' → logprob: -16.12500762939453
    6. 'spl' → logprob: -17.12500762939453
    7. '.split' → logprob: -17.50000762939453
    8. '```' → logprob: -17.75000762939453
    9. ')' → logprob: -17.87500762939453
    10. 'decode' → logprob: -19.12500762939453

Token 63: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.003416412975639105
    2. '("("' → logprob: -5.878416538238525
    3. '()' → logprob: -7.753416538238525
    4. '"' → logprob: -9.253416061401367
    5. '(' → logprob: -10.128416061401367
    6. '('' → logprob: -10.628416061401367
    7. '()"' → logprob: -11.878416061401367
    8. '("")' → logprob: -12.503416061401367
    9. '())' → logprob: -12.503416061401367
    10. '(""))' → logprob: -13.253416061401367

Token 64: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7249889969825745
    2. '("' → logprob: -0.7249889969825745
    3. '()' → logprob: -3.5999889373779297
    4. ')' → logprob: -6.84998893737793
    5. ' "' → logprob: -7.09998893737793
    6. '(' → logprob: -7.47498893737793
    7. '()"' → logprob: -7.47498893737793
    8. ' ' → logprob: -8.09998893737793
    9. '])' → logprob: -8.47498893737793
    10. '())' → logprob: -9.09998893737793

Token 65: ')])

' (ID: 182226)
  Prédit: ')])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')])' → logprob: -0.16656261682510376
    2. ')' → logprob: -1.916562557220459
    3. ')]' → logprob: -5.416562557220459
    4. '])' → logprob: -6.541562557220459
    5. ']))' → logprob: -8.666563034057617
    6. '))' → logprob: -8.916563034057617
    7. ')])
' → logprob: -10.166563034057617
    8. ' )' → logprob: -10.666563034057617
    9. ']' → logprob: -11.291563034057617
    10. '()' → logprob: -11.916563034057617

Token 66: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10828932374715805
    2. 'def' → logprob: -3.1082892417907715
    3. ':' → logprob: -3.7332892417907715
    4. '
' → logprob: -4.1082892417907715
    5. ')' → logprob: -4.8582892417907715
    6. '    
' → logprob: -5.1082892417907715
    7. '<|end|>' → logprob: -7.1082892417907715
    8. '    ' → logprob: -7.8582892417907715
    9. '```' → logprob: -7.8582892417907715
    10. ' ' → logprob: -8.10828971862793

Token 67: ' post' (ID: 1926)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.024658918380737305
    2. 'stack' → logprob: -4.274659156799316
    3. 'class' → logprob: -4.649659156799316
    4. 'root' → logprob: -7.524659156799316
    5. 'if' → logprob: -9.399659156799316
    6. 'node' → logprob: -9.774659156799316
    7. 'result' → logprob: -10.399659156799316
    8. 'sys' → logprob: -10.649659156799316
    9. 'from' → logprob: -10.774659156799316
    10. 'parent' → logprob: -10.899659156799316

Token 68: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6732223629951477
    2. '_' → logprob: -1.298222303390503
    3. ' =' → logprob: -1.673222303390503
    4. '(' → logprob: -4.548222541809082
    5. '[:]' → logprob: -5.423222541809082
    6. '()' → logprob: -5.798222541809082
    7. '=[]' → logprob: -5.923222541809082
    8. '_order' → logprob: -6.298222541809082
    9. '[]' → logprob: -6.298222541809082
    10. 'order' → logprob: -6.548222541809082

Token 69: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.3757854700088501
    2. '[]' → logprob: -1.37578547000885
    3. 'deque' → logprob: -3.2507853507995605
    4. ' deque' → logprob: -3.8757853507995605
    5. ' ' → logprob: -6.8757853507995605
    6. '   ' → logprob: -10.750785827636719
    7. ' []
' → logprob: -11.125785827636719
    8. 'de' → logprob: -11.375785827636719
    9. '[' → logprob: -11.500785827636719
    10. '[]
' → logprob: -11.625785827636719

Token 70: '   ' (ID: 271)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0019815717823803425
    2. '   ' → logprob: -6.376981735229492
    3. '    
' → logprob: -9.126981735229492
    4. '
' → logprob: -9.376981735229492
    5. '```' → logprob: -10.501981735229492
    6. ' def' → logprob: -11.001981735229492
    7. 'while' → logprob: -11.501981735229492
    8. 'de' → logprob: -11.626981735229492
    9. '	def' → logprob: -12.626981735229492
    10. ':def' → logprob: -13.376981735229492

Token 71: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -5.300083648762666e-05
    2. '
' → logprob: -10.375053405761719
    3. '   ' → logprob: -11.500053405761719
    4. 'de' → logprob: -12.500053405761719
    5. ' def' → logprob: -12.625053405761719
    6. '    
' → logprob: -13.125053405761719
    7. '	def' → logprob: -14.000053405761719
    8. 'stack' → logprob: -14.500053405761719
    9. '```' → logprob: -14.875053405761719
    10. 'if' → logprob: -15.125053405761719

Token 72: ' reconstruction' (ID: 68152)
  Prédit: ' build'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' build' → logprob: -0.00997269805520773
    2. ' def' → logprob: -6.00997257232666
    3. ' rebuild' → logprob: -6.38497257232666
    4. 'build' → logprob: -6.50997257232666
    5. ' dfs' → logprob: -6.88497257232666
    6. ' construct' → logprob: -7.13497257232666
    7. ' tree' → logprob: -7.50997257232666
    8. '_build' → logprob: -7.88497257232666
    9. ' solve' → logprob: -8.00997257232666
    10. ' reconstruct' → logprob: -8.25997257232666

Token 73: '(l' (ID: 4179)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05730108171701431
    2. '(pre' → logprob: -3.3073010444641113
    3. '_tree' → logprob: -4.807301044464111
    4. '(root' → logprob: -5.182301044464111
    5. '(tree' → logprob: -5.932301044464111
    6. '(node' → logprob: -7.932301044464111
    7. '(post' → logprob: -7.932301044464111
    8. '_pre' → logprob: -8.18230152130127
    9. '(Tree' → logprob: -8.43230152130127
    10. '(_' → logprob: -8.68230152130127

Token 74: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03015170246362686
    2. 'eft' → logprob: -3.780151605606079
    3. ' ,' → logprob: -5.905151844024658
    4. 'l' → logprob: -7.280151844024658
    5. 'in' → logprob: -7.655151844024658
    6. '_in' → logprob: -7.780151844024658
    7. 'pre' → logprob: -7.905151844024658
    8. ',left' → logprob: -8.2801513671875
    9. ',l' → logprob: -8.4051513671875
    10. 'left' → logprob: -8.7801513671875

Token 75: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.01256886962801218
    2. ' r' → logprob: -4.387568950653076
    3. 'i' → logprob: -11.012568473815918
    4. 'u' → logprob: -11.512568473815918
    5. 'm' → logprob: -11.887568473815918
    6. 'l' → logprob: -12.512568473815918
    7. 'p' → logprob: -13.012568473815918
    8. 's' → logprob: -13.137568473815918
    9. 'h' → logprob: -13.137568473815918
    10. ' ' → logprob: -13.387568473815918

Token 76: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16105015575885773
    2. ',' → logprob: -1.9110502004623413
    3. ')' → logprob: -7.286050319671631
    4. ':' → logprob: -9.911049842834473
    5. '):
' → logprob: -10.411049842834473
    6. ' ):' → logprob: -10.661049842834473
    7. ' ,' → logprob: -11.161049842834473
    8. '   ' → logprob: -12.036049842834473
    9. ',l' → logprob: -12.536049842834473
    10. ' ' → logprob: -13.286049842834473

Token 77: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5149965882301331
    2. '<|end|>' → logprob: -1.7649965286254883
    3. '    ' → logprob: -2.5149965286254883
    4. ' ' → logprob: -2.8899965286254883
    5. ':' → logprob: -3.1399965286254883
    6. '       ' → logprob: -3.3899965286254883
    7. '  ' → logprob: -4.889996528625488
    8. ')' → logprob: -5.514996528625488
    9. '        ' → logprob: -7.014996528625488
    10. ' if' → logprob: -7.389996528625488

Token 78: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.05954575538635254
    2. ' if' → logprob: -3.4345457553863525
    3. '       ' → logprob: -3.9345457553863525
    4. 'root' → logprob: -5.934545516967773
    5. '<|end|>' → logprob: -6.434545516967773
    6. '   ' → logprob: -7.309545516967773
    7. '        ' → logprob: -8.309545516967773
    8. 'i' → logprob: -8.684545516967773
    9. '    ' → logprob: -8.934545516967773
    10. '	if' → logprob: -8.934545516967773

Token 79: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.5233152508735657
    2. ' l' → logprob: -0.8983152508735657
    3. ' ' → logprob: -9.5233154296875
    4. '   ' → logprob: -9.7733154296875
    5. '	l' → logprob: -11.1483154296875
    6. 'r' → logprob: -11.6483154296875
    7. ' not' → logprob: -11.6483154296875
    8. '>' → logprob: -12.3983154296875
    9. ')' → logprob: -12.5233154296875
    10. '```' → logprob: -12.8358154296875

Token 80: ' >=' (ID: 5064)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.2336111068725586
    2. ' >=' → logprob: -1.9836111068725586
    3. '>' → logprob: -3.1086111068725586
    4. '==' → logprob: -3.8586111068725586
    5. ' >' → logprob: -5.733611106872559
    6. ' ==' → logprob: -7.108611106872559
    7. '=' → logprob: -7.733611106872559
    8. ' ' → logprob: -8.233611106872559
    9. '   ' → logprob: -9.733611106872559
    10. 'r' → logprob: -10.108611106872559

Token 81: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0015046248445287347
    2. ' r' → logprob: -6.501504421234131
    3. ' ' → logprob: -13.626504898071289
    4. '   ' → logprob: -14.751504898071289
    5. '_r' → logprob: -15.376504898071289
    6. '	r' → logprob: -15.876504898071289
    7. '    ' → logprob: -16.37650489807129
    8. '
' → logprob: -16.81400489807129
    9. '```' → logprob: -16.93900489807129
    10. '  ' → logprob: -17.06400489807129

Token 82: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.020270217210054398
    2. ':
' → logprob: -4.020270347595215
    3. ':return' → logprob: -6.395270347595215
    4. '       ' → logprob: -8.145270347595215
    5. '   ' → logprob: -9.270270347595215
    6. ' or' → logprob: -10.520270347595215
    7. ' :' → logprob: -10.770270347595215
    8. '):' → logprob: -12.145270347595215
    9. ' ' → logprob: -13.020270347595215
    10. ' :
' → logprob: -13.270270347595215

Token 83: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05145123600959778
    2. 'return' → logprob: -3.0514512062072754
    3. ' return' → logprob: -6.801451206207275
    4. '           ' → logprob: -6.926451206207275
    5. '\n' → logprob: -8.176451683044434
    6. '   ' → logprob: -8.551451683044434
    7. '```' → logprob: -9.551451683044434
    8. ':return' → logprob: -9.801451683044434
    9. '	' → logprob: -10.426451683044434
    10. '	return' → logprob: -10.426451683044434

Token 84: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.06119416654109955
    2. '       ' → logprob: -3.0611941814422607
    3. ' return' → logprob: -4.436193943023682
    4. '           ' → logprob: -7.686193943023682
    5. '	return' → logprob: -9.68619441986084
    6. '   ' → logprob: -9.81119441986084
    7. '
' → logprob: -9.93619441986084
    8. ':return' → logprob: -10.56119441986084
    9. '\n' → logprob: -11.18619441986084
    10. '{return' → logprob: -12.31119441986084

Token 85: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.5557411909103394
    2. '\n' → logprob: -1.6807411909103394
    3. '   ' → logprob: -1.6807411909103394
    4. '<|end|>' → logprob: -2.430741310119629
    5. ' ' → logprob: -2.555741310119629
    6. '
' → logprob: -2.555741310119629
    7. ' 
' → logprob: -2.930741310119629
    8. ')' → logprob: -3.555741310119629
    9. '    
' → logprob: -3.930741310119629
    10. 'newline' → logprob: -4.305741310119629

Token 86: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5681034922599792
    2. '   ' → logprob: -1.943103551864624
    3. '<|end|>' → logprob: -2.068103551864624
    4. ')' → logprob: -2.693103551864624
    5. 'root' → logprob: -3.443103551864624
    6. ' ' → logprob: -3.943103551864624
    7. '  ' → logprob: -5.193103313446045
    8. '[' → logprob: -5.318103313446045
    9. '        
' → logprob: -5.693103313446045
    10. '    
' → logprob: -5.693103313446045

Token 87: ' c' (ID: 274)
  Prédit: 'root'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'root' → logprob: -0.008532896637916565
    2. 'val' → logprob: -5.758533000946045
    3. ' root' → logprob: -5.883533000946045
    4. '       ' → logprob: -6.633533000946045
    5. 'mid' → logprob: -8.008532524108887
    6. 'idx' → logprob: -8.383532524108887
    7. 'index' → logprob: -8.508532524108887
    8. 'pivot' → logprob: -9.508532524108887
    9. '   ' → logprob: -10.008532524108887
    10. 'value' → logprob: -10.258532524108887

Token 88: ' =' (ID: 314)
  Prédit: 'root'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'root' → logprob: -1.0590882301330566
    2. 'ur' → logprob: -1.3090882301330566
    3. 'urrent' → logprob: -2.3090882301330566
    4. 'val' → logprob: -2.6840882301330566
    5. '_root' → logprob: -2.8090882301330566
    6. ' =' → logprob: -3.5590882301330566
    7. '=' → logprob: -3.5590882301330566
    8. 'v' → logprob: -3.8090882301330566
    9. 'idx' → logprob: -4.809088230133057
    10. '_val' → logprob: -4.934088230133057

Token 89: ' pre' (ID: 876)
  Prédit: 'pre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pre' → logprob: -0.03016049414873123
    2. 'ino' → logprob: -3.655160427093506
    3. ' pre' → logprob: -6.530160427093506
    4. 'in' → logprob: -7.155160427093506
    5. 'l' → logprob: -7.780160427093506
    6. ' ino' → logprob: -8.280160903930664
    7. '   ' → logprob: -8.530160903930664
    8. '	pre' → logprob: -8.655160903930664
    9. '  ' → logprob: -9.030160903930664
    10. ' ' → logprob: -9.155160903930664

Token 90: '.p' (ID: 1201)
  Prédit: '.p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -2.7133641196996905e-05
    2. 'p' → logprob: -11.37502670288086
    3. '.' → logprob: -11.50002670288086
    4. '.pop' → logprob: -13.12502670288086
    5. '[' → logprob: -13.75002670288086
    6. 'opleft' → logprob: -14.12502670288086
    7. '```' → logprob: -15.12502670288086
    8. ' .' → logprob: -15.25002670288086
    9. '.l' → logprob: -15.37502670288086
    10. '   ' → logprob: -15.62502670288086

Token 91: 'opleft' (ID: 182170)
  Prédit: 'opleft'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'opleft' → logprob: -0.006756459828466177
    2. 'ople' → logprob: -5.00675630569458
    3. 'op' → logprob: -10.506756782531738
    4. 'ple' → logprob: -12.006756782531738
    5. 'opl' → logprob: -12.256756782531738
    6. 'oplevel' → logprob: -13.006756782531738
    7. 'left' → logprob: -15.256756782531738
    8. 'p' → logprob: -16.506755828857422
    9. '```' → logprob: -16.506755828857422
    10. '0' → logprob: -17.381755828857422

Token 92: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -9.960946772480384e-05
    2. '())' → logprob: -9.625099182128906
    3. '()
' → logprob: -10.625099182128906
    4. '(' → logprob: -12.125099182128906
    5. '()`' → logprob: -13.625099182128906
    6. '()]' → logprob: -14.000099182128906
    7. ')' → logprob: -14.375099182128906
    8. '()

' → logprob: -14.875099182128906
    9. ' ()' → logprob: -15.250099182128906
    10. '()\' → logprob: -15.875099182128906

Token 93: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5507714748382568
    2. '   ' → logprob: -0.9257714748382568
    3. 'index' → logprob: -5.050771713256836
    4. 'idx' → logprob: -5.300771713256836
    5. '<|end|>' → logprob: -6.050771713256836
    6. '    
' → logprob: -6.300771713256836
    7. 'pos' → logprob: -6.550771713256836
    8. 'root' → logprob: -6.675771713256836
    9. ' ' → logprob: -6.925771713256836
    10. '        
' → logprob: -7.425771713256836

Token 94: ' m' (ID: 284)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.6752403974533081
    2. 'mid' → logprob: -1.550240397453308
    3. 'root' → logprob: -2.6752405166625977
    4. 'i' → logprob: -2.8002405166625977
    5. 'index' → logprob: -3.1752405166625977
    6. ' idx' → logprob: -3.6752405166625977
    7. ' mid' → logprob: -3.6752405166625977
    8. 'm' (adapté à ' m') → logprob: -4.300240516662598
    9. 'k' → logprob: -5.175240516662598
    10. 'pos' → logprob: -5.175240516662598

Token 95: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08245536684989929
    2. ' =' → logprob: -2.7074553966522217
    3. 'id' → logprob: -4.832455158233643
    4. 'iddle' → logprob: -5.832455158233643
    5. '=in' → logprob: -7.207455158233643
    6. 'idx' → logprob: -8.2074556350708
    7. '=index' → logprob: -9.5824556350708
    8. '=int' → logprob: -9.9574556350708
    9. '=id' → logprob: -10.0824556350708
    10. 'index' → logprob: -10.3324556350708

Token 96: ' ino' (ID: 89364)
  Prédit: 'ino'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ino' → logprob: -0.01489334087818861
    2. ' ino' → logprob: -4.264893531799316
    3. 'l' → logprob: -8.389893531799316
    4. '0' → logprob: -8.514893531799316
    5. 'r' → logprob: -9.264893531799316
    6. ' ' → logprob: -10.514893531799316
    7. '   ' → logprob: -10.639893531799316
    8. '  ' → logprob: -11.014893531799316
    9. 'ono' → logprob: -11.014893531799316
    10. 'inu' → logprob: -11.514893531799316

Token 97: '.index' (ID: 9736)
  Prédit: '.index'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.index' → logprob: -0.0025144272949546576
    2. '.' → logprob: -6.127514362335205
    3. ' .' → logprob: -8.377514839172363
    4. 'index' → logprob: -9.377514839172363
    5. '.Index' → logprob: -12.502514839172363
    6. '.find' → logprob: -12.627514839172363
    7. '.l' → logprob: -13.377514839172363
    8. ' index' → logprob: -13.627514839172363
    9. '[l' → logprob: -14.127514839172363
    10. 's' → logprob: -14.752514839172363

Token 98: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -8.77627644513268e-06
    2. '(' → logprob: -11.750008583068848
    3. 'c' → logprob: -14.125008583068848
    4. ' (' → logprob: -16.250009536743164
    5. ' c' → logprob: -19.125009536743164
    6. '(
' → logprob: -19.375009536743164
    7. ')c' → logprob: -20.500009536743164
    8. '[c' → logprob: -20.750009536743164
    9. '(s' → logprob: -21.375009536743164
    10. '©' → logprob: -21.500009536743164

Token 99: ')
' (ID: 446)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5054031014442444
    2. ')' → logprob: -1.6304030418395996
    3. ',l' → logprob: -1.6304030418395996
    4. ' ,' → logprob: -5.5054030418396
    5. ',r' → logprob: -7.7554030418396
    6. ' )' → logprob: -9.005403518676758
    7. ')
' → logprob: -9.255403518676758
    8. ')+' → logprob: -9.380403518676758
    9. ' l' → logprob: -9.630403518676758
    10. ',m' → logprob: -9.630403518676758

Token 100: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06630900502204895
    2. '   ' → logprob: -3.3163089752197266
    3. '
' → logprob: -4.191308975219727
    4. '```' → logprob: -5.441308975219727
    5. 're' → logprob: -5.816308975219727
    6. ' ' → logprob: -6.441308975219727
    7. '        
' → logprob: -6.441308975219727
    8. '<|end|>' → logprob: -7.066308975219727
    9. '  
' → logprob: -8.566308975219727
    10. ')' → logprob: -8.691308975219727

Token 101: ' reconstruction' (ID: 68152)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.11489938944578171
    2. '   ' → logprob: -2.6148993968963623
    3. '       ' → logprob: -3.3648993968963623
    4. ' reconstruction' → logprob: -7.739899158477783
    5. '
' → logprob: -8.864899635314941
    6. ' ' → logprob: -9.739899635314941
    7. '```' → logprob: -9.989899635314941
    8. '    
' → logprob: -10.364899635314941
    9. '	re' → logprob: -10.364899635314941
    10. '        
' → logprob: -10.489899635314941

Token 102: '(l' (ID: 4179)
  Prédit: '(l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(l' → logprob: -2.4868770196917467e-05
    2. '(' → logprob: -10.625024795532227
    3. 'l' → logprob: -14.875024795532227
    4. '```' → logprob: -16.250024795532227
    5. '(m' → logprob: -16.875024795532227
    6. ' (' → logprob: -17.125024795532227
    7. '	l' → logprob: -17.375024795532227
    8. ' l' → logprob: -17.625024795532227
    9. ',l' → logprob: -18.000024795532227
    10. '(L' → logprob: -18.750024795532227

Token 103: ',' (ID: 11)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.41715097427368164
    2. ',' → logprob: -1.6671509742736816
    3. ' m' → logprob: -1.9171509742736816
    4. ',m' → logprob: -5.292150974273682
    5. ' ,' → logprob: -9.042150497436523
    6. ' ' → logprob: -9.792150497436523
    7. '   ' → logprob: -10.542150497436523
    8. '	m' → logprob: -10.792150497436523
    9. '(m' → logprob: -12.167150497436523
    10. '  ' → logprob: -12.292150497436523

Token 104: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.0325924449716695e-05
    2. ' m' → logprob: -11.50001049041748
    3. '   ' → logprob: -17.375009536743164
    4. '	m' → logprob: -17.625009536743164
    5. ' ' → logprob: -18.625009536743164
    6. '
' → logprob: -19.125009536743164
    7. '           ' → logprob: -19.125009536743164
    8. '    ' → logprob: -19.250009536743164
    9. '       ' → logprob: -19.625009536743164
    10. '+m' → logprob: -19.625009536743164

Token 105: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.12306433171033859
    2. ')' → logprob: -2.2480642795562744
    3. '       ' → logprob: -4.6230645179748535
    4. '   ' → logprob: -7.9980645179748535
    5. ' )
' → logprob: -11.248064041137695
    6. ')

' → logprob: -12.123064041137695
    7. ')
' → logprob: -12.248064041137695
    8. ' ' → logprob: -13.623064041137695
    9. ' )' → logprob: -13.748064041137695
    10. 're' → logprob: -14.373064041137695

Token 106: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2551165521144867
    2. 're' → logprob: -1.505116581916809
    3. ' reconstruction' → logprob: -6.2551164627075195
    4. '   ' → logprob: -6.7551164627075195
    5. 'post' → logprob: -10.13011646270752
    6. '```' → logprob: -10.38011646270752
    7. ' ' → logprob: -11.75511646270752
    8. '	re' → logprob: -12.25511646270752
    9. '
' → logprob: -13.13011646270752
    10. ' post' → logprob: -13.25511646270752

Token 107: ' reconstruction' (ID: 68152)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.009826449677348137
    2. '       ' → logprob: -4.75982666015625
    3. ' reconstruction' → logprob: -6.75982666015625
    4. '   ' → logprob: -10.13482666015625
    5. '```' → logprob: -12.38482666015625
    6. '	re' → logprob: -13.00982666015625
    7. '           ' → logprob: -13.38482666015625
    8. ' ' → logprob: -14.00982666015625
    9. '
' → logprob: -14.25982666015625
    10. '               ' → logprob: -15.00982666015625

Token 108: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.00021438424300868064
    2. 'm' → logprob: -9.125214576721191
    3. '(' → logprob: -9.250214576721191
    4. ' (' → logprob: -11.875214576721191
    5. ' m' → logprob: -13.750214576721191
    6. ' ' → logprob: -14.750214576721191
    7. '(
' → logprob: -15.375214576721191
    8. ')' → logprob: -15.500214576721191
    9. '```' → logprob: -16.125213623046875
    10. ',' → logprob: -16.500213623046875

Token 109: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.004652268718928099
    2. ' +' → logprob: -5.379652500152588
    3. ',' → logprob: -10.50465202331543
    4. '+r' → logprob: -13.00465202331543
    5. '+,' → logprob: -13.12965202331543
    6. '```' → logprob: -16.12965202331543
    7. '+
' → logprob: -16.62965202331543
    8. ' ,' → logprob: -16.87965202331543
    9. '1' → logprob: -16.87965202331543
    10. '＋' → logprob: -17.75465202331543

Token 110: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02158612199127674
    2. 'r' → logprob: -3.8965861797332764
    3. ',' → logprob: -7.521585941314697
    4. ' r' → logprob: -8.021586418151855
    5. ' ' → logprob: -8.896586418151855
    6. ',r' → logprob: -10.521586418151855
    7. '   ' → logprob: -12.146586418151855
    8. ')' → logprob: -13.146586418151855
    9. ' ,' → logprob: -13.896586418151855
    10. '```' → logprob: -14.146586418151855

Token 111: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0025877889711409807
    2. ',r' → logprob: -6.627587795257568
    3. ' ,' → logprob: -6.752587795257568
    4. 'r' → logprob: -9.37758731842041
    5. ' r' → logprob: -11.75258731842041
    6. ',
' → logprob: -15.00258731842041
    7. '   ' → logprob: -16.377588272094727
    8. '`,' → logprob: -16.752588272094727
    9. '，' → logprob: -17.002588272094727
    10. ' ' → logprob: -17.127588272094727

Token 112: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.003179259831085801
    2. ' r' → logprob: -5.75317907333374
    3. '   ' → logprob: -14.003179550170898
    4. '       ' → logprob: -15.128179550170898
    5. '	r' → logprob: -15.753179550170898
    6. ' ' → logprob: -15.878179550170898
    7. '
' → logprob: -15.878179550170898
    8. '     ' → logprob: -17.2531795501709
    9. '    ' → logprob: -17.3781795501709
    10. ')' → logprob: -18.0031795501709

Token 113: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6932964324951172
    2. ')
' → logprob: -0.6932964324951172
    3. '       ' → logprob: -9.318296432495117
    4. ')
' → logprob: -10.193296432495117
    5. '   ' → logprob: -10.818296432495117
    6. ' )
' → logprob: -14.568296432495117
    7. ' )' → logprob: -15.068296432495117
    8. ')

' → logprob: -15.193296432495117
    9. '
' → logprob: -15.568296432495117
    10. '<|end|>' → logprob: -16.568296432495117

Token 114: '        
' (ID: 3564)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8625773787498474
    2. 'post' → logprob: -0.8625773787498474
    3. '   ' → logprob: -1.8625774383544922
    4. ' post' → logprob: -7.487577438354492
    5. '	post' → logprob: -11.362577438354492
    6. '```' → logprob: -12.487577438354492
    7. ' ' → logprob: -12.987577438354492
    8. '  ' → logprob: -13.487577438354492
    9. ''post' → logprob: -13.987577438354492
    10. '     ' → logprob: -14.862577438354492

Token 115: '       ' (ID: 309)
  Prédit: 'post'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'post' → logprob: -0.0270373597741127
    2. '       ' → logprob: -4.027037143707275
    3. '   ' → logprob: -4.777037143707275
    4. ' post' → logprob: -7.777037143707275
    5. '	post' → logprob: -12.152037620544434
    6. ' ' → logprob: -13.652037620544434
    7. ''post' → logprob: -15.027037620544434
    8. '  ' → logprob: -15.027037620544434
    9. 'print' → logprob: -15.277037620544434
    10. '```' → logprob: -15.777037620544434

Token 116: ' post' (ID: 1926)
  Prédit: 'post'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'post' (adapté à ' post') → logprob: -5.319370302458992e-06
    2. ' post' → logprob: -12.250005722045898
    3. 'print' → logprob: -15.500005722045898
    4. '       ' → logprob: -15.625005722045898
    5. '   ' → logprob: -16.8750057220459
    6. '	post' → logprob: -18.2500057220459
    7. ''post' → logprob: -21.7500057220459
    8. '.post' → logprob: -21.8750057220459
    9. '```' → logprob: -22.0000057220459
    10. '$post' → logprob: -22.7500057220459

Token 117: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0002481078845448792
    2. '.' → logprob: -8.375247955322266
    3. 'append' → logprob: -11.625247955322266
    4. '.app' → logprob: -12.750247955322266
    5. ' .' → logprob: -13.625247955322266
    6. '.extend' → logprob: -13.875247955322266
    7. '.add' → logprob: -14.375247955322266
    8. '.push' → logprob: -14.500247955322266
    9. '.py' → logprob: -14.625247955322266
    10. '.Append' → logprob: -15.000247955322266

Token 118: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -9.729906196298543e-06
    2. '(' → logprob: -11.750009536743164
    3. 'c' → logprob: -13.250009536743164
    4. '((' → logprob: -17.000009536743164
    5. '(
' → logprob: -19.625009536743164
    6. '(C' → logprob: -19.750009536743164
    7. '(str' → logprob: -19.875009536743164
    8. ')c' → logprob: -19.875009536743164
    9. ' (' → logprob: -20.375009536743164
    10. '(chr' → logprob: -20.500009536743164

Token 119: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.796184723294573e-06
    2. ')
' → logprob: -12.125005722045898
    3. ' )' → logprob: -15.250005722045898
    4. '))' → logprob: -17.7500057220459
    5. '   ' → logprob: -18.0000057220459
    6. ')

' → logprob: -18.7500057220459
    7. ')return' → logprob: -19.2500057220459
    8. ')`' → logprob: -19.2500057220459
    9. '`)' → logprob: -19.3750057220459
    10. '),' → logprob: -19.3750057220459

Token 120: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08433832973241806
    2. 're' → logprob: -2.584338426589966
    3. '    
' → logprob: -5.834338188171387
    4. '
' → logprob: -6.584338188171387
    5. '<|end|>' → logprob: -8.209338188171387
    6. ')' → logprob: -8.709338188171387
    7. 'post' → logprob: -8.834338188171387
    8. '  
' → logprob: -9.084338188171387
    9. ' reconstruction' → logprob: -9.209338188171387
    10. ' 
' → logprob: -9.584338188171387

Token 121: ' reconstruction' (ID: 68152)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.004137410782277584
    2. '   ' → logprob: -5.5041375160217285
    3. ' reconstruction' → logprob: -9.87913703918457
    4. '    
' → logprob: -12.75413703918457
    5. ' ' → logprob: -13.62913703918457
    6. '	re' → logprob: -14.12913703918457
    7. '  ' → logprob: -14.25413703918457
    8. '0' → logprob: -14.25413703918457
    9. '
' → logprob: -14.37913703918457
    10. 'rec' → logprob: -14.62913703918457

Token 122: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.054500666621607e-06
    2. '0' → logprob: -13.00000286102295
    3. ' (' → logprob: -14.12500286102295
    4. '((' → logprob: -17.625003814697266
    5. '(
' → logprob: -18.375003814697266
    6. '```' → logprob: -19.125003814697266
    7. '()' → logprob: -19.375003814697266
    8. '
' → logprob: -19.625003814697266
    9. '(len' → logprob: -19.750003814697266
    10. '<|end|>' → logprob: -20.000003814697266

Token 123: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.935296834039036e-06
    2. ' ' → logprob: -13.12500286102295
    3. '(' → logprob: -14.00000286102295
    4. '   ' → logprob: -17.250003814697266
    5. 'n' → logprob: -18.500003814697266
    6. ')' → logprob: -18.750003814697266
    7. '۰' → logprob: -19.000003814697266
    8. '０' → logprob: -19.500003814697266
    9. '  ' → logprob: -20.000003814697266
    10. '00' → logprob: -20.125003814697266

Token 124: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006109735928475857
    2. 'n' → logprob: -5.756109714508057
    3. ',n' → logprob: -5.881109714508057
    4. ' ,' → logprob: -9.131110191345215
    5. '   ' → logprob: -11.256110191345215
    6. ' n' → logprob: -11.506110191345215
    7. ',
' → logprob: -12.881110191345215
    8. ')' → logprob: -13.256110191345215
    9. '(n' → logprob: -16.0061092376709
    10. ')n' → logprob: -16.2561092376709

Token 125: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00011570196511456743
    2. 'len' → logprob: -9.250115394592285
    3. ' n' → logprob: -10.875115394592285
    4. '   ' → logprob: -14.375115394592285
    5. ' ' → logprob: -16.7501163482666
    6. ' len' → logprob: -17.1251163482666
    7. '  ' → logprob: -17.3751163482666
    8. '	n' → logprob: -17.3751163482666
    9. '
' → logprob: -17.7501163482666
    10. '    ' → logprob: -18.8751163482666

Token 126: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ')
' → logprob: -12.250008583068848
    3. '))' → logprob: -13.375008583068848
    4. '`)' → logprob: -14.625008583068848
    5. ')`' → logprob: -14.750008583068848
    6. ' )' → logprob: -15.125008583068848
    7. ')n' → logprob: -15.625008583068848
    8. '),' → logprob: -16.25000762939453
    9. '   ' → logprob: -16.50000762939453
    10. '<|end|>' → logprob: -17.00000762939453

Token 127: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03870779275894165
    2. 'for' → logprob: -3.288707733154297
    3. '   ' → logprob: -7.413707733154297
    4. '
' → logprob: -10.288707733154297
    5. '    
' → logprob: -11.413707733154297
    6. ' for' → logprob: -11.788707733154297
    7. ' print' → logprob: -12.413707733154297
    8. '  
' → logprob: -13.163707733154297
    9. 'post' → logprob: -13.413707733154297
    10. '```' → logprob: -13.663707733154297

Token 128: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0007166040013544261
    2. 'for' → logprob: -7.250716686248779
    3. ' print' → logprob: -12.250716209411621
    4. '
' → logprob: -14.125716209411621
    5. '   ' → logprob: -14.625716209411621
    6. '    
' → logprob: -14.875716209411621
    7. ' for' → logprob: -15.500716209411621
    8. '  
' → logprob: -16.625717163085938
    9. '```' → logprob: -17.125717163085938
    10. ' 
' → logprob: -17.625717163085938

Token 129: '("' (ID: 568)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.8843159079551697
    2. '(' → logprob: -1.3843159675598145
    3. '(*' → logprob: -2.0093159675598145
    4. '(post' → logprob: -2.0093159675598145
    5. '("' → logprob: -2.7593159675598145
    6. '("("' → logprob: -5.3843159675598145
    7. '("")' → logprob: -9.009315490722656
    8. '(tuple' → logprob: -9.509315490722656
    9. '()' → logprob: -10.384315490722656
    10. 'post' → logprob: -10.634315490722656

Token 130: ' ".' (ID: 11730)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06690145283937454
    2. ''' → logprob: -3.066901445388794
    3. '*' → logprob: -4.941901683807373
    4. ''post' → logprob: -5.316901683807373
    5. 'post' → logprob: -6.066901683807373
    6. ' ".' → logprob: -6.191901683807373
    7. '(*' → logprob: -6.941901683807373
    8. '".' → logprob: -8.066901206970215
    9. ' "' → logprob: -8.316901206970215
    10. ' post' → logprob: -10.066901206970215

Token 131: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -1.0280383548888494e-06
    2. ' join' → logprob: -14.625000953674316
    3. 'jo' → logprob: -14.875000953674316
    4. 'j' → logprob: -15.875000953674316
    5. 'print' → logprob: -18.250001907348633
    6. '(join' → logprob: -18.500001907348633
    7. '```' → logprob: -18.875001907348633
    8. 'strip' → logprob: -19.125001907348633
    9. '"' → logprob: -19.500001907348633
    10. '.join' → logprob: -20.000001907348633

Token 132: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.0019818067084997892
    2. '(str' → logprob: -6.251981735229492
    3. '([' → logprob: -10.376981735229492
    4. 'map' → logprob: -11.126981735229492
    5. '(post' → logprob: -12.376981735229492
    6. '(list' → logprob: -12.876981735229492
    7. '(' → logprob: -14.876981735229492
    8. 'str' → logprob: -16.626981735229492
    9. ' map' → logprob: -17.251981735229492
    10. '	map' → logprob: -17.751981735229492

Token 133: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -6.313314952421933e-05
    2. 'str' → logprob: -9.750062942504883
    3. '(' → logprob: -12.875062942504883
    4. ' str' → logprob: -14.250062942504883
    5. ')' → logprob: -14.375062942504883
    6. '```' → logprob: -15.125062942504883
    7. '(post' → logprob: -15.375062942504883
    8. '	str' → logprob: -15.625062942504883
    9. '=str' → logprob: -16.125062942504883
    10. '(int' → logprob: -16.250062942504883

Token 134: ',' (ID: 11)
  Prédit: '(post'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(post' → logprob: -1.2113979209971149e-05
    2. '(' → logprob: -11.875012397766113
    3. 'post' → logprob: -12.500012397766113
    4. ')' → logprob: -14.875012397766113
    5. ' (' → logprob: -14.875012397766113
    6. ' post' → logprob: -15.500012397766113
    7. ',' → logprob: -16.000011444091797
    8. '(posts' → logprob: -16.125011444091797
    9. ''post' → logprob: -16.250011444091797
    10. '	post' → logprob: -16.250011444091797

Token 135: ' post' (ID: 1926)
  Prédit: 'post'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'post' → logprob: -0.00020973898062948138
    2. ' post' → logprob: -8.50020980834961
    3. '(post' → logprob: -12.00020980834961
    4. ''post' → logprob: -17.87520980834961
    5. '	post' → logprob: -17.87520980834961
    6. '   ' → logprob: -19.12520980834961
    7. '$post' → logprob: -19.62520980834961
    8. '
' → logprob: -21.37520980834961
    9. ')' → logprob: -21.62520980834961
    10. '.post' → logprob: -21.87520980834961

Token 136: ')))' (ID: 15975)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5760228633880615
    2. ')))' → logprob: -0.8260228633880615
    3. ')' → logprob: -9.45102310180664
    4. '))))' → logprob: -13.32602310180664
    5. ' ' → logprob: -14.07602310180664
    6. '))
' → logprob: -14.32602310180664
    7. '()))' → logprob: -14.57602310180664
    8. ')))
' → logprob: -14.70102310180664
    9. ' ))' → logprob: -15.07602310180664
    10. '   ' → logprob: -15.82602310180664


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 134
Tokens correctement prédits (1ère position, stricte): 55
Tokens correctement prédits (1ère position, avec adaptation): 60
Tokens correctement prédits (top 10): 115
Précision stricte (1ère position): 41.04%
Précision adaptée (1ère position): 44.78%
Précision (top 10): 85.82%
================================================================================
