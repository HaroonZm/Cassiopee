================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:20:09
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
MOD = 10**9 + 7
ans = pow(k, n, MOD)
print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02371370419859886
    2. ' =' → logprob: -4.3987135887146
    3. ',' → logprob: -4.5237135887146
    4. ' ' → logprob: -10.148714065551758
    5. '*' → logprob: -10.273714065551758
    6. '+' → logprob: -10.398714065551758
    7. ')' → logprob: -10.398714065551758
    8. '[' → logprob: -10.648714065551758
    9. '.' → logprob: -10.773714065551758
    10. '_' → logprob: -10.773714065551758

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06594569236040115
    2. ' map' → logprob: -3.690945625305176
    3. ' n' → logprob: -4.440945625305176
    4. '0' → logprob: -4.565945625305176
    5. ' input' → logprob: -4.940945625305176
    6. 'map' → logprob: -5.690945625305176
    7. 'input' → logprob: -5.940945625305176
    8. '10' → logprob: -6.190945625305176
    9. '1' → logprob: -7.940945625305176
    10. ' int' → logprob: -8.065945625305176

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10975809395313263
    2. '<|end|>' → logprob: -2.359758138656616
    3. '```' → logprob: -5.734757900238037
    4. '<|end|>' → logprob: -5.984757900238037
    5. ')' → logprob: -7.359757900238037
    6. '(lambda' → logprob: -7.484757900238037
    7. '(user' → logprob: -7.609757900238037
    8. 'user' → logprob: -8.484758377075195
    9. '(int' → logprob: -8.609758377075195
    10. '[' → logprob: -9.109758377075195

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.8215710520744324
    2. ')' → logprob: -1.1965711116790771
    3. '(' → logprob: -1.4465711116790771
    4. '(user' → logprob: -5.321570873260498
    5. '(n' → logprob: -5.571570873260498
    6. '```' → logprob: -5.821570873260498
    7. '`)' → logprob: -6.321570873260498
    8. '<|end|>' → logprob: -6.696570873260498
    9. '(str' → logprob: -7.071570873260498
    10. '(int' → logprob: -7.196570873260498

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5763772130012512
    2. ' input' → logprob: -0.8263772130012512
    3. '(input' → logprob: -7.8263773918151855
    4. ')' → logprob: -10.451376914978027
    5. ',input' → logprob: -12.201376914978027
    6. '=input' → logprob: -13.076376914978027
    7. '[input' → logprob: -14.576376914978027
    8. '<input' → logprob: -14.826376914978027
    9. '	input' → logprob: -15.326376914978027
    10. 'stdin' → logprob: -15.576376914978027

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6027558445930481
    2. '('' → logprob: -1.7277557849884033
    3. '().' → logprob: -2.3527557849884033
    4. ')' → logprob: -2.7277557849884033
    5. '()' → logprob: -2.8527557849884033
    6. '())' → logprob: -3.4777557849884033
    7. '("("' → logprob: -5.477756023406982
    8. '(
' → logprob: -5.727756023406982
    9. '```' → logprob: -5.852756023406982
    10. '(""))' → logprob: -6.227756023406982

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007220837287604809
    2. 'strip' → logprob: -7.2507219314575195
    3. 'rstrip' → logprob: -12.00072193145752
    4. ' split' → logprob: -12.62572193145752
    5. ')' → logprob: -13.62572193145752
    6. 'read' → logprob: -13.75072193145752
    7. '(split' → logprob: -15.00072193145752
    8. 'spl' → logprob: -15.87572193145752
    9. 'startswith' → logprob: -17.625722885131836
    10. 's' → logprob: -18.375722885131836

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08872120827436447
    2. '())' → logprob: -2.96372127532959
    3. '))' → logprob: -3.46372127532959
    4. '()' → logprob: -6.46372127532959
    5. '()))' → logprob: -8.58872127532959
    6. '`)' → logprob: -9.21372127532959
    7. '(' → logprob: -9.83872127532959
    8. '>)' → logprob: -11.46372127532959
    9. ')`' → logprob: -11.58872127532959
    10. ')))' → logprob: -11.71372127532959

Token 11: 'MOD' (ID: 52135)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.1872479915618896
    2. 'if' → logprob: -1.1872479915618896
    3. 'for' → logprob: -2.4372479915618896
    4. 'x' → logprob: -3.3122479915618896
    5. '\n' → logprob: -3.4372479915618896
    6. '#' → logprob: -3.5622479915618896
    7. 'd' → logprob: -3.6872479915618896
    8. '```' → logprob: -3.8122479915618896
    9. 's' → logprob: -4.062248229980469
    10. ' ' → logprob: -4.187248229980469

Token 12: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17597709596157074
    2. '=' → logprob: -1.925977110862732
    3. ' ' → logprob: -4.8009772300720215
    4. '_' → logprob: -5.3009772300720215
    5. ')' → logprob: -6.3009772300720215
    6. ' )' → logprob: -8.050976753234863
    7. ',' → logprob: -9.425976753234863
    8. ' =)' → logprob: -9.925976753234863
    9. '  ' → logprob: -10.675976753234863
    10. '<|end|>' → logprob: -10.925976753234863

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3896681070327759
    2. '10' → logprob: -1.1396681070327759
    3. '100' → logprob: -5.889667987823486
    4. '1' → logprob: -10.639668464660645
    5. ' ' → logprob: -14.514668464660645
    6. '109' → logprob: -15.889668464660645
    7. '`' → logprob: -16.014667510986328
    8. '998' → logprob: -16.014667510986328
    9. '(' → logprob: -16.389667510986328
    10. ' (' → logprob: -16.514667510986328

Token 14: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.020391222089529037
    2. '100' → logprob: -4.02039098739624
    3. ' ' → logprob: -6.14539098739624
    4. '1' → logprob: -9.270391464233398
    5. '998' → logprob: -13.770391464233398
    6. 'int' → logprob: -15.895391464233398
    7. '(' → logprob: -16.8953914642334
    8. '109' → logprob: -17.1453914642334
    9. '`' → logprob: -17.5203914642334
    10. '```' → logprob: -17.6453914642334

Token 15: '**' (ID: 410)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.17026114463806152
    2. '0' → logprob: -2.0452611446380615
    3. '**' → logprob: -3.6702611446380615
    4. '7' → logprob: -6.420261383056641
    5. '6' → logprob: -10.54526138305664
    6. '8' → logprob: -10.92026138305664
    7. ' ' → logprob: -11.04526138305664
    8. ' **' → logprob: -11.04526138305664
    9. '^' → logprob: -11.29526138305664
    10. '```' → logprob: -11.92026138305664

Token 16: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -1.9361264946837764e-07
    2. '09' → logprob: -16.5
    3. '```' → logprob: -19.125
    4. ' ' → logprob: -20.125
    5. '+' → logprob: -21.5
    6. '**' → logprob: -23.25
    7. '９' → logprob: -23.25
    8. '10' → logprob: -23.25
    9. '>' → logprob: -23.875
    10. '``' → logprob: -23.875

Token 17: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0003595376620069146
    2. ' +' → logprob: -8.000359535217285
    3. '7' → logprob: -10.875359535217285
    4. '+
' → logprob: -13.125359535217285
    5. '+

' → logprob: -13.250359535217285
    6. '```' → logprob: -14.500359535217285
    7. '＋' → logprob: -15.000359535217285
    8. '+</' → logprob: -16.7503604888916
    9. ' ' → logprob: -16.8753604888916
    10. '`' → logprob: -17.1253604888916

Token 18: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -5.512236498361744e-07
    2. '+' → logprob: -15.250000953674316
    3. ' ' → logprob: -15.375000953674316
    4. '```' → logprob: -18.5
    5. '07' → logprob: -19.375
    6. '9' → logprob: -19.5
    7. '   ' → logprob: -19.625
    8. '  ' → logprob: -21.5625
    9. '７' → logprob: -21.625
    10. '_' → logprob: -21.75

Token 19: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: 0.0
    2. '+' → logprob: -17.75
    3. '```' → logprob: -19.0
    4. ' ' → logprob: -19.625
    5. '07' → logprob: -21.0
    6. '9' → logprob: -21.25
    7. '   ' → logprob: -21.625
    8. '７' → logprob: -22.1875
    9. '37' → logprob: -22.3125
    10. '``' → logprob: -22.625

Token 20: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5143047571182251
    2. '\n' → logprob: -2.1393046379089355
    3. '\' → logprob: -2.8893046379089355
    4. 'result' → logprob: -3.0143046379089355
    5. '' → logprob: -3.1393046379089355
    6. 'n' → logprob: -3.3893046379089355
    7. 'a' → logprob: -3.7643046379089355
    8. '```' → logprob: -4.1393046379089355
    9. ')' → logprob: -4.3893046379089355
    10. '#' → logprob: -4.5143046379089355

Token 21: 'ans' (ID: 616)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.5281288623809814
    2. 'result' → logprob: -2.2781288623809814
    3. 'a' → logprob: -2.5281288623809814
    4. 'fact' → logprob: -2.5281288623809814
    5. '
' → logprob: -3.4031288623809814
    6. 'def' → logprob: -3.4031288623809814
    7. 'n' → logprob: -4.028128623962402
    8. 'factor' → logprob: -4.028128623962402
    9. '#' → logprob: -4.403128623962402
    10. 'd' → logprob: -5.528128623962402

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.32221150398254395
    2. '=' → logprob: -1.322211503982544
    3. ' +=' → logprob: -4.822211265563965
    4. '+=' → logprob: -8.322211265563965
    5. '_' → logprob: -8.572211265563965
    6. ' ' → logprob: -8.697211265563965
    7. ' *=' → logprob: -8.947211265563965
    8. ')' → logprob: -10.947211265563965
    9. '[' → logprob: -11.072211265563965
    10. '+' → logprob: -11.322211265563965

Token 23: ' pow' (ID: 9779)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.48618584871292114
    2. ' ' → logprob: -0.9861858487129211
    3. 'pow' → logprob: -4.6111860275268555
    4. ' pow' → logprob: -6.8611860275268555
    5. '0' → logprob: -7.2361860275268555
    6. ' (' → logprob: -9.111186027526855
    7. ' n' → logprob: -9.361186027526855
    8. '(' → logprob: -9.861186027526855
    9. 'n' → logprob: -10.111186027526855
    10. '(n' → logprob: -11.236186027526855

Token 24: '(k' (ID: 12125)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04876892641186714
    2. '(n' → logprob: -3.048768997192383
    3. '(pow' → logprob: -9.423768997192383
    4. '(k' → logprob: -9.548768997192383
    5. '(a' → logprob: -11.173768997192383
    6. '(base' → logprob: -12.298768997192383
    7. '(ans' → logprob: -12.798768997192383
    8. '((' → logprob: -13.673768997192383
    9. '(`' → logprob: -14.048768997192383
    10. '(sum' → logprob: -14.048768997192383

Token 25: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6767644882202148
    2. ',n' → logprob: -0.8017644882202148
    3. 'n' → logprob: -3.176764488220215
    4. '-' → logprob: -7.051764488220215
    5. ',k' → logprob: -8.426764488220215
    6. '(n' → logprob: -9.676764488220215
    7. ' ,' → logprob: -9.676764488220215
    8. '-n' → logprob: -9.801764488220215
    9. 'k' → logprob: -10.051764488220215
    10. ')' → logprob: -10.176764488220215

Token 26: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0004892880679108202
    2. ' n' → logprob: -7.625489234924316
    3. 'k' → logprob: -14.750489234924316
    4. ')n' → logprob: -15.000489234924316
    5. '_n' → logprob: -15.625489234924316
    6. '(n' → logprob: -16.125490188598633
    7. ')' → logprob: -16.500490188598633
    8. '	n' → logprob: -16.625490188598633
    9. ' ' → logprob: -16.875490188598633
    10. '(' → logprob: -17.625490188598633

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4294120669364929
    2. ')' → logprob: -1.0544121265411377
    3. ' ,' → logprob: -7.429411888122559
    4. ' )' → logprob: -10.054411888122559
    5. ',k' → logprob: -10.554411888122559
    6. '```' → logprob: -11.429411888122559
    7. '),' → logprob: -11.929411888122559
    8. '`,' → logprob: -12.429411888122559
    9. '))' → logprob: -12.554411888122559
    10. ',)' → logprob: -12.679411888122559

Token 28: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.0011720098555088043
    2. ' MOD' → logprob: -6.751172065734863
    3. ')' → logprob: -13.251172065734863
    4. '_MOD' → logprob: -17.501171112060547
    5. '.MOD' → logprob: -18.501171112060547
    6. 'MO' → logprob: -18.751171112060547
    7. ' )' → logprob: -19.001171112060547
    8. '```' → logprob: -19.501171112060547
    9. ' ' → logprob: -19.876171112060547
    10. 'mod' → logprob: -20.501171112060547

Token 29: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. '*' → logprob: -14.625001907348633
    3. '**' → logprob: -14.750001907348633
    4. ')
' → logprob: -15.125001907348633
    5. '))' → logprob: -15.625001907348633
    6. ')**' → logprob: -16.125001907348633
    7. ' )' → logprob: -16.375001907348633
    8. '),' → logprob: -16.750001907348633
    9. ')`' → logprob: -16.875001907348633
    10. '```' → logprob: -17.125001907348633

Token 30: 'print' (ID: 1598)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.011776525527238846
    2. 'for' → logprob: -5.011776447296143
    3. '\n' → logprob: -5.761776447296143
    4. '#' → logprob: -7.511776447296143
    5. ' for' → logprob: -8.0117769241333
    6. 'n' → logprob: -8.7617769241333
    7. 'print' → logprob: -9.0117769241333
    8. ')' → logprob: -9.0117769241333
    9. 'if' → logprob: -9.3867769241333
    10. '\' → logprob: -9.7617769241333

Token 31: '(ans' (ID: 70054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.029782310128211975
    2. '(ans' → logprob: -3.529782295227051
    3. '("("' → logprob: -11.27978229522705
    4. '((' → logprob: -12.15478229522705
    5. '()' → logprob: -12.52978229522705
    6. '(`' → logprob: -13.15478229522705
    7. '(

' → logprob: -13.65478229522705
    8. '(len' → logprob: -13.65478229522705
    9. '(a' → logprob: -14.52978229522705
    10. '(
' → logprob: -14.65478229522705

Token 32: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.253090865968261e-06
    2. '))' → logprob: -11.625009536743164
    3. ' )' → logprob: -16.000009536743164
    4. '`)' → logprob: -17.125009536743164
    5. '')' → logprob: -18.250009536743164
    6. ')`' → logprob: -18.250009536743164
    7. ')))' → logprob: -18.750009536743164
    8. ')
' → logprob: -19.125009536743164
    9. ')}' → logprob: -19.625009536743164
    10. ')**' → logprob: -19.750009536743164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 30
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 26
Précision stricte (1ère position): 36.67%
Précision adaptée (1ère position): 36.67%
Précision (top 10): 86.67%
================================================================================
