# 入力として、N, A, Bの3つの整数を受け取る
# input()はユーザーから1行の文字列入力を取得し、split()で空白で分割しリスト化する
# map(int, ...) で各要素を整数型に変換
N, A, B = map(int, input().split())

# HはN個の要素からなるリスト
# 各要素は1行ずつ整数として入力され、それをint型でHリストへ格納
H = [int(input()) for _ in range(N)]

# func(x)は、与えられたxについて条件を満たすか判定する関数
def func(x):
    # attackはA-B攻撃が必要な回数をカウントするための変数で、初期値0
    attack = 0
    # Hの各要素h（各モンスターの体力）についてループ処理
    for h in H:
        # まずBの攻撃をx回全体攻撃として各モンスターに与える
        # h - B * x は、そのモンスターへの全体攻撃（B*X）後に残った体力を計算する
        hp = h - B * x
        # hp <= 0 なら、そのモンスターは全体攻撃のみで倒せているので追加攻撃不要
        if hp <= 0:
            continue # 何もせず次のモンスターへ
        # hp > 0 の場合、その体力分だけ個別攻撃が必要
        # 1回の通常攻撃で与えられるダメージは A-B（A攻撃によりB分は全体攻撃で既に減っている）
        # hp // (A - B) で割ることで何回攻撃が必要か計算（ただし切り上げ）
        # -(-hp // (A - B)) で切り上げ計算（負の値での切り捨て除算）
        attack += -(-hp // (A - B))
        # たとえばhp=11, (A-B)=3なら、11//3=3だが実際は4回必要（切り上げ）
    # すべてのモンスターを見た後、通常攻撃がx回以内で済むならこのxは条件を満たす
    if attack > x:
        return 0 # 攻撃回数がxを超えた場合、条件不成立（Falseを返す）
    else:
        return 1 # 攻撃回数がx以内で収まる場合、条件成立（Trueを返す）

# 二分探索を使って最小のxを求める。xは全体攻撃の回数
# lとrは探索範囲で、lは条件を満たさない最右値、rは条件を満たす最左値（いずれも初期値をとる）
l, r = -1, 10 ** 9 # lは負数で必ず不成立、rは十分大きな値で必ず成立する想定

# r-l>1 となるまでループ（探索範囲が1になるまで実施）
while (r - l > 1):
    # 探索範囲の中央値midを整数商で計算
    mid = (l + r) // 2
    # func(mid)が条件を満たす場合
    if func(mid):
        r = mid # rをより左（小さな値）に寄せる→より最小のxを求めるため
    else:
        l = mid # 条件不成立なのでlをmidに更新し探索範囲を狭める

# ループ終了時、rが条件を満たす最小のxになる
print(r) # 結果を出力