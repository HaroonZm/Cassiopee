# 初期化: 四つの変数(i, j, k, l)を全て整数値0で定義します。
# これらは後で三角形の個数や種別ごとのカウンタとして使用されます。
i = 0  # 全体の三角形の数を数えるカウンタ
j = 0  # 直角三角形の個数カウンタ（cosがちょうど0の場合）
k = 0  # 鋭角三角形の個数カウンタ（cosが正の場合）
l = 0  # 鈍角三角形の個数カウンタ（cosが負の場合）

# 無限ループを開始します。break文が呼ばれるまで、このループは終了しません。
while True:
    # 入力受付: ユーザから一行分の入力を取得します。例えば「2 3 4」などです。
    # input()関数で入力を受け取り、その返り値（文字列）はsplit()メソッドで空白区切りで分割されます。
    # 得られたリスト（例えば["2","3","4"]）は、リスト内包表記([int(i) for i in ...])を使い、それぞれ文字列をint関数で整数に変換されます。
    # 結果として[2, 3, 4]のような整数リストになります。このリストをlistTRIという変数に格納します。
    listTRI = [int(i) for i in input().split()]
    
    # 次に三角形の辺の長さの合計を求めます。
    # sum()関数を使い、リスト内の整数値を全て合計します。
    sumList = sum(listTRI)
    
    # 三角形が成立する条件1: 最短辺が0以下だと三角形は作れないのでbreakします。
    # min()関数でlistTRI内の最小値を取得し、それが0以下ならループを抜ける、という制御です。
    if min(listTRI) <= 0:
        break

    # 三角形が成立する条件2: 任意の辺の長さが、他2辺の和以上の場合も三角形が作れません。
    # sumListは3辺の合計。最大辺の長さをmax(listTRI)で求め、その値をmax(listTRI)とします。
    # 三角形成立条件「各辺 < 残り2辺の和」が成立しているか判定します。
    # sumListから最大辺を引いた値（残り2辺の和）が最大辺以下ならbreakします。
    if sumList - max(listTRI) <= max(listTRI):
        break
    
    # 最大辺のインデックス（添字）を取得します。
    # list.index(値)で、その値（最大値）がリストの中のどこにあるかを取得できます。
    maxIND = listTRI.index(max(listTRI))
    
    # ここから、最大の辺に対する余弦定理（cos c）を計算します。
    # まず、「全ての辺の2乗の合計」から「（最大辺の2乗を2回分）」引いた値cos1を求めます。
    # map(lambda x: x ** 2, listTRI)で各辺の2乗値をリスト化し、sum()で合計値を計算します。
    # 最大辺(listTRI[maxIND])の2乗値を2倍してこれを引きます。
    cos1 = sum(map(lambda x: x ** 2, listTRI)) - ((listTRI[maxIND] ** 2) * 2)
    
    # 次に「全ての辺の2倍の合計」から「最大辺の2倍」を引いた値cos2を求めます。
    # sumList * 2が"全ての辺の2倍の合計"、listTRI[maxIND]*2が最大辺の2倍です。
    cos2 = sumList * 2 - (listTRI[maxIND] * 2)
    
    # cos1をcos2で割ることで、最大辺を挟む角度のcos値を求めます。
    # これは余弦定理に基づいて計算されています。
    cosTRI = cos1 / cos2
    
    # 三角形を分類します。
    # cosTRIが負の場合は鈍角三角形、0の場合は直角三角形、正の場合は鋭角三角形です。
    if cosTRI < 0:
        i += 1        # 総個数カウンタを1増やす
        l += 1        # 鈍角三角形カウンタを1増やす
    elif 0 < cosTRI:
        i += 1        # 総個数カウンタを1増やす
        k += 1        # 鋭角三角形カウンタを1増やす
    else:
        i += 1        # 総個数カウンタを1増やす
        j += 1        # 直角三角形カウンタを1増やす（cosの値が厳密に0の場合）

# ループ終了後、各カウンタ値の結果を表示します。
# print関数は、複数の値をカンマ区切りで出力します。
# i（総三角形数）、j（直角三角形数）、k（鋭角三角形数）、l（鈍角三角形数）の順で出力します。
print(i, j, k, l)