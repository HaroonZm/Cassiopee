En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(n,m):
        a = [int(S(), 2) for _ in range(m)]
        mi = 0
        ma = max(a)
        while 2**mi <= ma:
            mi += 1
        ii = [2**i for i in range(mi+1)]

        fm = {}
        def _f(a):
            k = tuple(a)
            if k in fm:
                return fm[k]

            if len(a) < 2:
                fm[k] = 0
                return 0

            r = inf
            for i in ii:
                a1 = []
                a2 = []
                for c in a:
                    if i & c:
                        a1.append(c)
                    else:
                        a2.append(c)
                if not a1 or not a2:
                    continue
                r1 = _f(a1)
                r2 = _f(a2)
                tr = max(r1, r2) + 1
                if r > tr:
                    r = tr
            fm[k] = r
            return r

        r = _f(a)
        return r

    while 1:
        n,m = LI()
        if n == 0:
            break
        rr.append(f(n,m))

    return '\n'.join(map(str,rr))

print(main())
```