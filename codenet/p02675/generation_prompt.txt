Voici un énoncé de problème :

Score:
100
points
Problem Statement
The cat Snuke wants to play a popular Japanese game called ÅtCoder, so Iroha has decided to teach him Japanese.
When counting pencils in Japanese, the counter word "本" follows the number. The pronunciation of this word varies depending on the number. Specifically, the pronunciation of "本" in the phrase "
N
本" for a positive integer
N
not exceeding
999
is as follows:
hon
when the digit in the one's place of
N
is
2
,
4
,
5
,
7
, or
9
;
pon
when the digit in the one's place of
N
is
0
,
1
,
6
or
8
;
bon
when the digit in the one's place of
N
is
3
.
Given
N
, print the pronunciation of "本" in the phrase "
N
本".
Constraints
N
is a positive integer not exceeding
999
.
Input
Input is given from Standard Input in the following format:
N
Output
Print the answer.
Sample Input 1
16
Sample Output 1
pon
The digit in the one's place of
16
is
6
, so the "本" in "
16
本" is pronounced
pon
.
Sample Input 2
2
Sample Output 2
hon
Sample Input 3
183
Sample Output 3
bon


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def LS():return [list(x) for x in sys.stdin.readline().split()]
def S():
    res = list(sys.stdin.readline())
    if res[-1] == "\n":
        return res[:-1]
    return res
def IR(n):
    return [I() for i in range(n)]
def LIR(n):
    return [LI() for i in range(n)]
def SR(n):
    return [S() for i in range(n)]
def LSR(n):
    return [LS() for i in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def solve():
    n = input()
    if n[-1] in "24579":
        print("hon")
    elif n[-1] in "0168":
        print("pon")
    else:
        print("bon")
    return

#Solve
if __name__ == "__main__":
    solve()
```