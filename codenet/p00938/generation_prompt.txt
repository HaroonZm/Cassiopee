Voici un énoncé de problème :

Problem D
Wall Clocks
You are the manager of a chocolate sales team. Your team customarily takes tea breaks every two hours, during which varieties of new chocolate products of your company are served. Everyone looks forward to the tea breaks so much that they frequently give a glance at a wall clock.
Recently, your team has moved to a new office. You have just arranged desks in the office. One team member asked you to hang a clock on the wall in front of her desk so that she will not be late for tea breaks. Naturally, everyone seconded her.
You decided to provide an enough number of clocks to be hung in the field of view of everyone. Your team members will be satisfied if they have at least one clock (regardless of the orientation of the clock) in their view, or, more precisely, within 45 degrees left and 45 degrees right (both ends inclusive) from the facing directions of their seats. In order to buy as few clocks as possible, you should write a program that calculates the minimum number of clocks needed to
meet everyone's demand.
The office room is rectangular aligned to north-south and east-west directions. As the walls are tall enough, you can hang clocks even above the door and can assume one's eyesight is not blocked by other members or furniture. You can also assume that each clock is a point (of size zero), and so you can hang a clock even on a corner of the room.
For example, assume that there are two members. If they are sitting facing each other at positions shown in Figure D.1(A), you need to provide two clocks as they see distinct sections of the wall. If their seats are arranged as shown in Figure D.1(B), their fields of view have a common point on the wall. Thus, you can meet their demands by hanging a single clock at the point. In Figure D.1(C), their fields of view have a common wall section. You can meet their demands with a single clock by hanging it anywhere in the section. Arrangements (A), (B), and (C) in Figure D.1 correspond to Sample Input 1, 2, and 3, respectively.
Input
The input consists of a single test case, formatted as follows.
$n$ $w$ $d$
$x_1$ $y_1$ $f_1$
...
$x_n$ $y_n$ $f_n$
Figure D.1. Arrangements of seats and clocks. Gray area indicates field of view.
All numbers in the test case are integers. The first line contains the number of team members $n$ $(1 \leq n \leq 1,000)$ and the size of the office room $w$ and $d$ $(2 \leq w, d \leq 100,000)$. The office room has its width $w$ east-west, and depth $d$ north-south. Each of the following $n$ lines indicates the position and the orientation of the seat of a team member. Each member has a seat at a distinct position $(x_i, y_i)$ facing the direction $f_i$, for $i = 1, ..., n$. Here $1 \leq x_i \leq w - 1, 1 \leq y_i \leq d - 1$, and $f_i$ is one of
N
,
E
,
W
, and
S
, meaning north, east, west, and south, respectively. The position $(x, y)$ means $x$ distant from the west wall and $y$ distant from the south wall.
Output
Print the minimum number of clocks needed.
Sample Input 1
2 10 6
4 4 E
6 4 W
Sample Output 1
2
Sample Input 2
2 10 6
2 4 E
6 4 W
Sample Output 2
1
Sample Input 3
2 10 6
3 2 S
6 4 W
Sample Output 3
1
Sample Input 4
6 10 6
1 5 N
7 1 N
8 2 E
9 1 S
4 4 S
3 3 W
Sample Output 4
3
Sample Input 5
4 10 6
4 3 W
2 4 N
4 4 W
3 3 S
Sample Output 5
2
Sample Input 6
4 100000 40000
25000 25000 S
20000 30000 S
75000 25000 S
80000 30000 S
Sample Output 6
1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
N, W, D = map(int, input().split())
def calc(x0, y0, dx, dy):
    s = min(W - x0 if dx >= 0 else x0, D - y0 if dy >= 0 else y0)
    x = x0 + dx*s; y = y0 + dy*s
    assert x in [0, W] or y in [0, D], (x, y)
    if y == 0:
        return x
    if x == W:
        return W+y
    if y == D:
        return 2*W+D-x
    return 2*W+2*D-y

S = []
for i in range(N):
    x, y, f = input().split(); x = int(x); y = int(y)
    if f == 'N':
        t1 = calc(x, y, 1, 1)
        t2 = calc(x, y, -1, 1)
    elif f == 'E':
        t1 = calc(x, y, 1, -1)
        t2 = calc(x, y, 1, 1)
    elif f == 'S':
        t1 = calc(x, y, -1, -1)
        t2 = calc(x, y, 1, -1)
    else:
        t1 = calc(x, y, -1, 1)
        t2 = calc(x, y, -1, -1)
    if t1 >= t2:
        t1 -= 2*(W+D)
    S.append((t1, t2))
S.sort(key=lambda x: x[1])
ans = N
INF = 10**9
for i in range(N):
    r = 0
    cur = -INF
    base = 0
    for j in range(N):
        a, b = S[(i+j) % N]
        if (i+j) % N == 0:
            base += 2*(W+D)
        if a + base <= cur:
            continue
        cur = b + base
        r += 1
    ans = min(r, ans)
print(ans)
```