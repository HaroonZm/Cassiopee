Voici un énoncé de problème :

Score :
600
points
Problem Statement
We have
N
points numbered
1
to
N
arranged in a line in this order.
Takahashi decides to make an undirected graph, using these points as the vertices.
In the beginning, the graph has no edge. Takahashi will do
M
operations to add edges in this graph.
The
i
-th operation is as follows:
The operation uses integers
L_i
and
R_i
between
1
and
N
(inclusive), and a positive integer
C_i
. For every pair of integers
(s, t)
such that
L_i \leq s < t \leq R_i
, add an edge of length
C_i
between Vertex
s
and Vertex
t
.
The integers
L_1, ..., L_M
,
R_1, ..., R_M
,
C_1, ..., C_M
are all given as input.
Takahashi wants to solve the shortest path problem in the final graph obtained. Find the length of the shortest path from Vertex
1
to Vertex
N
in the final graph.
Constraints
2 \leq N \leq 10^5
1 \leq M \leq 10^5
1 \leq L_i < R_i \leq N
1 \leq C_i \leq 10^9
Input
Input is given from Standard Input in the following format:
N
M
L_1
R_1
C_1
:
L_M
R_M
C_M
Output
Print the length of the shortest path from Vertex
1
to Vertex
N
in the final graph.
If there is no shortest path, print
-1
instead.
Sample Input 1
4 3
1 3 2
2 4 3
1 4 6
Sample Output 1
5
We have an edge of length
2
between Vertex
1
and Vertex
2
, and an edge of length
3
between Vertex
2
and Vertex
4
, so there is a path of length
5
between Vertex
1
and Vertex
4
.
Sample Input 2
4 2
1 2 1
3 4 2
Sample Output 2
-1
Sample Input 3
10 7
1 5 18
3 4 8
1 3 5
4 7 10
5 9 8
6 10 5
8 10 3
Sample Output 3
28


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools
import time,random

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**10
mod = 10**9+7
mod2 = 998244353
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return list(map(int, sys.stdin.readline().split()))
def LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)
def pe(s): return print(str(s), file=sys.stderr)
def JA(a, sep): return sep.join(map(str, a))
def JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)

def main():
    n,m = LI()
    lrc = sorted([LI() for _ in range(m)], key=lambda x: (x[0],x[2],-x[1]))
    lrc.append([inf,inf,inf])
    i = 0
    q = [(1,0),(inf,inf)]
    for l in range(1,n):
        while lrc[i][0] < l:
            i += 1
        while lrc[i][0] == l:
            _,r,c = lrc[i]
            i += 1
            qi = bisect.bisect_left(q, (l,-1))
            _, cc = q[qi]
            t = (r, cc+c)
            ti = bisect.bisect_left(q, t)
            if q[ti][1] > t[1] and q[ti-1][0] < r:
                if q[ti][0] == r:
                    q[ti] = t
                else:
                    q.insert(ti, t)
                while q[ti-1][1] > t[1]:
                    del q[ti-1]
                    ti -= 1

    t = q[-2]
    if t[0] < n:
        return -1

    return t[1]

print(main())
```