Voici un énoncé de problème :

Range Sum Query
Write a program which manipulates a sequence
A
= {
a
1
, a
2
, . . . , a
n
} with the following operations:
add(i, x)
: add
x
to
a
i
.
getSum(s, t)
: print the sum of
a
s
, a
s+1
,...,a
t
.
Note that the initial values of
a
i
(
i = 1, 2, . . . , n
) are 0.
Input
n
q
com
1
x
1
y
1
com
2
x
2
y
2
...
com
q
x
q
y
q
In the first line,
n
(the number of elements in
A
) and
q
(the number of queries) are given. Then,
q
queries are given where
com
represents the type of queries. '0' denotes
add(x
i
, y
i
)
and '1' denotes
getSum(x
i
, y
i
)
.
Output
For each
getSum
operation, print the sum in a line.
Constraints
1 ≤ n ≤ 100000
1 ≤ q ≤ 100000
If
com
i
is 0, then
1 ≤ x
i
≤ n
,
0 ≤ y
i
≤ 1000
.
If
com
i
is 1, then
1 ≤ x
i
≤ n
,
1 ≤ y
i
≤ n
.
Sample Input 1
3 5
0 1 1
0 2 2
0 3 3
1 1 2
1 2 2
Sample Output 1
3
2


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys

class BIT:
    def __init__(self, node_size):
        self._node = node_size+1
        self.bit = [0]*self._node

    def add(self, index, add_val):
        while index < self._node:
            self.bit[index] += add_val
            index += index & -index

    def sum(self, index):
        res = 0
        while index > 0:
            res += self.bit[index]
            index -= index & -index
        return res

if __name__ == '__main__':
    n, q = map(int, sys.stdin.readline().split())
    bt = BIT(n)
    for i in range(q):
        a, b, c = map(int, sys.stdin.readline().split())
        if a == 0:
            bt.add(b, c)
        else:
            print(bt.sum(c)-bt.sum(b-1))
```