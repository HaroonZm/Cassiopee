Voici un énoncé de problème :

E : Sigma / Σ
Problem
小学生のづあい君は同じ足し算にも得意不得意があり、 0 以上の整数
X
,
Y
に対して、
X
+
Y
を計算するのにかかる時間(秒)が次のように決まる。
1 の位から順番に計算していく。
10 進数表記で 10
i
位の計算には
x
i
×
y
i
+
c
i
秒かかる。
x
i
は
X
の10進数表記で 10
i
の位の数である。
y
i
は
Y
の10進数表記で 10
i
の位の数である。
ただし
i
が
X
の桁数より大きくなる時は
x
i
= 0 とする。
Y
についても同様である。
c
i
は、
i
= 0 または
x
i-1
+
y
i-1
+
c
i-1
< 10 ならば 0、 そうでなければ 1 である。
0 以上の整数 i についての
x
i
×
y
i
+
c
i
の総和が
X
+
Y
の計算にかかる時間である。
ある日、づあい君の先生は長さ
N
の整数列
a
0
, ... ,
a
N-1
の和を計算する宿題を出した。づあい君は数列の順番を並び替えることはできないが、足し算の式に括弧を付けることにより、足し算の順番を自由に変えることができる。例えば
N
= 4 の場合、順番は次の 5 通りある。
((
a
0
+
a
1
) +
a
2
) +
a
3
(
a
0
+
a
1
) + (
a
2
+
a
3
)
(
a
0
+ (
a
1
+
a
2
)) +
a
3
a
0
+ ((
a
1
+
a
2
) +
a
3
)
a
0
+ (
a
1
+ (
a
2
+
a
3
))
それぞれの括弧 (
x
+
y
) の中で上で説明した時間がかかるとすると、総和を求めるのにかかる時間は最小で何秒になるだろうか。
Input
入力は次のような形式で与えられる。
N
a
0
a
1
...
a
N-1
Constraints
入力はすべて整数である。
2 ≦
N
≦ 300
0 ≦
a
i
≦ 1,000,000
Output
答えの秒数を1行で出力せよ。
Samples
Sample Input 1
3
1 2 3
Sample Output 1
11
次のように計算すると最も速い。
2 + 3 = 5 ( 2 × 3 = 6 秒かかる)
1 + 5 = 6 ( 1 × 5 = 5 秒かかる)


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import defaultdict
import sys
def calc(l,m,r,f,dp):
    a = f[l][m]
    b = f[m][r]
    res = dp[l][m]+dp[m][r]
    c = 0
    while a or b or c:
        a0 = a%10
        b0 = b%10
        res += a0*b0+c
        if res >= dp[l][r]:
            return dp[l][r]
        c = (a0+b0+c >= 10)
        a //= 10
        b //= 10
    return res

def solve():
    n = int(sys.stdin.readline())
    a = [int(x) for x in sys.stdin.readline().split()]
    dp = [[float("inf")]*(n+1) for i in range(n)]
    for i in range(n-1):
        a[i+1] += a[i]
    a.insert(0,0)
    f = [[0]*(n+1) for i in range(n)]
    for l in range(n):
        dp[l][l+1] = 0
        for r in range(l+1,n+1):
            f[l][r] = a[r]-a[l]
    for le in range(2,n+1):
        for l in range(n-le+1):
            r = l+le
            for m in range(l+1,r):
                dp[l][r] = calc(l,m,r,f,dp)
                
    print(dp[0][n])

if __name__ == "__main__":
    solve()
```