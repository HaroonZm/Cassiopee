Voici un énoncé de problème :

Score :
500
points
Problem Statement
There are
N
children standing in a line from left to right. The activeness of the
i
-th child from the left is
A_i
.
You can rearrange these children just one time in any order you like.
When a child who originally occupies the
x
-th position from the left in the line moves to the
y
-th position from the left, that child earns
A_x \times |x-y|
happiness points.
Find the maximum total happiness points the children can earn.
Constraints
2 \leq N \leq 2000
1 \leq A_i \leq 10^9
All values in input are integers.
Input
Input is given from Standard Input in the following format:
N
A_1
A_2
...
A_N
Output
Print the maximum total happiness points the children can earn.
Sample Input 1
4
1 3 4 2
Sample Output 1
20
If we move the
1
-st child from the left to the
3
-rd position from the left, the
2
-nd child to the
4
-th position, the
3
-rd child to the
1
-st position, and the
4
-th child to the
2
-nd position, the children earns
1 \times |1-3|+3 \times |2-4|+4 \times |3-1|+2 \times |4-2|=20
happiness points in total.
Sample Input 2
6
5 5 6 1 1 1
Sample Output 2
58
Sample Input 3
6
8 6 9 1 2 1
Sample Output 3
85


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from heapq import heappop, heappush
import numpy as np

def solve(n, a_list):
    h = []
    for i in range(n):
        heappush(h, (-a_list[i], i))
    # dp
    dp = (-10 ** 18) * np.ones((n + 1, n + 1), dtype=np.int)
    dp[0, 0] = 0
    for i in range(n):
        a, k = heappop(h)
        # add left
        dp[i + 1, 1:] = np.maximum(dp[i, :-1] + (-a) * np.abs(k - np.arange(n)), dp[i + 1, 1:])
        # add right
        # for j in range(n):
        #    dp[i + 1, j] = max(dp[i, j] + (-a) * abs(n - 1 - (i - j) - k), dp[i + 1, j])
        dp[i + 1, :-1] = np.maximum(dp[i, :-1] + (-a) * np.abs(k - np.arange(n - 1 - i, n + n - 1 - i)), dp[i + 1, :-1])

    # print(dp)
    res = dp[-1, :].max()
    return res

def main():
    n = int(input())
    a_list = list(map(int, input().split()))
    res = solve(n, a_list)
    print(res)

def test():
    assert solve(4, [1, 3, 4, 2]) == 20
    assert solve(6, [5, 5, 6, 1, 1, 1]) == 58
    assert solve(6, [8, 6, 9, 1, 2, 1]) == 85
    # print(solve(2000, [0] * 2000))

if __name__ == "__main__":
    test()
    main()
```