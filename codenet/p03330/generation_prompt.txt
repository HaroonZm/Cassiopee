Voici un énoncé de problème :

Score :
400
points
Problem Statement
There is a grid with
N
rows and
N
columns of squares. Let
(i,j)
be the square at the
i
-th row from the top and the
j
-th column from the left.
These squares have to be painted in one of the
C
colors from Color
1
to Color
C
. Initially,
(i,j)
is painted in Color
c_{i,j}
.
We say the grid is a
good
grid when the following condition is met for all
i,j,x,y
satisfying
1 \leq i,j,x,y \leq N
:
If
(i+j) \% 3=(x+y) \% 3
, the color of
(i,j)
and the color of
(x,y)
are the same.
If
(i+j) \% 3 \neq (x+y) \% 3
, the color of
(i,j)
and the color of
(x,y)
are different.
Here,
X \% Y
represents
X
modulo
Y
.
We will repaint zero or more squares so that the grid will be a good grid.
For a square, the
wrongness
when the color of the square is
X
before repainting and
Y
after repainting, is
D_{X,Y}
.
Find the minimum possible sum of the wrongness of all the squares.
Constraints
1 \leq N \leq 500
3 \leq C \leq 30
1 \leq D_{i,j} \leq 1000 (i \neq j),D_{i,j}=0 (i=j)
1 \leq c_{i,j} \leq C
All values in input are integers.
Input
Input is given from Standard Input in the following format:
N
C
D_{1,1}
...
D_{1,C}
:
D_{C,1}
...
D_{C,C}
c_{1,1}
...
c_{1,N}
:
c_{N,1}
...
c_{N,N}
Output
If the minimum possible sum of the wrongness of all the squares is
x
, print
x
.
Sample Input 1
2 3
0 1 1
1 0 1
1 4 0
1 2
3 3
Sample Output 1
3
Repaint
(1,1)
to Color
2
. The wrongness of
(1,1)
becomes
D_{1,2}=1
.
Repaint
(1,2)
to Color
3
. The wrongness of
(1,2)
becomes
D_{2,3}=1
.
Repaint
(2,2)
to Color
1
. The wrongness of
(2,2)
becomes
D_{3,1}=1
.
In this case, the sum of the wrongness of all the squares is
3
.
Note that
D_{i,j} \neq D_{j,i}
is possible.
Sample Input 2
4 3
0 12 71
81 0 53
14 92 0
1 1 2 1
2 1 1 2
2 2 1 3
1 1 2 2
Sample Output 2
428


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect
from operator import itemgetter
from heapq import heappush, heappop
import numpy as np
from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson
from scipy.sparse import csr_matrix

sys.setrecursionlimit(10**7)
inf = 10**20
mod = 10**9 + 7

stdin = sys.stdin

ni = lambda: int(ns())
nf = lambda: float(ns())
na = lambda: list(map(int, stdin.readline().split()))
nb = lambda: list(map(float, stdin.readline().split()))
ns = lambda: stdin.readline().rstrip()  # ignore trailing spaces

N, C = na()
D = [na() for _ in range(C)]
c = [na() for _ in range(N)]

z = {}
o = {}
t = {}
for i in range(1, N+1):
    for j in range(1, N+1):
        q = (i + j) % 3
        now = c[i - 1][j - 1] - 1
        if q == 0:
            if now not in z.keys():
                z[now] = 1
            else:
                z[now] += 1
        if q == 1:
            if now not in o.keys():
                o[now] = 1
            else:
                o[now] += 1
        if q == 2:
            if now not in t.keys():
                t[now] = 1
            else:
                t[now] += 1

ans = inf
for i, j, l in itertools.permutations(range(C), 3):
    tmp = 0
    for k, v in z.items():
        tmp += v * D[k][i]
    for k, v in o.items():
        tmp += v * D[k][j]
    for k, v in t.items():
        tmp += v * D[k][l]
    ans = min(tmp, ans)
print(ans)
```