En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import deque
N, M, A = map(int, input().split())
MP = [[0]*M for i in range(N)]
sx = sy = gx = gy = -1
for i in range(N):
    for j, c in enumerate(input()):
        if c == '#':
            MP[i][j] = 1
        elif c == 'S':
            sx = j; sy = i
        elif c == 'G':
            gx = j; gy = i
U = [[set() for i in range(M)] for j in range(N)]
DD = ((-1, 0), (0, -1), (1, 0), (0, 1))
que = deque([(sx, sy, 0, 0, 3)])
for i in range(A+1):
    for j in range(A+1):
        U[sy][sx].add((i, j, 1))
        U[sy][sx].add((i, j, 3))
pp = ((sx, sy), (gx, gy))
while que:
    x, y, a, b, d = que.popleft()

    if (x, y) not in pp:
        d0 = (d-1) % 4
        dx, dy = DD[d0]
        nx = x + dx; ny = y + dy
        if 0 <= nx < M and 0 <= ny < N and MP[ny][nx] == 0:
            if d % 2 == 0:
                if b < A and (a, b+1, d0) not in U[ny][nx]:
                    U[ny][nx].add((a, b+1, d0))
                    que.append((nx, ny, a, b+1, d0))
            else:
                if a < A and (a+1, b, d0) not in U[ny][nx]:
                    U[ny][nx].add((a+1, b, d0))
                    que.append((nx, ny, a+1, b, d0))

        d1 = (d+1) % 4
        dx, dy = DD[d1]
        nx = x + dx; ny = y + dy
        if 0 <= nx < M and 0 <= ny < N and MP[ny][nx] == 0:
            if d % 2 == 0:
                if a < A and (a+1, b, d1) not in U[ny][nx]:
                    U[ny][nx].add((a+1, b, d1))
                    que.append((nx, ny, a+1, b, d1))
            else:
                if b < A and (a, b+1, d1) not in U[ny][nx]:
                    U[ny][nx].add((a, b+1, d1))
                    que.append((nx, ny, a, b+1, d1))

    dx, dy = DD[d]
    nx = x + dx; ny = y + dy
    if 0 <= nx < M and 0 <= ny < N and MP[ny][nx] == 0:
        if (a, b, d) not in U[ny][nx]:
            U[ny][nx].add((a, b, d))
            que.append((nx, ny, a, b, d))

if U[gy][gx]:
    print(min(a+b for a, b, d in U[gy][gx]))
else:
    print(-1)
```