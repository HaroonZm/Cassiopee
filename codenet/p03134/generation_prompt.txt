Voici un énoncé de problème :

Score :
900
points
Problem Statement
There are
N
Snukes lining up in a row.
You are given a string
S
of length
N
. The
i
-th Snuke from the front has two red balls if the
i
-th character in
S
is
0
; one red ball and one blue ball if the
i
-th character in
S
is
1
; two blue balls if the
i
-th character in
S
is
2
.
Takahashi has a sequence that is initially empty. Find the number of the possible sequences he may have after repeating the following procedure
2N
times, modulo
998244353
:
Each Snuke who has one or more balls simultaneously chooses one of his balls and hand it to the Snuke in front of him, or hand it to Takahashi if he is the first Snuke in the row.
Takahashi receives the ball and put it to the end of his sequence.
Constraints
1 \leq |S| \leq 2000
S
consists of
0
,
1
and
2
.
Note that the integer
N
is not directly given in input; it is given indirectly as the length of the string
S
.
Input
Input is given from Standard Input in the following format:
S
Output
Print the number of the possible sequences Takahashi may have after repeating the procedure
2N
times, modulo
998244353
.
Sample Input 1
02
Sample Output 1
3
There are three sequences that Takahashi may have:
rrbb
,
rbrb
and
rbbr
, where
r
and
b
stand for red and blue balls, respectively.
Sample Input 2
1210
Sample Output 2
55
Sample Input 3
12001021211100201020
Sample Output 3
543589959


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
S = input()
N = len(S)
mod = 998244353

blue = [0] * N
red = [0] * N
for i in range(N):
    blue[i] = blue[i-1] + int(S[i])
    red[i] = red[i-1] + 2 - int(S[i])

dp = [[0 for _ in range(blue[-1] + 1)] for _ in range(2*N+1)]
dp[0][0] = 1
for i in range(N):
    for j in range(blue[-1]+1):
        if j + 1 <= blue[i]:
            dp[i+1][j+1] = (dp[i+1][j+1] + dp[i][j]) % mod
        if i+1-j <= red[i]:
            dp[i+1][j] = (dp[i+1][j] + dp[i][j]) % mod
for i in range(N, 2*N):
    for j in range(blue[-1]+1):
        if j+1 <= blue[-1]:
            dp[i + 1][j + 1] = (dp[i + 1][j + 1] + dp[i][j]) % mod
        dp[i + 1][j] = (dp[i + 1][j] + dp[i][j]) % mod

print(dp[-1][-1])
```