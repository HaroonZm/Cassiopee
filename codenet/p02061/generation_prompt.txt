En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from itertools import product, accumulate
from math import gcd
from bisect import bisect
import sys
from sys import setrecursionlimit
setrecursionlimit(10**9)
input = sys.stdin.readline
def inpl(): return list(map(int, input().split()))

def primes(N):
    sieve = [1]*(N+1)
    sieve[:2] = [0, 0]
    P = []
    for i in range(2, N+1):
        if sieve[i]:
            P.append(i)
            for j in range(2*i, N+1, i):
                sieve[j] = 0
    return P

C = [1]*(10**5+1)
C[0] = 0
C[1] = 0
P = primes(10**5)

for p in P:
    C[p] = 0

for p in P:
    if p**3 > 100000:
        break
    C[p**3] = 0

for i in range(len(P)):
    for j in range(i, bisect(P, 10**5//P[i])):
        C[P[i] * P[j]] = 0

S = list(accumulate(C))
for _ in range(int(input())):
    print(S[int(input())])
```