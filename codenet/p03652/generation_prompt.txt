En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
ma = lambda :map(int,input().split())
lma = lambda :list(map(int,input().split()))
tma = lambda :tuple(map(int,input().split()))
ni = lambda:int(input())
yn = lambda fl:print("YES") if fl else print("NO")
import collections
import math
import itertools
import heapq as hq
def A_count():
    cnt = [0]*m
    for la in A:
        for a in la:
            if use[a]:
                cnt[a]+=1
                break
    heap = []
    for i in range(m):
        if use[i]:
            hq.heappush(heap,(-cnt[i],i))
    return heap

n,m = ma()
A = []
for i in range(n):
    A.append(list(map(lambda x:int(x)-1,input().split())))
ans = 10**9
use = [True]*m
#print(A)
for i in range(m):
    heap = A_count()
    mx,a = hq.heappop(heap)
    ans = min(ans,-mx)
    use[a]=False
print(ans)
```