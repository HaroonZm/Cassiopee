En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(n,m):
        a = sorted([S() for _ in range(n)])
        ak = collections.Counter(''.join(a))
        al = sum(ak.values())
        t = ''.join([S() for _ in range(m)])
        if len(t) < al:
            return 0

        fm = {}
        def ff(s, a):
            if len(a) == 1:
                return s == a[0]
            key = (s, tuple(a))
            if key in fm:
                return fm[key]
            for i in range(len(a)):
                if s[:len(a[i])] != a[i]:
                    continue
                if ff(s[len(a[i]):], a[:i] + a[i+1:]):
                    fm[key] = True
                    return True
            fm[key] = False
            return False

        r = 0
        for i in range(len(t) - al + 1):
            ts = t[i:i+al]
            if collections.Counter(ts) != ak:
                continue
            if ff(ts, a):
                r += 1

        return r

    while 1:
        n,m = LI()
        if n == 0:
            break
        rr.append(f(n,m))

    return '\n'.join(map(str, rr))

print(main())
```