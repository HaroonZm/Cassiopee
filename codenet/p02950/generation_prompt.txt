Voici un énoncé de problème :

Score :
600
points
Problem Statement
Given are a prime number
p
and a sequence of
p
integers
a_0, \ldots, a_{p-1}
consisting of zeros and ones.
Find a polynomial of degree at most
p-1
,
f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \ldots + b_0
, satisfying the following conditions:
For each
i
(0 \leq i \leq p-1)
,
b_i
is an integer such that
0 \leq b_i \leq p-1
.
For each
i
(0 \leq i \leq p-1)
,
f(i) \equiv a_i \pmod p
.
Constraints
2 \leq p \leq 2999
p
is a prime number.
0 \leq a_i \leq 1
Input
Input is given from Standard Input in the following format:
p
a_0
a_1
\ldots
a_{p-1}
Output
Print
b_0, b_1, \ldots, b_{p-1}
of a polynomial
f(x)
satisfying the conditions, in this order, with spaces in between.
It can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.
Sample Input 1
2
1 0
Sample Output 1
1 1
f(x) = x + 1
satisfies the conditions, as follows:
f(0) = 0 + 1 = 1 \equiv 1 \pmod 2
f(1) = 1 + 1 = 2 \equiv 0 \pmod 2
Sample Input 2
3
0 0 0
Sample Output 2
0 0 0
f(x) = 0
is also valid.
Sample Input 3
5
0 1 0 1 0
Sample Output 3
0 2 0 1 3


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
# YouTube
def com(com_n, com_r):
    return fac[com_n] * inv[com_r] * inv[com_n - com_r] % md

p = int(input())
a = list(map(int, input().split()))

# 準備
md = p
n_max = p-1
fac = [1]
inv = [1] * (n_max + 1)
k_fac_inv = 1
for i in range(1, n_max + 1):
    k_fac_inv = k_fac_inv * i % md
    fac.append(k_fac_inv)
k_fac_inv = pow(k_fac_inv, md - 2, md)
for i in range(n_max, 1, -1):
    inv[i] = k_fac_inv
    k_fac_inv = k_fac_inv * i % md

b = [0] * p
for ai, ak in enumerate(a):
    if ak:
        b[0] = (b[0] + 1) % p
        s=1
        for bi in range(p-1,-1,-1):
            b[bi] = (b[bi] - s * com(p - 1, bi)) % p
            s=(-ai*s)%p
print(*b)
```