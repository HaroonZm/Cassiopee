Voici un énoncé de problème :

Score :
300
points
Problem Statement
Given is a string
S
. Let
T
be the concatenation of
K
copies of
S
.
We can repeatedly perform the following operation: choose a character in
T
and replace it with a different character.
Find the minimum number of operations required to satisfy the following condition: any two adjacent characters in
T
are different.
Constraints
1 \leq |S| \leq 100
S
consists of lowercase English letters.
1 \leq K \leq 10^9
K
is an integer.
Input
Input is given from Standard Input in the following format:
S
K
Output
Print the minimum number of operations required.
Sample Input 1
issii
2
Sample Output 1
4
T
is
issiiissii
. For example, we can rewrite it into
ispiqisyhi
, and now any two adjacent characters are different.
Sample Input 2
qq
81
Sample Output 2
81
Sample Input 3
cooooooooonteeeeeeeeeest
999993333
Sample Output 3
8999939997


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
S = input()
K = int(input())

pre_c = ''
flg = 0
count = 1

f_c = S[0]
f_e = S[-1]
t = []

for c in S:
  if c == pre_c:
    count += 1
  elif pre_c == '':
    pass
  else:
    t.append(count)
    count = 1
  pre_c = c

t.append(count)
count_1 = 0
for i in t:
  count_1 += i // 2
  
if f_c == f_e and len(t) != 1:
  t[0] = t[0] + t[-1]
  t.pop(-1)

count_2 = 0
for i in t:
  count_2 += i // 2
  
if len(S) == 1:
  print(K // 2)
elif len(t) == 1:
  print(K * len(S) // 2)
else:
  print(count_1 + count_2 * (K - 1))
```