Voici un énoncé de problème :

Score :
500
points
Problem Statement
Consider writing each of the integers from
1
to
N \times M
in a grid with
N
rows and
M
columns, without duplicates.
Takahashi thinks it is not fun enough, and he will write the numbers under the following conditions:
The largest among the values in the
i
-th row
(1 \leq i \leq N)
is
A_i
.
The largest among the values in the
j
-th column
(1 \leq j \leq M)
is
B_j
.
For him, find the number of ways to write the numbers under these conditions, modulo
10^9 + 7
.
Constraints
1 \leq N \leq 1000
1 \leq M \leq 1000
1 \leq A_i \leq N \times M
1 \leq B_j \leq N \times M
A_i
and
B_j
are integers.
Input
Input is given from Standard Input in the following format:
N
M
A_1
A_2
...
A_{N}
B_1
B_2
...
B_{M}
Output
Print the number of ways to write the numbers under the conditions, modulo
10^9 + 7
.
Sample Input 1
2 2
4 3
3 4
Sample Output 1
2
(A_1, A_2) = (4, 3)
and
(B_1, B_2) = (3, 4)
. In this case, there are two ways to write the numbers, as follows:
1
in
(1, 1)
,
4
in
(1, 2)
,
3
in
(2, 1)
and
2
in
(2, 2)
.
2
in
(1, 1)
,
4
in
(1, 2)
,
3
in
(2, 1)
and
1
in
(2, 2)
.
Here,
(i, j)
denotes the square at the
i
-th row and the
j
-th column.
Sample Input 2
3 3
5 9 7
3 6 9
Sample Output 2
0
Since there is no way to write the numbers under the condition,
0
should be printed.
Sample Input 3
2 2
4 4
4 4
Sample Output 3
0
Sample Input 4
14 13
158 167 181 147 178 151 179 182 176 169 180 129 175 168
181 150 178 179 167 180 176 169 182 177 175 159 173
Sample Output 4
343772227


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import bisect
import sys
from collections import defaultdict
N,M=map(int,input().split())
A=[int(i) for i in input().split()]
B=[int(i) for i in input().split()]
dd=defaultdict(int)
for a in A:
    dd[a]+=1
for b in B:
    dd[b]+=1
for d,n in dd.items():
    if n>=3:
        print(0)
        sys.exit()
A=sorted(A)
B=sorted(B)
ans=1
mod=10**9+7
for i in range(N*M,0,-1):
    x=bisect.bisect_left(A,i)
    y=bisect.bisect_left(B,i)
    if x>=N or y>=M:
        print(0)
        sys.exit()
    if A[x]==i and B[y]==i:
        #print(i)
        continue
    elif A[x]==i:
        ans*=(M-y)
        ans%=mod
    elif B[y]==i:
        ans*=(N-x)
        ans%=mod
    else:
        ans*=((N-x)*(M-y)-(N*M-i))
        ans%=mod
    #print(x,y,i,ans)
print(ans)
```