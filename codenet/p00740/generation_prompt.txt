Voici un énoncé de problème :

Problem A:
Next Mayor
One of the oddest traditions of the town of Gameston may be that even
the town mayor of the next term is chosen according to the result of a game.
When the expiration of the term of the mayor approaches, at least
three candidates, including the mayor of the time, play a game of
pebbles, and the winner will be the next mayor.
The rule of the game of pebbles is as follows.
In what follows,
n
is the number of participating candidates.
Requisites
A round table, a bowl, and plenty of pebbles.
Start of the Game
A number of pebbles are put into the bowl;
the number is decided by the Administration Commission using
some secret stochastic process.
All the candidates, numbered from 0 to
n
-1 sit around the round table,
in a counterclockwise order. Initially, the bowl is handed to the
serving mayor at the time, who is numbered 0.
Game Steps
When a candidate is handed the bowl and if any pebbles are in it,
one pebble is taken out of the bowl and is
kept, together with those already at hand, if any.
If no pebbles are left in the bowl, the candidate puts
all the kept pebbles, if any, into the bowl. Then, in either case, the bowl is
handed to the next candidate to the right.
This step is repeated until the winner is decided.
End of the Game
When a candidate takes the last pebble in the bowl, and no other
candidates keep any pebbles, the game ends and that candidate with all
the pebbles is the winner.
A math teacher of Gameston High, through his analysis, concluded that this game will always end within a finite number of steps, although the number of required steps can be very large.
Input
The input is a sequence of datasets. Each dataset is a line
containing two integers
n
and
p
separated by a single
space. The integer
n
is the number of the candidates including
the current mayor, and the integer
p
is the total number of the
pebbles initially put in the bowl. You may assume 3 ≤
n
≤ 50
and 2 ≤
p
≤ 50.
With the settings given in the input datasets, the game will end within 1000000 (one million) steps.
The end of the input is indicated by a line
containing two zeros separated by a single space.
Output
The output should be composed of lines corresponding to input datasets
in the same order, each line of which containing the candidate number
of the winner.
No other characters should appear in the output.
Sample Input
3 2
3 3
3 50
10 29
31 32
50 2
50 50
0 0
Output for the Sample Input
1
0
1
5
30
1
13


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**3
eps = 1.0 / 10**10
mod = 10**9+7

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []
    while True:
        n,p = LI()
        mp = p
        if n == 0:
            break
        a = [0] * n
        i = 0
        while True:
            if p == 0:
                p = a[i]
                a[i] = 0
            else:
                a[i] += 1
                p -= 1
                if a[i] == mp:
                    break
            i = (i+1) % n
        rr.append(i)

    return '\n'.join(map(str, rr))

print(main())
```