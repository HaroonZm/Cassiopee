Voici un énoncé de problème :

I: Starting Line
ICPC で良い成績を収めるには修行が欠かせない．うさぎは ICPC で勝ちたいので，今日も修行をすることにした．
今日の修行は，一直線上の道を走って，体力と判断力を養おうというものである．うさぎは今，スタートラインに立って長い長い道を見渡している．
道の途中にはいくつかニンジンが置かれており，うさぎはニンジンを食べると加速することができる．加速していないときのうさぎの走る速さは毎秒
U
メートルであるが，ニンジンを食べることで，最後のニンジンを食べてから
T
秒後までは速さが毎秒
V
メートルとなる．また，うさぎはニンジンを
K
個まで食べずに持っておくことができる．ニンジンを持っていても走る速さは変わらない．
ニンジンを持ったり食べたりするのに時間はかからないとして，ゴールまでの最短所要時間を求めたい．
Input
N
K
T
U
V
L
D
1
...
D
N
N
はニンジンの個数，
L
はスタートからゴールまでの距離 (メートル)，
D
i
(1 ≤
i
≤
N
) は
i
番目のニンジンが置かれている場所のスタートからの距離 (メートル) である．
1 ≤
N
≤ 200，1 ≤
K
≤
N
，1 ≤
T
≤ 10,000，1 ≤
U
<
V
≤ 10,000，2 ≤
L
≤ 10,000，0 <
D
1
<
D
2
< ... <
D
N
<
L
を満たす．入力の値はすべて整数である．
Output
最短所要時間 (秒) を 1 行に出力せよ．10
-6
以下の絶対誤差が許容される．
Sample Input 1
1 1 1 2 3 100
50
Sample Output 1
49.500000000
Sample Input 2
3 1 1 2 3 100
49
50
51
Sample Output 2
48.666666667


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys

EPS = 1e-12

def main():
    n,k,t,u,v,l = map(int, sys.stdin.readline().split())
    carrots = [0] * 10001
    for i in range(n):
        carrots[ int(sys.stdin.readline()) ] = 1

    remain_time  = 0
    carrot_count = 0
    ans = 0
    for i in range(0,l):
        #print("kyori:{}\tremain_time:{}\tcarrot_count:{}\tans:{}".format(i,remain_time,carrot_count,ans))
        # ???????????????????????????????????????
        if carrots[i] == 1:
            carrot_count += 1
        # ?????????????¶?????????????????????????
        if carrot_count > k:
            remain_time = t
            carrot_count -= 1

        if remain_time > 0 + EPS:
            # ????????????????????£???????????¶???
            if remain_time * v >= 1.0:
                ans += 1 / v
                remain_time -= 1 / v
            else:
                if carrot_count > 0:
                    ans += 1 / v
                    carrot_count -= 1
                    remain_time = t - (1 - (remain_time * v)) / v
                else:
                    ans += remain_time
                    ans += (1 - (remain_time * v)) / u
                    remain_time = 0
        else:
            remain_time = 0
            # ????????????????????£???????????¶???
            if carrot_count > 0:
                ans += 1 / v
                carrot_count -= 1
                remain_time = t - 1 / v
            else:
                ans += 1 / u

    print("{:.9f}".format(ans))

if __name__ == '__main__':
    main()
```