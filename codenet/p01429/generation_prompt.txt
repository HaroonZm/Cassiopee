En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(n,m,l):
        k = sorted(LI())
        s = LI()
        wam = [0] * (m+1)
        for i in range(m):
            wam[i+1] = wam[i] + s[i]
        wa = [0] * n
        wb = [0] * n
        for i in range(n):
            wa[i] = wam[k[i]]
            wb[i] = wam[k[i]-1]

        fm = {}
        fm[(0,0)] = 0
        fm[(0,1)] = (wa[1] - wb[0]) // l
        def _f(i,j):
            key = (i,j)
            if key in fm:
                return fm[key]
            r = inf
            if i == j-1:
                for k in range(i):
                    t = _f(k,i) + (wa[j] - wb[k]) // l
                    if r > t:
                        r = t
            else:
                t = _f(i,j-1) + (wa[j] - wb[j-1]) // l
                if r > t:
                    r = t
            fm[key] = r
            return r

        r = inf
        for i in range(1,n-1):
            t = _f(i,n-1)
            u = (wa[n-1] - wb[i]) // l
            if r > t + u:
                r = t + u

        return r

    while 1:
        n,m,l = LI()
        if n == 0:
            break
        rr.append(f(n,m,l))
        break

    return '\n'.join(map(str, rr))

print(main())
```