Voici un énoncé de problème :

Score :
700
points
Problem Statement
10^{10^{10}}
participants, including Takahashi, competed in two programming contests.
In each contest, all participants had distinct ranks from first through
10^{10^{10}}
-th.
The
score
of a participant is the product of his/her ranks in the two contests.
Process the following
Q
queries:
In the
i
-th query, you are given two positive integers
A_i
and
B_i
. Assuming that Takahashi was ranked
A_i
-th in the first contest and
B_i
-th in the second contest, find the maximum possible number of participants whose scores are smaller than Takahashi's.
Constraints
1 \leq Q \leq 100
1\leq A_i,B_i\leq 10^9(1\leq i\leq Q)
All values in input are integers.
Input
Input is given from Standard Input in the following format:
Q
A_1
B_1
:
A_Q
B_Q
Output
For each query, print the maximum possible number of participants whose scores are smaller than Takahashi's.
Sample Input 1
8
1 4
10 5
3 3
4 11
8 9
22 40
8 36
314159265 358979323
Sample Output 1
1
12
4
11
14
57
31
671644785
Let us denote a participant who was ranked
x
-th in the first contest and
y
-th in the second contest as
(x,y)
.
In the first query,
(2,1)
is a possible candidate of a participant whose score is smaller than Takahashi's. There are never two or more participants whose scores are smaller than Takahashi's, so we should print
1
.


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
stdin = sys.stdin
 
sys.setrecursionlimit(10**5)

def li(): return map(int, stdin.readline().split())
def li_(): return map(lambda x: int(x)-1, stdin.readline().split())
def lf(): return map(float, stdin.readline().split())
def ls(): return stdin.readline().split()
def ns(): return stdin.readline().rstrip()
def lc(): return list(ns())
def ni(): return int(stdin.readline())
def nf(): return float(stdin.readline())

from math import sqrt

def wc(a:int, b:int) -> int:
    
    if a == b:
        return 2*a - 2
    
    elif abs(a-b) == 1:
        return 2*min(a,b) - 2
    
    else:
        c = int(sqrt(a*b))
        if a*b == c*c:
            c -= 1
        
        if a*b > c*(c+1):
            return 2*c - 1
        else:
            return 2*c - 2
    

q = ni()
query = [tuple(li()) for _ in range(q)]

for a,b in query:
    print(wc(a,b))
```