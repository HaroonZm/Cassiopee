Voici un énoncé de problème :

爆弾の連鎖
縦 8、横 8 のマスからなる図1 のような平面があります。その平面上に、いくつかの爆弾が置かれています。図2 にその例を示します（● = 爆弾）。
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
●
□
□
●
□
□
□
□
□
□
●
□
□
●
□
□
□
●
□
□
●
□
□
●
□
□
□
●
□
□
●
□
□
□
□
□
□
□
□
□
□
●
□
□
□
●
□
●
□
□
□
●
□
□
●
□
●
□
□
●
□
図1
図2
爆弾が爆発すると、その爆弾の上下左右 3 マスに爆風の影響が及び、それらのマスに置かれている爆弾も連鎖的に爆発します。たとえば、図 3 に示す爆弾が爆発すると図 4 の■のマスに爆風の影響が及びます。
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
●
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
□
■
□
□
□
□
□
□
□
■
□
□
□
□
□
□
□
■
□
□
□
□
■
■
■
●
■
■
■
□
□
□
□
■
□
□
□
□
□
□
□
■
□
□
□
□
図3
図4
爆弾が置かれている状態と最初に爆発する爆弾の位置を読み込んで、最終的な平面の状態を出力するプログラムを作成してください。
Input
入力は以下の形式で与えられます。
n
（空行）
データセット 1
（空行）
データセット 2
..
..
データセット
n
１行目にデータセットの数
n
(
n
≤ 20) が与えられます。続いて
n
個のデータセットが与えられます。各データセットの直前に１つの空行が与えられます。各データセットは以下の形式で与えられます。
g
1,1
g
2,1
...
g
8,1
g
1,2
g
2,2
...
g
8,2
:
g
1,8
g
2,8
...
g
8,8
X
Y
最初の８行に、平面を表す８つの文字列が与えられます。各文字列は８文字からなる数列で、爆弾が置かれているマスを 1、置かれていないマスを 0 で表します。
続く２行で、最初に爆発する爆弾の
X
座標と
Y
座標が与えられます。左上、左下、右上、右下の座標が、それぞれ、(1, 1)、(1, 8)、(8, 1)、(8, 8) です。例えば、図 4 に示す爆弾が最初に爆発するとき、与えられる座標は (4, 6) です。
Output
各データセットについて以下のように出力して下さい。
爆発しないで残った爆弾のあるマスを 1、爆弾のないマスを 0 で表現することとします。平面の一行を数字 8 個からなる一行とし 8 行の文字列で最終的な平面の状態を出力してください。各データセットの先頭は、サンプル出力のように Data
x
: から出力しなければなりません。ここで、
x
はデータセットの番号です。
Sample Input
2
00010010
00000100
10001001
00100010
01000000
00001000
10100010
01010010
2
5
00010010
00000100
10001001
00100010
01000000
00001000
10100010
01010010
2
5
Output for the Sample Input
Data 1:
00000000
00000100
10001001
00100000
00000000
00001000
10100000
00000000
Data 2:
00000000
00000100
10001001
00100000
00000000
00001000
10100000
00000000


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def bomb(x,y):
    s=M[y]
    if s[x]=="0":return
    M[y]=s[:x]+"0"+s[x+1:]
    R=[-3,-2,-1,1,2,3]
    for e in R:
        bomb(x+e,y)
        bomb(x,y+e)
    return

A=range(14)
B=range(3,11)
M=["0"*14 for i in A]
z="000"
N=range(input())
for i in N:
    s=raw_input()
    for j in B:
        M[j]=z+raw_input()+z
    x=input()+2
    y=input()+2
    bomb(x,y)
    print "Data %d:" %(i+1)
    for j in B:
        print M[j][3:-3]
```