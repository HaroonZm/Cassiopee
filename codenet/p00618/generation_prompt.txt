Voici un énoncé de problème :

Problem D:
Course Planning for Lazy Students
会津大学では2009年度より、授業履修に関する新しい制度を開始した。新制度では必修科目を撤廃し、それぞれの進路を考慮して科目を自由に選択できるようになった。
しかし、どの科目も無条件で履修できるわけではなく、特定の科目を履修するためには、先修条件を満たしている必要がある。下図に履修計画表の一部の例を示す：
図の長方形が１つの科目を表し科目名と単位数を含んでいる。図の矢印が先修条件を表す。矢印の意味は、矢印の終点で指されている科目を履修するためには、その矢印の始点を示す科目を修得している必要がある。例えば、Linear Algebra II (線形代数２)を履修するためには、Linear Algebra I (線形代数１)を修得している必要がある。また、Applied Algebra (応用代数)を履修するためには、Linear Algebra I と Discrete Systems (離散系論)の両方を修得している必要がある。
さて、履修登録計画において卒業に要する最低限の合計単位数
U
を満たす履修科目の組み合わせは、怠慢な学生にとって興味深いものである。
あなたの仕事は、与えられた履修計画表と
U
を読み込み、最低限の履修科目数を報告するプログラムを作成することである。これは計画であるため、履修登録した科目は必ず単位を修得できるものと仮定する。
Input
入力は複数のデータセットからなる。各データセットは以下の形式で与えられる：
n
U
c
0
k
0
r
0
1
r
0
2
...
r
0
k
0
c
1
k
1
r
1
1
r
1
2
...
r
1
k
1
.
.
c
n-1
k
n-1
r(n-1)
1
r(n-1)
2
...
r(n-1)
k
n-1
n
(1 ≤
n
≤ 20) は履修計画表が含む科目の数を示す整数である。科目には 0 から
n
-1 までの番号が割り当てられているものとし、以下
i
番目の科目を科目
i
と呼ぶことにする。
U
(1 ≤
U
≤ 100) は必要な合計単位数を表す整数である。
c
i
(1 ≤
c
i
≤ 10)は科目
i
の単位数を示す。次の
k
i
(0 ≤
k
i
≤ 5) は科目
i
の先修科目の数を示す。それに続く
ri
1
ri
2
...
ri
k
i
は科目
i
の先修科目の科目番号を示す。
ある科目から先修条件を表す矢印を１つ以上たどり、再びその科目に戻るような入力は与えられない。また、
U
を満たす科目の組み合わせが必ず存在すると仮定してよい。
n
と
U
がともに 0 のとき入力の終わりを示す。データセットの数は 100 を超えない。
Output
各データセットについて、最低限必要な科目数を１行に出力せよ。
Sample Input
4 4
1 0
3 2 0 2
2 0
2 0
3 6
1 0
3 2 0 2
2 0
0 0
Output for the Sample Input
2
3


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
code="""
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>
using namespace std;

#define dump(...) cout<<"# "<<#__VA_ARGS__<<'='<<(__VA_ARGS__)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

constexpr int INF=1e9;
constexpr int MOD=1e9+7;
constexpr double EPS=1e-9;

int dfs(const vvi& g,int u)
{
	int res=1<<u;
	for(int v:g[u]) res|=dfs(g,v);
	return res;
}

int main()
{
	for(int n,m;cin>>n>>m && n|m;){
		array<int,20> cs;
		vvi g(n);
		rep(i,n){
			cin>>cs[i];
			int k; cin>>k;
			rep(j,k){
				int r; cin>>r;
				g[i].push_back(r);
			}
		}

		array<int,20> bs;
		rep(i,n) bs[i]=dfs(g,i);

		static array<int,1<<20> sums; sums.fill(0);

		rep(i,n) sums[1<<i]=cs[i];
		rep(i,1<<n) sums[i]=sums[i&-i]+sums[i-(i&-i)];

		int res=INF;
		rep(i,1<<n) if(__builtin_popcount(i)<res){
			int b=0;
			rep(j,n) b|=(i>>j&1)*bs[j];
			if(sums[b]>=m) res=min(res,__builtin_popcount(b));
		}
		cout<<res<<endl;
	}
}
"""

import os,tempfile
(_,filename)=tempfile.mkstemp(".cpp")

f=open(filename,"w")
f.write(code)
f.close()

os.system("g++ -std=c++0x {} -o ./a.out".format(filename))
os.system("./a.out")
```