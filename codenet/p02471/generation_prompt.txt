Voici un énoncé de problème :

Extended Euclid Algorithm
Given positive integers
a
and
b
, find the integer solution (
x
,
y
) to
ax + by = gcd(a, b)
, where
gcd(a, b)
is the greatest common divisor of
a
and
b
.
Input
a
b
Two positive integers
a
and
b
are given separated by a space in a line.
Output
Print two integers
x
and
y
separated by a space. If there are several pairs of such
x
and
y
, print that pair for which
|x| + |y|
is the minimal (primarily) and
x
≤
y
(secondarily).
Constraints
1 ≤
a
,
b
≤ 10
9
Sample Input 1
4 12
Sample Output 1
1 0
Sample Input 2
3 8
Sample Output 2
3 -1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def calc_gcd(x, y):
    
    if x < y:
        x, y = y, x

    while y > 0:
        x, y = y, x % y

    return x

a, b = map(int, input().split())

gcd = calc_gcd(a, b)

x1 = 1
y1 = 0
z1 = a_prime = a / gcd

x2 = 0
y2 = 1
z2 = b_prime = b / gcd

while z2 != 1:
    q = (z1 - (z1 % z2)) / z2

    (x1, y1, z1), (x2, y2, z2) = (x2, y2, z2), (x1 - (q * x2), y1 - (q * y2), z1 - (q * z2))

t = 0
x = x2 + b_prime * t
y = y2 + a_prime * t

print(int(x), int(y))
```