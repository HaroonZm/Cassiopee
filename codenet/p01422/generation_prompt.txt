En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(n):
        a = LI()
        dp = [inf] * (a[0]*2)
        for i in range(a[0]//2,a[0]*2):
            dp[i] = abs(i-a[0]) / a[0]
        for i in range(n-1):
            a1 = a[i+1]
            nn = a1 * 2
            ndp = [inf] * nn
            for j in range(1, len(dp)):
                if dp[j] == inf:
                    continue
                t = dp[j]
                for k in range(j,nn,j):
                    u = abs(a1-k) / a1
                    if u < t:
                        u = t
                    if ndp[k] > u:
                        ndp[k] = u
            dp = ndp
        return '{:0.9f}'.format(min(dp))

    while 1:
        n = I()
        if n == 0:
            break
        rr.append(f(n))
        # print('rr', rr[-1])
        break

    return '\n'.join(map(str,rr))

print(main())
```