Voici un énoncé de problème :

Score :
400
points
Problem Statement
There is a bar of chocolate with a height of
H
blocks and a width of
W
blocks.
Snuke is dividing this bar into exactly three pieces.
He can only cut the bar along borders of blocks, and the shape of each piece must be a rectangle.
Snuke is trying to divide the bar as evenly as possible.
More specifically, he is trying to minimize
S_{max}
-
S_{min}
, where
S_{max}
is the area (the number of blocks contained) of the largest piece, and
S_{min}
is the area of the smallest piece.
Find the minimum possible value of
S_{max} - S_{min}
.
Constraints
2 ≤ H, W ≤ 10^5
Input
Input is given from Standard Input in the following format:
H
W
Output
Print the minimum possible value of
S_{max} - S_{min}
.
Sample Input 1
3 5
Sample Output 1
0
In the division below,
S_{max} - S_{min} = 5 - 5 = 0
.
Sample Input 2
4 5
Sample Output 2
2
In the division below,
S_{max} - S_{min} = 8 - 6 = 2
.
Sample Input 3
5 5
Sample Output 3
4
In the division below,
S_{max} - S_{min} = 10 - 6 = 4
.
Sample Input 4
100000 2
Sample Output 4
1
Sample Input 5
100000 100000
Sample Output 5
50000


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
H,W = map(int,input().split())

def calc_ans(H,W):
    ans = float('inf')
    #ブロックAを横に分割
    halfed_w = W//2
    for h in range(1,H):
        a  = h*W
        #横分け
        b1 = (H-h)//2*W
        c1 = (H-h-(H-h)//2)*W
        #縦で分けた面積
        b2 = (H-h)*halfed_w
        c2 = (H-h)*(W-halfed_w)
        result1 = max(a,b1,c1)-min(a,b1,c1)
        result2 = max(a,b2,c2)-min(a,b2,c2)
        ans = min(ans,result1,result2)
    #ブロックAを縦に分割
    halfed_h = H//2
    for w in range(1,W):
        a = w*H
        #横分け
        b1 = (W-w)//2*H
        c1 = (W-w-(W-w)//2)*H
        #縦分け
        b2 = (W-w)*halfed_h
        c2 = (W-w)*(H-halfed_h)
        result1 = max(a,b1,c1)-min(a,b1,c1)
        result2 = max(a,b2,c2)-min(a,b2,c2)
        ans = min(ans,result1,result2)
    print(ans)

calc_ans(H,W)
```