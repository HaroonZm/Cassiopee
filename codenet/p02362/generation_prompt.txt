Voici un énoncé de problème :

Single Source Shortest Path (Negative Edges)
Input
An edge-weighted graph
G
(
V
,
E
) and the source
r
.
|
V
| |
E
|
r
s
0
t
0
d
0
s
1
t
1
d
1
:
s
|E|-1
t
|E|-1
d
|E|-1
|V|
is the number of vertices and
|E|
is the number of edges in
G
. The graph vertices are named with the numbers 0, 1,...,
|V|-1
respectively.
r
is the source of the graph.
s
i
and
t
i
represent source and target vertices of
i
-th edge (directed) and
d
i
represents the cost of the
i
-th edge.
Output
If the graph contains a negative cycle (a cycle whose sum of edge costs is a negative value) which is reachable from the source
r
, print
NEGATIVE CYCLE
in a line.
Otherwise, print
c
0
c
1
:
c
|V|-1
The output consists of
|V|
lines. Print the cost of the shortest path from the source
r
to each vertex 0, 1, ...
|V|-1
in order. If there is no path from the source to a vertex, print "
INF
".
Constraints
1 ≤
|V|
≤ 1000
0 ≤
|E|
≤ 2000
-10000 ≤
d
i
≤ 10000
There are no parallel edges
There are no self-loops
Sample Input 1
4 5 0
0 1 2
0 2 3
1 2 -5
1 3 1
2 3 2
Sample Output 1
0
2
-3
-1
Sample Input 2
4 6 0
0 1 2
0 2 3
1 2 -5
1 3 1
2 3 2
3 1 0
Sample Output 2
NEGATIVE CYCLE
Sample Input 3
4 5 1
0 1 2
0 2 3
1 2 -5
1 3 1
2 3 2
Sample Output 3
INF
0
-5
-3


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import defaultdict
from collections import deque
from sys import stdin

def sp(G,R,V):
    d = {}
    INF = float('inf')
    for i in range(V):
        d[i] = INF
    d[R] = 0
    for i in range(1,V+1):
        for (u,v) in G.keys():
            if d[v] > d[u] + G[u,v]:
                d[v] = d[u] + G[u,v]
                if i == V:
                    return 'NEGATIVE CYCLE'
    return d

V, E, R = [int(x) for x in stdin.readline().split()]
G = defaultdict()
for case in range(E):
    s, t, w = [int(x) for x in stdin.readline().split()]
    G[(s,t)] = w
d = sp(G, R, V)
if d == 'NEGATIVE CYCLE':
    print('NEGATIVE CYCLE')
else:
    for k in range(V):
        if d[k] == float('inf'):
            print("INF")
        else:
            print(d[k])
```