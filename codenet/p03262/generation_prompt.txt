Voici un énoncé de problème :

Score :
300
points
Problem Statement
There are
N
cities on a number line. The
i
-th city is located at coordinate
x_i
.
Your objective is to visit all these cities at least once.
In order to do so, you will first set a positive integer
D
.
Then, you will depart from coordinate
X
and perform Move
1
and Move
2
below, as many times as you like:
Move
1
: travel from coordinate
y
to coordinate
y + D
.
Move
2
: travel from coordinate
y
to coordinate
y - D
.
Find the maximum value of
D
that enables you to visit all the cities.
Here, to visit a city is to travel to the coordinate where that city is located.
Constraints
All values in input are integers.
1 \leq N \leq 10^5
1 \leq X \leq 10^9
1 \leq x_i \leq 10^9
x_i
are all different.
x_1, x_2, ..., x_N \neq X
Input
Input is given from Standard Input in the following format:
N
X
x_1
x_2
...
x_N
Output
Print the maximum value of
D
that enables you to visit all the cities.
Sample Input 1
3 3
1 7 11
Sample Output 1
2
Setting
D = 2
enables you to visit all the cities as follows, and this is the maximum value of such
D
.
Perform Move
2
to travel to coordinate
1
.
Perform Move
1
to travel to coordinate
3
.
Perform Move
1
to travel to coordinate
5
.
Perform Move
1
to travel to coordinate
7
.
Perform Move
1
to travel to coordinate
9
.
Perform Move
1
to travel to coordinate
11
.
Sample Input 2
3 81
33 105 57
Sample Output 2
24
Sample Input 3
1 1
1000000000
Sample Output 3
999999999


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
#!/usr/bin/env python3
from collections import defaultdict
from collections import deque
from heapq import heappush, heappop
import sys
import math
import bisect
import random
import itertools
sys.setrecursionlimit(10**5)
stdin = sys.stdin
bisect_left = bisect.bisect_left
bisect_right = bisect.bisect_right
def LI(): return list(map(int, stdin.readline().split()))
def LF(): return list(map(float, stdin.readline().split()))
def LI_(): return list(map(lambda x: int(x)-1, stdin.readline().split()))
def II(): return int(stdin.readline())
def IF(): return float(stdin.readline())
def LS(): return list(map(list, stdin.readline().split()))
def S(): return list(stdin.readline().rstrip())
def IR(n): return [II() for _ in range(n)]
def LIR(n): return [LI() for _ in range(n)]
def FR(n): return [IF() for _ in range(n)]
def LFR(n): return [LI() for _ in range(n)]
def LIR_(n): return [LI_() for _ in range(n)]
def SR(n): return [S() for _ in range(n)]
def LSR(n): return [LS() for _ in range(n)]
mod = 1000000007
inf = float('INF')

#A
def A():
    a, b = LI()
    if (a * b) % 2:
        print("Yes")
    else:
        print("No")
    return

#B
def B():
    n = II()
    w = SR(n)
    d = []
    for i in w:
        d.append("".join(i))
    if len(set(d)) != n:
        print("No")
        return
    for i in range(n - 1):
        if w[i][-1] != w[i + 1][0]:
            print("No")
            return
    print("Yes")
    return

#C
def C():
    def gcd(a, b):
        a, b = max(a, b), min(a, b)
        while b:
            a, b = b, a % b
        return a
    n, x = LI()
    xn = LI()+[x]
    xn.sort()
    ans = xn[1] - xn[0]
    for i in range(1, n):
        ans = gcd(ans, xn[i + 1] - xn[i])
    print(ans)
    return

#D
def D():
    return

#Solve
if __name__ == '__main__':
    C()
```