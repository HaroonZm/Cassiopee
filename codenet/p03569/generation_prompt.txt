Voici un énoncé de problème :

Score :
400
points
Problem Statement
We have a string
s
consisting of lowercase English letters.
Snuke can perform the following operation repeatedly:
Insert a letter
x
to any position in
s
of his choice, including the beginning and end of
s
.
Snuke's objective is to turn
s
into a palindrome.
Determine whether the objective is achievable. If it is achievable, find the minimum number of operations required.
Notes
A
palindrome
is a string that reads the same forward and backward.
For example,
a
,
aa
,
abba
and
abcba
are palindromes, while
ab
,
abab
and
abcda
are not.
Constraints
1 \leq |s| \leq 10^5
s
consists of lowercase English letters.
Input
Input is given from Standard Input in the following format:
s
Output
If the objective is achievable, print the number of operations required.
If it is not, print
-1
instead.
Sample Input 1
xabxa
Sample Output 1
2
One solution is as follows (newly inserted
x
are shown in bold):
xabxa → xa
x
bxa → xaxbxa
x
Sample Input 2
ab
Sample Output 2
-1
No sequence of operations can turn
s
into a palindrome.
Sample Input 3
a
Sample Output 3
0
s
is a palindrome already at the beginning.
Sample Input 4
oxxx
Sample Output 4
3
One solution is as follows:
oxxx →
x
oxxx →
x
xoxxx →
x
xxoxxx


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
s = list(input())
X = []
hoge = 0
for i in range(len(s)):
    if s[i] == 'x':
        hoge += 1
    else:
        X.append(hoge)
        X.append(s[i])
        hoge = 0
X.append(hoge)
ans = 0

for i in range(len(X)//2):
    if i % 2 == 0:
        ans += abs(X[i]-X[-i-1])
    elif X[i] != X[-i-1]:
        print(-1)
        exit()
print(ans)
```