Voici un énoncé de problème :

Problem C:
Swimming Jam
Despite urging requests of the townspeople, the municipal office cannot afford to improve many
of the apparently deficient city amenities under this recession. The city swimming pool is one
of the typical examples. It has only two swimming lanes. The Municipal Fitness Agency, under
this circumstances, settled usage rules so that the limited facilities can be utilized fully.
Two lanes are to be used for one-way swimming of different directions. Swimmers are requested
to start swimming in one of the lanes, from its one end to the other, and then change the lane to
swim his/her way back. When he or she reaches the original starting end, he/she should return
to his/her initial lane and starts swimming again.
Each swimmer has his/her own natural constant pace. Swimmers, however, are not permitted
to pass other swimmers except at the ends of the pool; as the lanes are not wide enough, that
might cause accidents. If a swimmer is blocked by a slower swimmer, he/she has to follow the
slower swimmer at the slower pace until the end of the lane is reached. Note that the blocking
swimmer’s natural pace may be faster than the blocked swimmer; the blocking swimmer might
also be blocked by another swimmer ahead, whose natural pace is slower than the blocked
swimmer. Blocking would have taken place whether or not a faster swimmer was between them.
Swimmers can change their order if they reach the end of the lane simultaneously. They change
their order so that ones with faster natural pace swim in front. When a group of two or more
swimmers formed by a congestion reaches the end of the lane, they are considered to reach there
simultaneously, and thus change their order there.
The number of swimmers, their natural paces in times to swim from one end to the other, and
the numbers of laps they plan to swim are given. Note that here one "lap" means swimming
from one end to the other and then swimming back to the original end. Your task is to calculate
the time required for all the swimmers to finish their plans. All the swimmers start from the
same end of the pool at the same time, the faster swimmers in front.
In solving this problem, you can ignore the sizes of swimmers' bodies, and also ignore the time
required to change the lanes and the order in a group of swimmers at an end of the lanes.
Input
The input is a sequence of datasets. Each dataset is formatted as follows.
n
t
1
c
1
...
t
n
c
n
n
is an integer (1 ≤
n
≤ 50) that represents the number of swimmers.
t
i
and
c
i
are integers
(1 ≤
t
i
≤ 300, 1 ≤
c
i
≤ 250) that represent the natural pace in times to swim from one end
to the other and the number of planned laps for the
i
-th swimmer, respectively. ti and ci are
separated by a space.
The end of the input is indicated by a line containing one zero.
Output
For each dataset, output the time required for all the swimmers to finish their plans in a line.
No extra characters should occur in the output.
Sample Input
2
10 30
15 20
2
10 240
15 160
3
2 6
7 2
8 2
4
2 4
7 2
8 2
18 1
0
Output for the Sample Input
600
4800
36
40


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import deque
while 1:
    N = int(input())
    if N == 0:
        break

    T = [0]*N; C = [0]*N
    que0 = deque()
    que1 = deque()
    P = [list(map(int, input().split())) for i in range(N)]
    P.sort()
    for i in range(N):
        t, c = P[i]
        que0.append((i, t))
        T[i] = t
        C[i] = c

    INF = 10**18
    ans = 0
    rest = N
    while rest:
        t = min(que0[0][1] if que0 else INF, que1[0][1] if que1 else INF)
        st0 = []; st1 = []
        while que0 and que0[0][1] <= t:
            st0.append(que0.popleft()[0])
        st0.sort()
        for i in st0:
            que1.append((i, t+T[i]))
        while que1 and que1[0][1] <= t:
            st1.append(que1.popleft()[0])
        st1.sort()
        for i in st1:
            if C[i] == 1:
                rest -= 1
            else:
                que0.append((i, t+T[i]))
            C[i] -= 1
        ans = max(ans, t)
    print(ans)
```