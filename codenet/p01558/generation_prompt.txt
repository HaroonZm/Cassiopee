Voici un énoncé de problème :

Substring
長さnの文字列s=s
1
,s
2
,…,s
n
およびm個のクエリが与えられる。
各クエリq
k
(1 ≤ k ≤ m)は、"L++", "L--", "R++", "R--"の4種類のいずれかであり、
k番目のクエリq
k
に対してl[k]とr[k]を以下で定義する。
L++：l[k]=l[k-1]+1,r[k]=r[k-1]
L--：l[k]=l[k-1]-1,r[k]=r[k-1]
R++：l[k]=l[k-1],r[k]=r[k-1]+1
R--：l[k]=l[k-1],r[k]=r[k-1]-1
但し、l[0]=r[0]=1である。
この時、m個の部分文字列
s
l[k]
, s
l[k]+1
, …, s
r[k]-1
, s
r[k]
(1 ≤ k ≤ m)
について、何種類の文字列が作られるかを答えよ。
Input
入力は以下の形式で与えられる
n m
s
q
1
q
2
…
q
m
Constraints
文字列sは小文字アルファベットからなる
1 ≤ n ≤ 3×10
5
1 ≤ m ≤ 3×10
5
q
k
(1 ≤ k ≤ m)は、"L++"、"L--"、"R++"、"R--"のいずれか
1 ≤ l[k] ≤ r[k] ≤ n (1 ≤ k ≤ m)
Output
問題の解を1行に出力せよ
Sample Input 1
5 4
abcde
R++
R++
L++
L--
Output for the Sample Input 1
3
l[1]=1, r[1]=2であり、部分文字列は"ab"である
l[2]=1, r[2]=3であり、部分文字列は"abc"である
l[3]=2, r[3]=3であり、部分文字列は"bc"である
l[4]=1, r[4]=3であり、部分文字列は"abc"である
よって、生成される文字列は{"ab","abc","bc"}の3種類である。
Sample Input 2
4 6
abab
R++
L++
R++
L++
R++
L++
Output for the Sample Input 2
4
l[1]=1, r[1]=2であり、部分文字列は"ab"である
l[2]=2, r[2]=2であり、部分文字列は"b"である
l[3]=2, r[3]=3であり、部分文字列は"ba"である
l[4]=3, r[4]=3であり、部分文字列は"a"である
l[5]=3, r[5]=4であり、部分文字列は"ab"である
l[6]=4, r[6]=4であり、部分文字列は"b"である
よって、生成される文字列は{"a","ab","b","ba"}の4種類である。
Sample Input 3
10 13
aacacbabac
R++
R++
L++
R++
R++
L++
L++
R++
R++
L--
L--
R--
R--
Output for the Sample Input 3
11


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
class RollingHash:
    def __init__(self, s, base, MOD):
        self.s = s
        self.l = l = len(s)
        self.base = base
        self.MOD = MOD
        self.h = h = [0]*(l + 1)
        for i in xrange(l):
            h[i+1] = (h[i] * base + ord(s[i])) % MOD
    def get(self, l, r):
        MOD = self.MOD
        return ((self.h[r] - self.h[l]*pow(self.base, r-l, MOD) + MOD)) % MOD
n, m = map(int, raw_input().split())
s = raw_input()
h1 = RollingHash(s, 13, 10**9+7)
h2 = RollingHash(s, 17, 10**9+7)
l = 0; r = 1
vs = set()
ans = 0
for i in xrange(m):
    q = raw_input()
    if q == "R++":
        r += 1
    elif q == "R--":
        r -= 1
    elif q == "L++":
        l += 1
    else:
        l -= 1
    v = (h1.get(l, r), h2.get(l, r))
    if v not in vs:
        ans += 1
        vs.add(v)
print ans
```