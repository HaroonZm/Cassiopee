Voici un énoncé de problème :

Score :
400
points
Problem Statement
We have a large square grid with
H
rows and
W
columns.
Iroha is now standing in the top-left cell.
She will repeat going right or down to the adjacent cell, until she reaches the bottom-right cell.
However, she cannot enter the cells in the intersection of the bottom
A
rows and the leftmost
B
columns. (That is, there are
A×B
forbidden cells.) There is no restriction on entering the other cells.
Find the number of ways she can travel to the bottom-right cell.
Since this number can be extremely large, print the number modulo
10^9+7
.
Constraints
1 ≦ H, W ≦ 100,000
1 ≦ A < H
1 ≦ B < W
Input
The input is given from Standard Input in the following format:
H
W
A
B
Output
Print the number of ways she can travel to the bottom-right cell, modulo
10^9+7
.
Sample Input 1
2 3 1 1
Sample Output 1
2
We have a
2×3
grid, but entering the bottom-left cell is forbidden. The number of ways to travel is two: "Right, Right, Down" and "Right, Down, Right".
Sample Input 2
10 7 3 4
Sample Output 2
3570
There are
12
forbidden cells.
Sample Input 3
100000 100000 99999 99999
Sample Output 3
1
Sample Input 4
100000 100000 44444 55555
Sample Output 4
738162020


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
h,w,a,b=map(int,input().split())
mod=10**9+7
N=10**6
ans=0
def comb(n, r, mod):
    if ( r<0 or r>n ):
        return 0
    r = min(r, n-r)
    return g1[n] * g2[r] * g2[n-r] % mod
g1 = [1, 1] # 元テーブル
g2 = [1, 1] #逆元テーブル
inverse = [0, 1] #逆元テーブル計算用テーブル
for i in range( 2, N + 1 ):
    g1.append( ( g1[-1] * i ) % mod )
    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )
    g2.append( (g2[-1] * inverse[-1]) % mod )
for i in range(1,h-a+1):
  ans=(ans+comb(b+i-2,i-1,mod)*comb(h+w-b-i-1,w-b-1,mod))%mod
print(ans)
```