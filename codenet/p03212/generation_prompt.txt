Voici un énoncé de problème :

Score :
300
points
Problem Statement
You are given an integer
N
. Among the integers between
1
and
N
(inclusive), how many
Shichi-Go-San numbers
(literally "Seven-Five-Three numbers") are there?
Here, a Shichi-Go-San number is a positive integer that satisfies the following condition:
When the number is written in base ten, each of the digits
7
,
5
and
3
appears at least once, and the other digits never appear.
Constraints
1 \leq N < 10^9
N
is an integer.
Input
Input is given from Standard Input in the following format:
N
Output
Print the number of the Shichi-Go-San numbers between
1
and
N
(inclusive).
Sample Input 1
575
Sample Output 1
4
There are four Shichi-Go-San numbers not greater than
575
:
357, 375, 537
and
573
.
Sample Input 2
3600
Sample Output 2
13
There are
13
Shichi-Go-San numbers not greater than
3600
: the above four numbers,
735, 753, 3357, 3375, 3537, 3557, 3573, 3575
and
3577
.
Sample Input 3
999999999
Sample Output 3
26484


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import numpy as np
from copy import deepcopy
import math
import itertools

N = int(input())

## 入力整数Nの桁数を出力する
## 10**(out-1) <= in < 10**out
def int2digit(num):
  return(len(str(num)))

## k桁の753数を全て構成する
def mk753_digit(digit):
  lst_753_tuple = list(itertools.product([7,5,3], repeat=digit))
  lst_753_str = list(map(lambda x: ''.join(map(str, x)), lst_753_tuple))
  lst_753_contain7 = [s for s in lst_753_str if '7' in s]
  lst_753_contain75 = [s for s in lst_753_contain7 if '5' in s]
  lst_753_contain753 = [s for s in lst_753_contain75 if '3' in s]
  lst_753 = list(map(int, lst_753_contain753))
  return lst_753

ans = 0
digit = int2digit(N)
for k in range(digit):
  ans += len(mk753_digit(k))
lst_753_samedigit = mk753_digit(digit)
lst_753_samedigit_smaller = [x for x in lst_753_samedigit if x <= N]
ans += len(lst_753_samedigit_smaller)

print(ans)
```