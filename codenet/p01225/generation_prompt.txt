Voici un énoncé de problème :

Problem C:
ラミー
あなたの友達は最近 UT-Rummy というカードゲームを思いついた．
このゲームで使うカードには赤・緑・青のいずれかの色と1から9までのいずれかの番号が
つけられている．
このゲームのプレイヤーはそれぞれ9枚の手札を持ち，
自分のターンに手札から1枚選んで捨てて，
代わりに山札から1枚引いてくるということを繰り返す．
このように順番にターンを進めていき，
最初に手持ちのカードに3枚ずつ3つの「セット」を作ったプレイヤーが勝ちとなる．
セットとは，同じ色の3枚のカードからなる組で，すべて同じ数を持っているか
連番をなしているもののことを言う．
連番に関しては，番号の巡回は認められない．
例えば，7, 8, 9は連番であるが 9, 1, 2は連番ではない．
あなたの友達はこのゲームをコンピュータゲームとして売り出すという計画を立てて，
その一環としてあなたに勝利条件の判定部分を作成して欲しいと頼んできた．
あなたの仕事は，手札が勝利条件を満たしているかどうかを判定する
プログラムを書くことである．
Input
入力の1行目にはデータセット数を表す数
T
(0 <
T
≤ 50) が与えられる．
この行に引き続き
T
個のデータセットが与えられる．
各データセットは2行からなり，
1行目には
i
番目
(
i
= 1, 2, ..., 9)
のカードの数字
n
i
がそれぞれスペースで区切られて与えられ，
2行目には
i
番目のカードの色を表す文字
c
i
がそれぞれスペースで区切られて与えられる．
カードの数字
n
i
は 1 ≤
n
i
≤ 9
を満たす整数であり，
カードの色
c
i
はそれぞれ “
R
”, “
G
”,
“
B
”
のいずれかの文字である．
1つのデータセット内に色と数字がともに同じカードが5枚以上出現することはない．
Output
各データセットにつき，勝利条件を満たしていれば
“
1
”，
そうでなければ “
0
” と出力せよ．
Sample Input
5
1 2 3 3 4 5 7 7 7
R R R R R R G G G
1 2 2 3 4 4 4 4 5
R R R R R R R R R
1 2 3 4 4 4 5 5 5
R R B R R R R R R
1 1 1 3 4 5 6 6 6
R R B G G G R R R
2 2 2 3 3 3 1 1 1
R G B R G B R G B
Output for the Sample Input
1
0
0
0
1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
MOD = 10 ** 9 + 7
INF = 10 ** 10
import sys
sys.setrecursionlimit(100000000)
dy = (-1,0,1,0)
dx = (0,1,0,-1)
from itertools import permutations

def main():
    T = int(input())
    for _ in range(T):
        number = list(map(int,input().split()))
        color = input().split()
        ans = 0
        for ptr in permutations(range(9)):
            flag = True
            for i in range(3):
                c = color[ptr[3*i]]
                card = []
                for j in range(3):
                    if c != color[ptr[3*i + j]]:
                        flag = False
                        break
                    card.append(number[ptr[3*i + j]])
                if not flag:
                    break
                card.sort()
                if card[0] == card[2] or (card[2] - card[1] == 1 and card[1] - card[0] == 1):
                    continue
                else:
                    flag = False
                    break
            if flag:
                ans = 1
                break
        print(ans)
if __name__ == '__main__':
    main()
```