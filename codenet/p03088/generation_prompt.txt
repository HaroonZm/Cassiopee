Voici un énoncé de problème :

Score :
400
points
Problem Statement
You are given an integer
N
. Find the number of strings of length
N
that satisfy the following conditions, modulo
10^9+7
:
The string does not contain characters other than
A
,
C
,
G
and
T
.
The string does not contain
AGC
as a substring.
The condition above cannot be violated by swapping two adjacent characters once.
Notes
A substring of a string
T
is a string obtained by removing zero or more characters from the beginning and the end of
T
.
For example, the substrings of
ATCODER
include
TCO
,
AT
,
CODER
,
ATCODER
and
(the empty string), but not
AC
.
Constraints
3 \leq N \leq 100
Input
Input is given from Standard Input in the following format:
N
Output
Print the number of strings of length
N
that satisfy the following conditions, modulo
10^9+7
.
Sample Input 1
3
Sample Output 1
61
There are
4^3 = 64
strings of length
3
that do not contain characters other than
A
,
C
,
G
and
T
. Among them, only
AGC
,
ACG
and
GAC
violate the condition, so the answer is
64 - 3 = 61
.
Sample Input 2
4
Sample Output 2
230
Sample Input 3
100
Sample Output 3
388130742
Be sure to print the number of strings modulo
10^9+7
.


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
MOD = pow(10,9)+7
N = int(input())
dp = [[[[0 for _ in range(4)] for _ in range(4)] for _ in range(4)] for _ in range(N+1)]
dp[0][3][3][3] = 1 #3333Sとくる場合は制約に何も引っかからない
#dp[i][j][k][l]: i文字目まで見て最後のの三文字がlkjであるような場合の数
#A=0, G=1, C=2, T=3

for i in range(N):
  for j in range(4):
    for k in range(4):
      for l in range(4):
        if dp[i][j][k][l] == 0: #i文字目で条件にあてはまるものがないときは飛ばす。
          continue
        for a in range(4): #ダメな条件を飛ばす
          if a == 2 and j == 1 and k == 0: #AGC
            continue
          if a == 1 and j == 2 and k == 0: #ACG
            continue
          if a == 2 and j == 0 and k == 1: #GAC
            continue
          if a == 2 and j == 1 and l == 0: #A?GC
            continue
          if a == 2 and k == 1 and l == 0: #AG?c
            continue
          dp[i+1][a][j][k] += dp[i][j][k][l]%MOD
ans = 0            
for j in range(4):
  for k in range(4):
    for l in range(4):
      ans += dp[N][j][k][l]
ans = ans%MOD
print(ans)
```