Voici un énoncé de problème :

Problem F:
Line Puzzle
プログラミングでパズルを解いてみよう。
n
×
n
の数字が格子状に並んでいる。数字のいくつかは丸で囲まれており、これらを起点と呼ぶことにする。パズルのルールは以下のとおりである：
各起点から縦・横に進む１本の線を引く（斜めには引けない）。
通った数字の和が起点の数字と同じになるように線を伸ばす。
線は枝分かれしてはいけない。
線はすでに引かれた数字を通ることはできない（線は交差してはいけない）。
線は２個以上の起点を通ることはできない。
下図に示すように、パズルのゴールはすべての起点を使い、すべての数字に線を引くことである。
あなたの仕事は、パズルを解くプログラムを作成することである。
ただしこの問題では、与えられたパズルが解けるものかどうかを判定するだけでよい。
Input
入力は複数のデータセットからなる。各データセットの形式は以下のとおりである：
n
n
×
n
の数字
n
×
n
の数字が与えられるパズルを示し、起点の数字は負の数として与えられる。
n
が 0 のとき入力の終わりを示す。
n
は 3 以上 8 以下、起点以外の数字は 1 以上 50 以下、起点は -50 以上 -1 以下であると仮定してよい。また、入力されるパズルの性質として以下のことを仮定してよい：
与えられるパズルの各行、各列には最低でも１つの起点がある。
起点の個数は、全体の数字の個数 (
n
×
n
) の 20 % から 40 % 程度である。
Output
各データセットに対して、パズルが解けるものであれば "YES" を、そうでなければ "NO" と１行に出力せよ。
Sample Input
3
-3 1 1
2 -4 1
2 1 -1
3
-4 1 1
1 1 -6
1 -5 3
4
-8 6 -2 1
2 -7 -2 1
1 -1 1 1
1 1 1 -5
6
2 2 3 -7 3 2
1 -10 1 1 3 2
2 6 5 2 -6 1
3 4 -23 2 2 5
3 3 -6 2 3 7
-7 2 3 2 -5 -13
6
2 2 3 -7 3 2
1 -10 1 1 3 2
2 6 5 2 -6 1
3 4 -23 2 2 5
3 3 -6 2 3 7
-7 2 3 2 -5 -12
0
Output for the Sample Input
YES
NO
NO
YES
NO


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
board = []
used = []
v = []
n = 0
dx = [1, 0, -1, 0]
dy = [0, 1, 0, -1]

def set_v():
    global v
    for y in range(0, n):
        for x in range(0, n):
            if board[y][x] < 0:
                v += [(x, y)]
                used[y][x] = 1 

def solve(x, y, rest, s, k):
    if s == 0:
        if rest == 0:
            if k == len(v) - 1:
                return True
            return False
        if k < len(v) - 1:
            k1 = k + 1
            xx, yy = v[k1]
            used[y][x] = 1
            if solve(xx, yy, rest - 1, - board[yy][xx], k1):
                return True
            used[y][x] = 0
    if s <= 0 or k >= len(v):
        return False
    if board[y][x] > 0:
        used[y][x] = 1
    for d in range(0, 4):
        xx = x + dx[d]
        yy = y + dy[d]
        if 0 <= xx < n and 0 <= yy < n and used[yy][xx] == 0:
            if solve(xx, yy, rest - 1, s - board[yy][xx], k):
                return True
    if board[y][x] > 0:
        used[y][x] = 0
    return False

while True:
    board = []
    v = []
    line = input()
    n = int(line)
    if n == 0:
        break
    for _ in range(0, n):
        a = list(map(int, list(input().split())))
        board.append(a)
    used = [ [0] * n for _ in range(0, n)]
    set_v()
    x, y = v[0]
    print("YES" if solve(x, y, n * n - 1, - board[y][x], 0) else "NO")
```