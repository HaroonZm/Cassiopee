En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(s):
        a = []
        for c in s:
            if '0' <= c <= '9':
                if len(a) > 0 and isinstance(a[-1], int):
                    a[-1] *= 10
                    a[-1] += int(c)
                else:
                    a.append(int(c))
            else:
                a.append(c)

        for i in range(len(a)):
            c = a[i]
            if isinstance(c, int):
                a[i] = set([c])

        def _f(a):
            li = None
            l = len(a)
            if l == 1:
                return a

            for i in range(l):
                if a[i] == '(':
                    li = i
            if not li is None:
                ri = None
                for i in range(li+1,l):
                    if a[i] == ')':
                        ri = i
                        break
                t = _f(a[li+1:ri])
                return _f(a[:li] + t + a[ri+1:])

            ts = set()
            for i in range(l):
                c = a[i]
                if isinstance(c, set) or c not in '+-*/':
                    continue
                ls = _f(a[:i])[0]
                rs = _f(a[i+1:])[0]
                for lc in ls:
                    for rc in rs:
                        if c == '+':
                            ts.add(lc+rc)
                        elif c == '-':
                            ts.add(lc-rc)
                        elif c == '*':
                            ts.add(lc*rc)
                        elif c == '/' and rc != 0:
                            if lc * rc < 0:
                                ts.add(-(abs(lc)//abs(rc)))
                            else:
                                ts.add(lc//rc)

            return [ts]

        return len(_f(a)[0])

    while 1:
        s = S()
        if s == '#':
            break
        rr.append(f(s))
        # print('rr', rr[-1])

    return '\n'.join(map(str,rr))

print(main())
```