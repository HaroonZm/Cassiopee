Voici un énoncé de problème :

6÷2(1+2)
English text is not available in this practice contest.
数学科の学生であるきたまさ君は，数学はとても得意なのだが算数はあまり得意ではない．
特に演算子の優先順位が苦手で，
カッコの中を先に計算するというのはわかるのだが， "+" と "*" のどちらを優先したら良いかとか複数の演算子が並んでいるときに左から計算したら良いのか右から計算したら良いのか覚えておらず，
その時の気分で好きな順番で計算をしている．例えば，"1*1-1+1"という数式を前から"((1*1)-1)+1"という順番で計算する場合もあれば，真ん中から"(1*(1-1))+1"という順番で計算する場合さえある．
また，分数や小数も苦手で，割り算では常に絶対値の小さい方に丸め，小数部を切り捨てて整数にしてしまう．
割る数がゼロであった場合には，きたまさ君はどこかで間違えたと思ってもう一度最初から計算しなおすことにしている．
きたまさ君はどんな順番で計算しても最終的な計算結果は同じになると主張しているので，あなたにはそれが間違いであると示すために，与えられた数式に対して
きたまさ君の計算結果が何通りあり得るかを求めるプログラムを書いて欲しい．
ただし，演算の順番が異なっていても，最終的な答えが同じならば一つと数えるものとし，
また，与えられる数式は，少なくとも一つはゼロ割が発生しない演算順序が存在し，いかなる演算順序で計算した場合でも，計算結果と途中で現れる数の絶対値は常に 10
9
以下であることが保証されている．
Input
入力はひとつ以上の行からなり，入力の各行は数式ひとつを含む．数式の文法は以下の BNF で与えられる．
<expr> ::= <num>
| "(" <expr> ")"
| <expr> "+" <expr>
| <expr> "-" <expr>
| <expr> "*" <expr>
| <expr> "/" <expr>
<num> ::= <digit> | <num> <digit>
<digit> ::= "0" | "1" | "2" | "3" | "4"
| "5" | "6" | "7" | "8" | "9"
すべての数式はこの構文規則に従う．また，入力行の長さは 200 文字を超えない．ひとつの数式が含む演算子 ( "+" , "-" , "*" , "/" ) の数は 10 個を超えない．
入力の終わりは "#" ひとつだけからなる行によって示される．
Output
それぞれの数式について，きたまさ君の計算結果が何通りあり得るかを出力せよ．出力は数式ひとつごとに 1 行とする．
Sample Input
6/2*(1+2)
1-1-1
(1-1-1)/2
#
Output for the Sample Input
2
2
1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(s):
        a = []
        for c in s:
            if '0' <= c <= '9':
                if len(a) > 0 and isinstance(a[-1], int):
                    a[-1] *= 10
                    a[-1] += int(c)
                else:
                    a.append(int(c))
            else:
                a.append(c)

        for i in range(len(a)):
            c = a[i]
            if isinstance(c, int):
                a[i] = set([c])

        def _f(a):
            li = None
            l = len(a)
            if l == 1:
                return a

            for i in range(l):
                if a[i] == '(':
                    li = i
            if not li is None:
                ri = None
                for i in range(li+1,l):
                    if a[i] == ')':
                        ri = i
                        break
                t = _f(a[li+1:ri])
                return _f(a[:li] + t + a[ri+1:])

            ts = set()
            for i in range(l):
                c = a[i]
                if isinstance(c, set) or c not in '+-*/':
                    continue
                ls = _f(a[:i])[0]
                rs = _f(a[i+1:])[0]
                for lc in ls:
                    for rc in rs:
                        if c == '+':
                            ts.add(lc+rc)
                        elif c == '-':
                            ts.add(lc-rc)
                        elif c == '*':
                            ts.add(lc*rc)
                        elif c == '/' and rc != 0:
                            if lc * rc < 0:
                                ts.add(-(abs(lc)//abs(rc)))
                            else:
                                ts.add(lc//rc)

            return [ts]

        return len(_f(a)[0])

    while 1:
        s = S()
        if s == '#':
            break
        rr.append(f(s))
        # print('rr', rr[-1])

    return '\n'.join(map(str,rr))

print(main())
```