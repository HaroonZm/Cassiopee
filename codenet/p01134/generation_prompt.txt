Voici un énoncé de problème :

Problem D:
Area Separation
Mr. Yamada Springfield Tanaka は、国家区画整理事業局局長補佐代理という大任を任されていた。
現在、彼の国は大規模な区画整理の最中であり、この区画整理をスムーズに終わらせることができたならば彼の昇進は間違いなしであるとされている。
ところが、そんな彼の出世を快く思わない者も多くいるのだ。 そんな人間の 1 人に、Mr.Sato Seabreeze Suzuki がいた。
彼は、ことあるごとに Mr. Yamada の足を引っ張ろうと画策してきた。 今回も Mr. Sato は足を引っ張るために、実際の区画整理を担当している組織に圧力をかけて、区画整理の結果を非常に分かりにくいものにしてしまった。
そのため、Mr. Yamada に渡された結果は、 ある正方形の土地をどの直線で分割したかという情報のみになっていた。
最低限、その正方形の土地がいくつに分割されたかだけでも分からなければ、Mr. Yamada は昇進どころか解雇されること間違いなしである。
あなたの仕事は、(-100,-100)、(100,-100)、(100,100)、(-100,100) を頂点とする正方形領域が、与えられた
n
本の直線によっていくつに分割されているかを調べるプログラムを書いて、Mr. Yamada を解雇の危機から救うことである。
Input
入力は複数のテストケースからなる。
それぞれのテストケースの最初の行では、直線数を表す整数
n
が与えられる（1 <=
n
<= 100）。 その後の
n
行にはそれぞれ 4 つの整数
x
1
、
y
1
、
x
2
、
y
2
が含まれる。
これらの整数は直線上の相異なる 2 点 (
x
1
,
y
1
) と (
x
2
,
y
2
) を表す。
与えられる 2 点は常に正方形の辺上の点であることが保証されている。 与えられる
n
本の直線は互いに異なり、直線同士が重なることはない。 また、直線が正方形の辺と重なることもない。
入力の終了は
n
= 0 で表される。
Output
それぞれのテストケースについて、
n
本の直線によって分割された領域の数を 1 行で出力せよ。
なお、距離が 10
-10
未満の 2 点は一致するとみなしてよい。 また、|PQ| < 10
-10
、|QR| < 10
-10
でかつ |PR| >= 10
-10
となるような交点の組 P、Q、R は存在しない。
Sample Input
2
-100 -20 100 20
-20 -100 20 100
2
-100 -20 -20 -100
20 100 100 20
0
Output for the Sample Input
4
3


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def make_line(line_str):
    x1, y1, x2, y2 = map(int, line_str.split())
    return (x1 + 1j * y1, x2 + 1j * y2)

def cross_point(l1, l2):
    (p1, p2), (p3, p4) = l1, l2
    v34, v12, v23, v31 = p4 - p3, p2 - p1, p3 - p2, p1 - p3
    s1 = v34.real * v31.imag - v34.imag * v31.real
    s2 = v34.real * v23.imag - v34.imag * v23.real
    if s1 + s2 == 0:
        return None
    rt = s1 / (s1 + s2)
    if 0 < rt < 1:
        cp = (p1 + v12 * rt) * 1e10
        return (int(cp.real), int(cp.imag))
    else:
        return None

while True:
    n = int(input())
    if not n: break
    lines = [make_line(input()) for _ in range(n)]

    num_crossed = 0
    for i, line in enumerate(lines):
        crossed = set(cross_point(line, l) for l in lines[:i])
        crossed.discard(None)
        num_crossed += len(crossed)

    print(1 + n + num_crossed)
```