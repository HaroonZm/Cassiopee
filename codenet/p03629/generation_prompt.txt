Voici un énoncé de problème :

Score :
600
points
Problem Statement
A subsequence of a string
S
is a string that can be obtained by deleting zero or more characters from
S
without changing the order of the remaining characters.
For example,
arc
,
artistic
and (an empty string) are all subsequences of
artistic
;
abc
and
ci
are not.
You are given a string
A
consisting of lowercase English letters.
Find the shortest string among the strings consisting of lowercase English letters that are not subsequences of
A
.
If there are more than one such string, find the lexicographically smallest one among them.
Constraints
1 \leq |A| \leq 2 \times 10^5
A
consists of lowercase English letters.
Input
Input is given from Standard Input in the following format:
A
Output
Print the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of
A
.
Sample Input 1
atcoderregularcontest
Sample Output 1
b
The string
atcoderregularcontest
contains
a
as a subsequence, but not
b
.
Sample Input 2
abcdefghijklmnopqrstuvwxyz
Sample Output 2
aa
Sample Input 3
frqnvhydscshfcgdemurlfrutcpzhopfotpifgepnqjxupnskapziurswqazdwnwbgdhyktfyhqqxpoidfhjdakoxraiedxskywuepzfniuyskxiyjpjlxuqnfgmnjcvtlpnclfkpervxmdbvrbrdn
Sample Output 3
aca


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import deque
from sys import exit

As = input()

As = [ord(A) - ord('a') for A in As]
lenA = len(As)
posChars = [lenA] * 26
posNexts = [[] for _ in range(lenA + 1)]
for i in reversed(range(lenA)):
    posNexts[i + 1] = posChars.copy()
    posChars[As[i]] = i
posNexts[0] = posChars.copy()

prevs = [None] * lenA
Q = deque()
Q.append((0, -1))
while Q:
    lenAns, pos = Q.popleft()
    for ch in range(26):
        posNext = posNexts[pos + 1][ch]
        if posNext == lenA:
            ans = [chr(ord('a') + ch)]
            while pos != -1:
                ans.append(chr(ord('a') + As[pos]))
                pos = prevs[pos]
            print(''.join(reversed(ans)))
            exit()
        if prevs[posNext] is None:
            prevs[posNext] = pos
            Q.append((lenAns + 1, posNext))
```