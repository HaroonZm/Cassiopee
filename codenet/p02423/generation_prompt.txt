Voici un énoncé de problème :

Bit Operation I
Given a non-negative decimal integer $x$, convert it to binary representation $b$ of 32 bits. Then, print the result of the following operations to $b$ respecitvely.
Inversion: change the state of each bit to the opposite state
Logical left shift: shift left by 1
Logical right shift: shift right by 1
Input
The input is given in the following format.
$x$
Output
Print the given bits, results of inversion, left shift and right shift in a line respectively.
Constraints
$0 \leq x \leq 2^{32} - 1$
Sample Input 1
8
Sample Output 1
00000000000000000000000000001000
11111111111111111111111111110111
00000000000000000000000000010000
00000000000000000000000000000100
Sample Input 2
13
Sample Output 2
00000000000000000000000000001101
11111111111111111111111111110010
00000000000000000000000000011010
00000000000000000000000000000110


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
x=int(input())
y=format(x,"b").zfill(10)
ly=len(y)
ly=32-ly
pady="0"*ly
print(pady+y)
rev=2**32-1-x
z=format(rev,"b").zfill(10)
lz=len(z)
lz=32-lz
padz="0"*lz
print(padz+z)
left=x*2
if left>=2**32:
    left-=2**32
u=format(left,"b").zfill(10)
lu=len(u)
lu=32-lu
padu="0"*lu
print(padu+u)

right=x//2
v=format(right,"b").zfill(10)
lv=len(v)
lv=32-lv
padv="0"*lv
print(padv+v)
```