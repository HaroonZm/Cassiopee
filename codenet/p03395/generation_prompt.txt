En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
N=int(input())
inf=float("inf")
dp=[[inf]*51 for i in range(51)]
for b in range(51):
  for a in range(51):
    if b==0:
      if a==0:
        dp[a][b]=0
      else:
        dp[a][b]=1
    else:
      for i in range(1,a+1):
        if a==b:
          dp[a][b]=0
        elif dp[a%i][b]<=50 or a%i==b:
          dp[a][b]=i
          break
a=[int(i) for i in input().split()]
b=[int(i) for i in input().split()]
ans=0
stack=[[a[i]] for i in range(N)]
def dfs(x):
  if x==0:
    return 
  global ans
  ans+=2**x
  for i in range(N):
    visited=[False]*51
    for j in stack[i]:
      visited[j]=True
      if not visited[j%x]:
        stack[i].append(j%x)
        visited[j%x]=True
  k=0
  for i in range(N):
    k=max(k,min([dp[j][b[i]] for j in stack[i]]))
  if k==0:
    return 
  return dfs(k)
M=max([dp[a[i]][b[i]] for i in range(N)])
if M>50:
  print(-1)
  exit()
dfs(M)
print(ans)
```