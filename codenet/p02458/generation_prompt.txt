Voici un énoncé de problème :

Multi-Set
For a set $S$ of integers, perform a sequence of the following operations. Note that
multiple elements can have equivalent values in $S$
.
insert($x$): Insert $x$ to $S$ and report the number of elements in $S$ after the operation.
find($x$): Report the number of $x$ in $S$.
delete($x$): Delete all $x$ from $S$.
dump($L$, $R$): Print elements $x$ in $S$ such that $L \leq x \leq R$.
Input
The input is given in the following format.
$q$
$query_1$
$query_2$
:
$query_q$
Each query $query_i$ is given by
0 $x$
or
1 $x$
or
2 $x$
or
3 $L$ $R$
where the first digits
0
,
1
,
2
and
3
represent insert, find, delete and dump operations respectively.
Output
For each insert operation, print the number of elements in $S$.
For each find operation, print the number of specified elements in $S$.
For each dump operation, print the corresponding elements in ascending order. Print an element in a line.
Constraints
$1 \leq q \leq 200,000$
$0 \leq x \leq 1,000,000,000$
The total number of elements printed by dump operations does not exceed $1,000,000$
The sum of numbers printed by find operations does not exceed $2,000,000$
Sample Input 1
10
0 1
0 1
0 2
0 3
2 2
1 1
1 2
1 3
0 4
3 1 4
Sample Output 1
1
2
3
4
2
0
1
4
1
1
3
4


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
import bisect
nq = int(input())
lines = sys.stdin.readlines()
ans = [None] * nq
arr = []
for i in range(nq):
    q, *arg = lines[i].split()
    x = int(arg[0])
    l_idx = bisect.bisect_left(arr, x)
    r_idx = bisect.bisect_right(arr, x)
    if q == '0':    # insert x
        arr.insert(l_idx, x)
        ans[i] = str(len(arr))
    elif q == '1':   # find x
        ans[i] = r_idx - l_idx
    elif q == '2':           # delete x
        arr[l_idx:r_idx] = []
    else:                   # dump L R
        r_idx = bisect.bisect_right(arr, int(arg[1]))
        ans[i] = '\n'.join(map(str, arr[l_idx:r_idx])) if l_idx != r_idx else None
    #print(q, *arg, '\t', arr, '\t', ans[i])

[print(x) for x in ans if x is not None]
```