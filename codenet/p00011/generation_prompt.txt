Voici un énoncé de problème :

Drawing Lots
Let's play Amidakuji.
In the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.
In the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain "4 1 2 5 3" in the bottom.
Your task is to write a program which reads the number of vertical lines
w
and configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,
w
are assigne to the vertical lines from left to right.
Input
w
n
a
1
,
b
1
a
2
,
b
2
.
.
a
n
,
b
n
w
(
w
≤ 30) is the number of vertical lines.
n
(
n
≤ 30) is the number of horizontal lines. A pair of two integers
a
i
and
b
i
delimited by a comma represents the
i
-th horizontal line.
Output
The number which should be under the 1st (leftmost) vertical line
The number which should be under the 2nd vertical line
:
The number which should be under the
w
-th vertical line
Sample Input
5
4
2,4
3,5
1,2
3,4
Output for the Sample Input
4
1
2
5
3


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
amida = []

def main():
	num_vlines = int(raw_input());
	num_wlines = int(raw_input());

	init_amida(num_vlines)

	count = 0;
	while count < num_wlines :
		ab = raw_input().strip().split(',')
		# print "--- input keys ---"
		# pprint.pprint(ab)
		transposition(int(ab[0]), int(ab[1]))
		# print "--- dump amida ---"
		# print amida.items()
		count += 1

	for i in range(1, num_vlines + 1):
		print amida[i]

def init_amida(num_vlines):
	for i in range(num_vlines + 1):
		amida.append(i)

	# pprint.pprint(amida)

def transposition(a, b):
	tmp = amida[a]
	amida[a] = amida[b]
	amida[b] = tmp

main()
```