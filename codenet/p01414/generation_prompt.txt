Voici un énoncé de problème :

H: Rectangular Stamps
ICPC で良い成績を収めるには修行が欠かせない．うさぎは ICPC で勝ちたいので，今日も修行をすることにした．
今日の修行は，絵を描くことによって，創造力を高めようというものである．四角いスタンプを用いて，上手く模様を描こう．
大小さまざまなスタンプを使い，4 × 4 のマス目の紙に指定された赤・緑・青の通りの絵を完成させたい．スタンプは長方形であり，マス目にぴったり合わせて使う．スタンプの縦と横を入れ替えることはできない．
紙は最初色が塗られていない状態にある．紙にスタンプを押すと，押された部分がスタンプの色に変わり，下に隠れた色は全く見えなくなる．スタンプの色は付けるインクにより決定されるので，どのスタンプでも，好きな色を選ぶことが可能である．スタンプは紙から一部がはみ出た状態で押すことも可能であり，はみ出た部分は無視される．
1 つのスタンプを複数回使うことは可能である．同じスタンプを別の色に対して使ってもよい．スタンプを押すのはやや神経を使う作業なので，出来るだけスタンプを押す回数を少なくしたい．
Input
N
H
1
W
1
...
H
N
W
N
C
1,1
C
1,2
C
1,3
C
1,4
C
2,1
C
2,2
C
2,3
C
2,4
C
3,1
C
3,2
C
3,3
C
3,4
C
4,1
C
4,2
C
4,3
C
4,4
N
はスタンプの個数，
H
i
,
W
i
(1 ≤
i
≤
N
) はそれぞれ，
i
番目のスタンプの縦の長さ，横の長さを表す整数である．
C
i
,
j
(1 ≤
i
≤ 4，1 ≤
j
≤ 4) は，上から
i
行目，左から
j
列目のマスについて指定された絵の色を表す文字である．赤は
R
，緑は
G
，青は
B
で表される．
1 ≤
N
≤ 16，1 ≤
H
i
≤ 4，1 ≤
W
i
≤ 4 を満たす．(
H
i
,
W
i
) として同一の組は複数回現れない．
Output
絵を完成させるためにスタンプを押さなければならない最小の回数を 1 行に出力せよ．
Sample Input 1
2
4 4
1 1
RRRR
RRGR
RBRR
RRRR
Sample Output 1
3
Sample Input 2
1
2 3
RRGG
BRGG
BRRR
BRRR
Sample Output 2
5


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
eps = 1.0 / 10**13
mod = 10**9+7
dd = [(-1,0),(0,1),(1,0),(0,-1)]
ddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()
def pf(s): return print(s, flush=True)

def main():
    rr = []

    def f(n):
        a = [LI() for _ in range(n)]
        b = []
        for _ in range(4):
            b += [c for c in S()]
        s = set()
        ms = 2**16 - 1
        ii = [2**i for i in range(16)]
        for h, w in a:
            for i in range(-h+1, 4):
                for j in range(-w+1, 4):
                    mask = ms
                    for k in range(max(0, i), min(4, i+h)):
                        for l in range(max(0, j), min(4, j+w)):
                            mask -= ii[k*4+l]
                    s.add(mask)
        ta = []
        for mask in s:
            for c in 'RGB':
                t = 0
                for i in range(16):
                    if ii[i] & mask:
                        continue
                    if b[i] == c:
                        t += ii[i]
                if t > 0:
                    ta.append((mask, t))

        v = collections.defaultdict(bool)
        q = set([0])
        r = 0
        while q:
            r += 1
            nq = set()
            for c in q:
                v[c] = True
            for c in q:
                for mask, t in ta:
                    n = (c & mask) + t
                    if v[n]:
                        continue
                    if n == ms:
                        return r
                    nq.add(n)
            q = nq

        return -1

    while 1:
        n = I()
        if n == 0:
            break
        rr.append(f(n))
        break

    return '\n'.join(map(str, rr))

print(main())
```