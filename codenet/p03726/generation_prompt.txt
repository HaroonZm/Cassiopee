Voici un énoncé de problème :

Score :
900
points
Problem Statement
There is a tree with
N
vertices numbered
1
through
N
.
The
i
-th of the
N-1
edges connects vertices
a_i
and
b_i
.
Initially, each vertex is uncolored.
Takahashi and Aoki is playing a game by painting the vertices. In this game, they alternately perform the following operation, starting from Takahashi:
Select a vertex that is not painted yet.
If it is Takahashi who is performing this operation, paint the vertex white; paint it black if it is Aoki.
Then, after all the vertices are colored, the following procedure takes place:
Repaint every white vertex that is adjacent to a black vertex, in black.
Note that all such white vertices are repainted simultaneously, not one at a time.
If there are still one or more white vertices remaining, Takahashi wins; if all the vertices are now black, Aoki wins.
Determine the winner of the game, assuming that both persons play optimally.
Constraints
2 ≤ N ≤ 10^5
1 ≤ a_i,b_i ≤ N
a_i ≠ b_i
The input graph is a tree.
Input
Input is given from Standard Input in the following format:
N
a_1
b_1
:
a_{N-1}
b_{N-1}
Output
Print
First
if Takahashi wins; print
Second
if Aoki wins.
Sample Input 1
3
1 2
2 3
Sample Output 1
First
Below is a possible progress of the game:
First, Takahashi paint vertex
2
white.
Then, Aoki paint vertex
1
black.
Lastly, Takahashi paint vertex
3
white.
In this case, the colors of vertices
1
,
2
and
3
after the final procedure are black, black and white, resulting in Takahashi's victory.
Sample Input 2
4
1 2
2 3
2 4
Sample Output 2
First
Sample Input 3
6
1 2
2 3
3 4
2 5
5 6
Sample Output 3
Second


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools

sys.setrecursionlimit(10**7)
inf = 10**20
mod = 10**9 + 7

def LI(): return [int(x) for x in sys.stdin.readline().split()]
def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]
def LF(): return [float(x) for x in sys.stdin.readline().split()]
def LS(): return sys.stdin.readline().split()
def I(): return int(sys.stdin.readline())
def F(): return float(sys.stdin.readline())
def S(): return input()

def main():
    n = I()
    d = collections.defaultdict(set)
    kk = None
    for _ in range(n-1):
        a,b = LI()
        kk = [a,b]
        d[a].add(b)
        d[b].add(a)

    tt = True
    gf = collections.defaultdict(bool)
    while tt:
        tt = False
        for k,v in list(d.items()):
            if len(v) == 1:
                vt = list(v)[0]
                if len(d[vt]) == 1:
                    continue
                for vv in d[vt]:
                    if vv == k:
                        continue
                    if vt in d[vv]:
                        d[vv].remove(vt)
                d[vt] = set([k])
                tt = True
            elif len(v) == 0:
                return 'First'
    return 'Second'

print(main())
```