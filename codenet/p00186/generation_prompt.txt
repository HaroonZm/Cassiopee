Voici un énoncé de problème :

会津地鶏
2008 年 4 月に、会津若松市は長さ20 m 85 cm のやきとり作りに挑戦して成功しました。このとき使われた鶏肉が、会津特産の会津地鶏です。会津地鶏はとてもおいしいのですが、飼育がむずかしいので生産量が少なく、値段が高いのが難点です。
今日は一郎君の家に、遠くから親戚が遊びに来ます。お母さんは鶏肉の水炊きを作って親戚をもてなすことにしました。近くのお肉屋さんでは会津地鶏とふつうの鶏肉の 2 種類の鶏肉を売っています。お母さんは、以下のような指示を一郎君に与えて、お肉屋さんに行って鶏肉を買ってくるように
頼みました。
鶏肉が足りなくなると困るので、決められた量以上の鶏肉を買う。
予算の許す範囲で会津地鶏をできるだけ多く買う(会津地鶏は必ず買うこと)。
会津地鶏を買った残りでふつうの鶏肉をできるだけ多く買う(予算が足りなければ買わない)。
一郎君がお肉屋さんに行くと、会津地鶏が品薄のため一人が買える量を制限していました。一郎君が、お母さんから与えられたすべての指示を守って買い物をするとき、一郎君が買う会津地鶏と普通の鶏肉の量はそれぞれ何グラムになるでしょう?
買うべき鶏肉の量の下限
q
1
、予算
b
、このお肉屋さんでの会津地鶏 100 グラムの値段
c
1
、ふつうの鶏肉 100 グラムの値段
c
2
、会津地鶏を一人が買える量の上限
q
2
を入力とし、一郎君が買う会津地鶏とふつうの鶏肉の量を 100 グラム単位で出力するプログラムを作成してください。ただし、このお肉屋さんではお母さんの指示通りに買えない場合には、「NA」と出力してください。
Input
複数のデータセットの並びが入力として与えられます。入力の終わりはゼロひとつの行で示されます。 各データセットは以下の形式で与えられます。
q
1
b
c
1
c
2
q
2
鶏肉の量を表すデータ
q
1
と
q
2
は100 グラム単位で指定されます。また、
b
、
c
1
、
c
2
、
q
1
、
q
2
は 1 以上 1,000,000 以下の整数とします。
データセットの数は 50 を超えません。
Output
データセット毎に、一郎君が購入する会津地鶏の量とふつうの鶏肉の量(半角空白区切り) または「NA」を１行に出力します。
Sample Input
48 9297 240 126 32
20 3010 157 141 7
30 117002 5680 962 15
8 1673 1712 190 22
64 8478 87 54 307
23 5477 117 92 12
50 7558 1396 187 17
279 88677 4522 514 14
0
Output for the Sample Input
28 20
7 13
15 33
NA
97 0
12 44
NA
NA


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def binary_search(quantity, budget, aizu_chicken_price, chicken_price, aizu_chicken_limit):
    if budget < (quantity - 1) * chicken_price + aizu_chicken_price:
        return None

    if aizu_chicken_price * quantity <= budget:
        aizu_chicken_count = budget // aizu_chicken_price

        if aizu_chicken_limit < aizu_chicken_count:
            aizu_chicken_count = aizu_chicken_limit

        rest = budget - aizu_chicken_price * aizu_chicken_count
        chicken_count = rest // chicken_price
        return aizu_chicken_count, chicken_count

    if aizu_chicken_price * aizu_chicken_limit + chicken_price * (quantity - aizu_chicken_limit) < budget:
        rest = budget - aizu_chicken_price * aizu_chicken_limit
        chicken_count = rest // chicken_price
        return aizu_chicken_limit, chicken_count

    # 二分探索
    aizu_chicken_count = aizu_chicken_limit // 2
    chicken_count = quantity - aizu_chicken_count
    update_count = aizu_chicken_count // 2 + 1

    max_pair = (0, quantity)

    while 0 < update_count:

        if aizu_chicken_count * aizu_chicken_price + chicken_count * chicken_price <= budget:
            max_pair = (aizu_chicken_count, chicken_count)
            aizu_chicken_count += update_count + 1
            chicken_count -= (update_count + 1)

        else:
            aizu_chicken_count -= (update_count + 1)
            chicken_count += update_count + 1

        update_count //= 2

    return max_pair

while True:

    input_data = input()

    if input_data == "0":
        break

    quantity, budget, aizu_chicken_price, chicken_price, aizu_chicken_limit = [int(item) for item in
                                                                               input_data.split(" ")]

    result = binary_search(quantity, budget, aizu_chicken_price, chicken_price, aizu_chicken_limit)

    if result is not None:
        print(result[0], result[1])
    else:
        print("NA")
```