Voici un énoncé de problème :

Score :
300
points
Problem Statement
A sequence
a_1,a_2,... ,a_n
is said to be /\/\/\/ when the following conditions are satisfied:
For each
i = 1,2,..., n-2
,
a_i = a_{i+2}
.
Exactly two different numbers appear in the sequence.
You are given a sequence
v_1,v_2,...,v_n
whose length is even.
We would like to make this sequence /\/\/\/ by replacing some of its elements.
Find the minimum number of elements that needs to be replaced.
Constraints
2 \leq n \leq 10^5
n
is even.
1 \leq v_i \leq 10^5
v_i
is an integer.
Input
Input is given from Standard Input in the following format:
n
v_1
v_2
...
v_n
Output
Print the minimum number of elements that needs to be replaced.
Sample Input 1
4
3 1 3 2
Sample Output 1
1
The sequence
3,1,3,2
is not /\/\/\/, but we can make it /\/\/\/ by replacing one of its elements: for example, replace the fourth element to make it
3,1,3,1
.
Sample Input 2
6
105 119 105 119 105 119
Sample Output 2
0
The sequence
105,119,105,119,105,119
is /\/\/\/.
Sample Input 3
4
1 1 1 1
Sample Output 3
2
The elements of the sequence
1,1,1,1
are all the same, so it is not /\/\/\/.


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
N = int(input())
V = list(map(int, input().split()))
#N = len(V)

v1, v2 = {}, {}

for v in V[::2]:
	if not v in v1:
		v1[v] = 1
	else:
		v1[v] += 1

for v in V[1::2]:
	if not v in v2:
		v2[v] = 1
	else:
		v2[v] += 1

a1 = sorted(v1, key=lambda x:-v1[x])
a2 = sorted(v2, key=lambda x:-v2[x])

#print(v1, v2)
#print(a1, a2)

r = []
for k1 in a1[:2]:
	for k2 in a2[:2]:
		if k1 != k2:
			r += [N - v1[k1] - v2[k2]]

if not r:
	r += [N // 2]

#print(r)
print(min(r))
```