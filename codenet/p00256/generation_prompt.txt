Voici un énoncé de problème :

マヤの大予言
真也君はテレビで「マヤの大予言！2012年で世界が終る？」という番組を見ました。結局、世界が終るかどうかはよくわかりませんでしたが、番組で紹介されていたマヤの「長期暦」という暦に興味を持ちました。その番組では以下のような説明をしていました。
マヤ長期暦は、右の表のような単位からなる、全部で13バクトゥン(187万2000日)で構成される非常に長い暦である。ある計算法では、この暦は紀元前3114年8月11日に始まり2012年12月21日に終わると考えられていて、このため今年の12月21日で世界が終るという説が唱えられている。しかし、13バクトゥンで１サイクルとなり、今の暦が終わったら新しいサイクルに入るだけという考えもある。
１キン＝１日
１ウィナル＝２０キン
１トゥン＝１８ウィナル
１カトゥン＝２０トゥン
１バクトゥン＝２０カトゥン
「ぼくの二十歳の誕生日はマヤ暦だと何日になるのかな？」真也君はいろいろな日をマヤ長期暦で表してみたくなりました。
では、真也君の代わりに、西暦とマヤ長期暦とを相互変換するプログラムを作成してください。
入力
入力は複数のデータセットからなる。入力の終わりは#１つの行で示される。各データセットは以下の形式で与えられる。
b.ka.t.w.ki
または
y.m.d
データセットは１つの文字列を含む１行からなる。b.ka.t.w.ki はマヤ長期暦の日付、y.m.d は西暦の日付である。与えられる単位は以下の通りである。
マヤ長期暦
b
バクトゥン
(0 ≤ b< 13)
ka
カトゥン
(0 ≤ ka < 20)
t
トゥン
(0 ≤ t< 20)
w
ウィナル
(0 ≤ w < 18)
ki
キン
(0 ≤ ki < 20)
西暦
y
年
(2012 ≤ y ≤ 10,000,000)
m
月
(1 ≤ m ≤ 12)
d
日
(1 ≤ d ≤ 31)
西暦の日の最大値は、大の月、小の月、うるう年かどうかで変わる(うるう年は 4 の倍数の年のうち、100 で割り切れない年か、400 で割り切れる年である)。マヤ長期暦の日付の範囲は 0.0.0.0.0 から 12.19.19.17.19 までとする。ただし、マヤ長期暦の 0.0.0.0.0 は西暦の 2012.12.21 に対応する。また、西暦の日付の範囲は 2012.12.21から 10000000.12.31 までとする。
データセットの数は 500 を超えない。
出力
入力が西暦のときはマヤ長期暦を、マヤ長期暦のときは西暦を、それぞれ入力と同じ形式で出力する。
入力された西暦を換算した結果、マヤ長期暦の次のサイクルに入った場合でも b.ka.t.w.ki の形式で出力してよい。
入力例
2012.12.31
2.12.16.14.14
7138.5.13
10.5.2.1.5
10000000.12.31
#
出力例
0.0.0.0.10
3054.8.15
0.0.0.0.10
6056.2.29
8.19.3.13.2


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def Fliegel(y, m, d):
    if m <= 2:
        m += 12
        y -= 1
    return int(365.25*y) + int(30.59*(m-2)) + (y//400) - (y//100) + d - 678912

def InvFliegel(mjd):
    mjd += 678881
    a = 4*mjd + 3 + 4*(3*(1 + 4*(mjd+1)//146097)//4)
    b = 2 + 5*((a%1461)//4)
    y = a//1461
    m = 3 + b//153
    d = 1 + (b%153)//5
    if m > 12:
        m -= 12
        y += 1
    return y, m, d

mjd_base = Fliegel(2012, 12, 21)
maya_unit = [13, 20, 20, 18, 20]
maya_cycle = 13*20*20*18*20

while 1:
    s = input()
    if s == '#':
        break
    v = list(map(int, s.split(".")))
    if len(v) == 3:
        mjd = (Fliegel(v[0], v[1], v[2]) - mjd_base)%maya_cycle
        m = []
        for u in reversed(maya_unit) :
            m.append( mjd%u )
            mjd /= u
        print("%d.%d.%d.%d.%d" % (m[4], m[3], m[2], m[1], m[0]))
    else:
        mjd = v[0]
        for i in range(1,5):
            mjd *= maya_unit[i]
            mjd += v[i]
        y, m, d = InvFliegel(mjd + mjd_base)
        print("%d.%d.%d" % (y, m, d))
```