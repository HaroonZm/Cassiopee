En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def gcd(x, y):
    while y > 0:
        x, y = y, x%y
    return x

while True:
    N = int(input())
    if not N:
        break
    a = [list(map(int, input().split())) for _ in [0]*N]
    root = (set(range(1, N+1)) - set(n for bar in a for n in bar[2:])).pop()

    def solve(ratio_r, ratio_l, left, right):
        d = gcd(ratio_r, ratio_l)
        ratio_r //= d
        ratio_l //= d

        w_left = solve(*a[left-1]) if left else 0
        w_right = solve(*a[right-1]) if right else 0

        if w_left == w_right == 0:
            w_left, w_right = ratio_l, ratio_r
        elif w_left == 0:
            w_right = (w_right * ratio_r) // gcd(w_right, ratio_r)
            w_left = ratio_l * (w_right // ratio_r)
        elif w_right == 0:
            w_left = (w_left * ratio_l) // gcd(w_left, ratio_l)
            w_right = ratio_r * (w_left // ratio_l)
        else:
            _r, _l = w_left*ratio_r, w_right*ratio_l
            d = gcd(_l, _r)
            w_right, w_left = w_right*(_r // d), w_left*(_l // d)

        return w_right + w_left

    print(solve(*a[root-1]))
```