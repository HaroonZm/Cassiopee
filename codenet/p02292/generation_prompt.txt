Voici un énoncé de problème :

Counter-Clockwise
For given three points
p0, p1, p2
, print
COUNTER_CLOCKWISE
if
p0, p1, p2
make a counterclockwise turn (1),
CLOCKWISE
if
p0, p1, p2
make a clockwise turn (2),
ONLINE_BACK
if
p2
is on a line
p2, p0, p1
in this order (3),
ONLINE_FRONT
if
p2
is on a line
p0, p1, p2
in this order (4),
ON_SEGMENT
if
p2
is on a segment
p0p1
(5).
Input
x
p0
y
p0
x
p1
y
p1
q
x
p2
0
y
p2
0
x
p2
1
y
p2
1
...
x
p2
q-1
y
p2
q-1
In the first line, integer coordinates of
p0
and
p1
are given. Then,
q
queries are given for integer coordinates of
p2
.
Output
For each query, print the above mentioned status.
Constraints
1 ≤ q ≤ 1000
-10000 ≤ x
i
, y
i
≤ 10000
p0
and
p1
are not identical.
Sample Input 1
0 0 2 0
2
-1 1
-1 -1
Sample Output 1
COUNTER_CLOCKWISE
CLOCKWISE
Sample Input 2
0 0 2 0
3
-1 0
0 0
3 0
Sample Output 2
ONLINE_BACK
ON_SEGMENT
ONLINE_FRONT


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
x0,y0,x1,y1 = map(int, input().split( ))
p0 = [x0,y0]
p1= [x1,y1]
v1 =[p1[0]-p0[0],p1[1]-p0[1]]
q = int(input())
def cross(a,b):
    crs = a[0]*b[1] - a[1]*b[0]
    return crs
def dot(a,b):
    dt = a[0]*b[0] + a[1]*b[1]
    return dt
eps = 0.000001
for i in range(q):
    p2 = list(map(int, input().split( )))
    v2=[p2[0]-p0[0],p2[1]-p0[1]]
    if cross(v1,v2) >eps:
        print("COUNTER_CLOCKWISE")
    elif cross(v1,v2) <-eps:
        print("CLOCKWISE")
    elif dot(v1,v2)<-eps:
        print("ONLINE_BACK")
    elif v1[0]**2+v1[1]**2 < v2[0]**2+v2[1]**2:#abs(v1[0])<abs(v2[0]):はx成分0でおかしい
        print("ONLINE_FRONT")
    else:#p1=p2はこっち
        print("ON_SEGMENT")
```