Voici un énoncé de problème :

金剛の型
以下のように、右から 7 ビット分が小数部、続く24 ビット分が整数部で、一番左の 1 ビット分を符号部とする 32 ビット実数型を考える(b
1
, ... , b
32
は 0 か1 を表す）。
この形式を、人が理解しやすい 10 進数表現に直すときは、以下のように解釈する。
(-1)
符号部
× (整数部 + 小数部)
上の表現で、整数部の値は b
8
＋ 2
1
×b
9
＋ 2
2
×b
10
＋ ... ＋ 2
23
×b
31
になる。例えば整数部が
のようになっていた場合、整数部の値は以下のように計算される。
1 + 2
1
+ 2
3
= 1 + 2 + 8 = 11
一方、小数部の値は(0.5)
1
×b
7
＋(0.5)
2
×b
6
＋ ... ＋ (0.5)
7
× b
1
になる。例えば小数部が
のようになっていた場合、小数部は以下のように計算される。
0.5
1
+ 0.5
3
= 0.5 + 0.125 = 0.625
さらに、符号部、整数部、小数部を合わせた以下のようなビット列の場合、
ビット列全体が表す10 進数は、以下のようになる(ただし、-1 の0 乗は1)。
(-1)
0
× (1 + 2 + 8 + 0.5 + 0.125) = 1 × (11.625) = 11.625
32 ビットのビット列を Q 個入力すると、それらのビット列が表す実数の10 進表記を一切の誤差無く出
力するプログラムを作成してください。
入力
入力は１つのデータセットからなる。入力データは以下の形式で与えられる。
Q
s
1
s
2
.
.
.
s
Q
1 行目にビット列の数 Q (1 ≤ Q ≤ 10000)が与えられる。続くQ 行に入力ビット列 s
i
が与えられる。 入力ビット列は 16 進数表記で与えられるとする (例: 0111 1111 1000 1000 0000 0000 0000 0000 は 7f880000 と与えられる) 。つまり、Q 行のそれぞれには、2 進数を 4 ビット分ずつまとめた 16 進数が 8 個、空白をはさまずに並んでいる。10 進数、2 進数、16 進数の対応は以下の表のとおりである。
16 進数の英字 a から f までは小文字で与えられる。
出力
各ビット列が表す実数の 10 進表記を 1 行ずつ出力する。ただし、小数部において、ある桁以下がすべて 0 の場合、その桁以下は省略するものとするが、例外として小数部が 0 の場合は小数部には 0 ひとつを出力する。
入力例
8
00000000
80000000
00000080
00000040
000000c0
00000100
80000780
80000f70
出力例
0.0
-0.0
1.0
0.5
1.5
2.0
-15.0
-30.875


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
for i in range(input()):    
	b=int(raw_input(),16)
	s=1<<31
	p=""
	if b&s!=0:
		b^=s
		p="-"
	a=int(b*1.0/(1<<7))
	print p+str(a)+str(abs(b*1.0/(1<<7)-a))[1:]
```