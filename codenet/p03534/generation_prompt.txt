Voici un énoncé de problème :

Score :
400
points
Problem Statement
Snuke has a string
S
consisting of three kinds of letters:
a
,
b
and
c
.
He has a phobia for palindromes, and wants to permute the characters in
S
so that
S
will not contain a palindrome of length
2
or more as a substring. Determine whether this is possible.
Constraints
1 \leq |S| \leq 10^5
S
consists of
a
,
b
and
c
.
Input
Input is given from Standard Input in the following format:
S
Output
If the objective is achievable, print
YES
; if it is unachievable, print
NO
.
Sample Input 1
abac
Sample Output 1
YES
As it stands now,
S
contains a palindrome
aba
, but we can permute the characters to get
acba
, for example, that does not contain a palindrome of length
2
or more.
Sample Input 2
aba
Sample Output 2
NO
Sample Input 3
babacccabab
Sample Output 3
YES


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import Counter

def solve():
    S = raw_input()
    C = Counter(S)
    if len(S) == 1:
        return True

    A = sorted(C.items(), key=lambda x: -x[1])

    if len(A) == 2:
        return len(S) == 2

    if len(A) == 1:
        return False

    top1 = A[0][1]
    others = sum(a[1] for a in A[1:])
    return others >= (top1-1)*2

print 'YES' if solve() else 'NO'
```