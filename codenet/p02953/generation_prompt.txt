Voici un énoncé de problème :

Score :
300
points
Problem Statement
There are
N
squares arranged in a row from left to right. The height of the
i
-th square from the left is
H_i
.
For each square, you will perform either of the following operations once:
Decrease the height of the square by
1
.
Do nothing.
Determine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.
Constraints
All values in input are integers.
1 \leq N \leq 10^5
1 \leq H_i \leq 10^9
Input
Input is given from Standard Input in the following format:
N
H_1
H_2
...
H_N
Output
If it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print
Yes
; otherwise, print
No
.
Sample Input 1
5
1 2 1 1 3
Sample Output 1
Yes
You can achieve the objective by decreasing the height of only the second square from the left by
1
.
Sample Input 2
4
1 3 2 1
Sample Output 2
No
Sample Input 3
5
1 2 3 4 5
Sample Output 3
Yes
Sample Input 4
1
1000000000
Sample Output 4
Yes


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys

sys.setrecursionlimit(10 ** 7)
# import bisect
# import numpy as np
# from collections import deque
from collections import deque
# map(int, sys.stdin.read().split())
import itertools
import heapq

def input():
    return sys.stdin.readline().rstrip()

def main():
    N = int(input())
    H =list(map(int,input().split()))
    off = 0
    flag =1
    for i in range(N-1,0,-1):
        if H[i] - off >=H[i-1]:
            off =0
            continue
        elif H[i]-off +1 == H[i-1]:
            off =1
        else:
            print("No")
            exit()

    print("Yes")

if __name__ == "__main__":
    main()
```