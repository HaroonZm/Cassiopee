Voici un énoncé de problème :

Score :
500
points
Problem Statement
For an integer
n
not less than
0
, let us define
f(n)
as follows:
f(n) = 1
(if
n < 2
)
f(n) = n f(n-2)
(if
n \geq 2
)
Given is an integer
N
. Find the number of trailing zeros in the decimal notation of
f(N)
.
Constraints
0 \leq N \leq 10^{18}
Input
Input is given from Standard Input in the following format:
N
Output
Print the number of trailing zeros in the decimal notation of
f(N)
.
Sample Input 1
12
Sample Output 1
1
f(12) = 12 × 10 × 8 × 6 × 4 × 2 = 46080
, which has one trailing zero.
Sample Input 2
5
Sample Output 2
0
f(5) = 5 × 3 × 1 = 15
, which has no trailing zeros.
Sample Input 3
1000000000000000000
Sample Output 3
124999999999999995


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
#!/usr/bin/env python3

import sys
import math
from bisect import bisect_right as br
from bisect import bisect_left as bl
sys.setrecursionlimit(1000000)
from heapq import heappush, heappop,heappushpop
from collections import defaultdict
from itertools import accumulate
from collections import Counter
from collections import deque
from operator import itemgetter
from itertools import permutations
mod = 10**9 + 7
inf = float('inf')
def I(): return int(sys.stdin.readline())
def LI(): return list(map(int,sys.stdin.readline().split()))

n = I()

if n < 10:
    print(0)
    quit()

if n % 2:
    print(0)
    quit()

else:
    ans = n//10
    tmp = 10
    while n//tmp > 0:
        tmp *= 5
        ans += (n//tmp)
    print(ans)
```