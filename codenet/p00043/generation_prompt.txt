Voici un énoncé de problème :

パズル
1 〜 9 の数字を 14 個組み合わせて完成させるパズルがあります。与えられた 13 個の数字にもうひとつ数字を付け加えて完成させます。
パズルの完成条件は
同じ数字を２つ組み合わせたものが必ずひとつ必要です。
残りの12 個の数字は、３個の数字の組み合わせ４つです。
３個の数字の組み合わせ方は、同じ数字を３つ組み合わせたものか、または３つの連続する数字を組み合わせたものです。ただし、9 1 2 のような並びは連続する数字とは認められません。
同じ数字は4 回まで使えます。
13 個の数字からなる文字列を読み込んで、パズルを完成することができる数字を昇順に全て出力するプログラムを作成してください。なお、1〜9 のどの数字を付け加えてもパズルを完成させることができないときは 0 を出力してください。
例えば与えられた文字列が 3456666777999 の場合
「2」があれば、
234 567 666 77 999
「3」があれば、
33 456 666 777 999
「5」があれば、
345 567 666 77 999
「8」があれば、
345 666 678 77 999
というふうに、2 3 5 8 のいずれかの数字が付け加えられるとパズルは完成します。「6」でも整いますが、5 回目の使用になるので、この例では使えないことに注意してください。
Input
入力は複数のデータセットからなります。各データセットとして、13 個の数字が１行に与えられます。データセットの数は 50 を超えません。
Output
データセットごとに、パズルを完成させることができる数字を昇順に空白区切りで１行に出力します。
Sample Input
3649596966777
6358665788577
9118992346175
9643871425498
7755542764533
1133557799246
Output for the Sample Input
2 3 5 8
3 4
1 2 3 4 5 6 7 8 9
7 8 9
1 2 3 4 6 7 8
0


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def is_solved(nums):
  keys = set(nums)
  for key in keys:
    if nums.count(key) >= 2:
      tmp = nums[:]
      tmp.remove(key)
      tmp.remove(key)
      for key in keys:
        key_count = tmp.count(key)
        if key_count == 4:
          if key + 1 in tmp and key + 2 in tmp:
            for _ in range(4): tmp.remove(key)
            tmp.remove(key + 1)
            tmp.remove(key + 2)
        elif key_count == 3:
          for _ in range(3): tmp.remove(key)

        elif tmp.count(key + 1) >= key_count and tmp.count(key + 2) >= key_count:
          for _ in range(key_count):
            tmp.remove(key)
            tmp.remove(key + 1)
            tmp.remove(key + 2)
      if tmp == []:
        return True
  return False

while True:
  try:
    puzzle = list(map(int, list(input())))
    ans = []
    for i in range(1, 10):
      if puzzle.count(i) <= 3 and is_solved(puzzle + [i]):
        ans.append(i)
    if ans:
      print(*ans)
    else:
      print(0)
  except EOFError:
    break
```