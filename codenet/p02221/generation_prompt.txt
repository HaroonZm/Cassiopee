En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
#!usr/bin/env python3
from collections import defaultdict, deque
from heapq import heappush, heappop
from itertools import permutations, accumulate
import sys
import math
import bisect
def LI(): return [int(x) for x in sys.stdin.readline().split()]
def I(): return int(sys.stdin.readline())
def LS():return [list(x) for x in sys.stdin.readline().split()]
def S():
    res = list(sys.stdin.readline())
    if res[-1] == "\n":
        return res[:-1]
    return res
def IR(n):
    return [I() for i in range(n)]
def LIR(n):
    return [LI() for i in range(n)]
def SR(n):
    return [S() for i in range(n)]
def LSR(n):
    return [LS() for i in range(n)]

sys.setrecursionlimit(1000000)
mod = 1000000007

def solve():
    def f(a, b):
        return max(a, b) if s[abs(a-b)-1] == "1" else min(a,b)
    n = I()
    s = S()
    # print(s)
    p = LI()
    dp = [[0 if j else p[i] for j in range(n+1)] for i in range(1 << n)]
    maxn = 1 << n
    for j in range(n):
        j1 = 1 << j
        for i in range(1 << n):
            if i + j1 >= maxn:
                # print(i+j1-n,i,j)
                dp[i][j+1] = f(dp[i][j],dp[i+j1-maxn][j])
            else:
                dp[i][j+1] = f(dp[i][j],dp[i+j1][j])
    # print(dp[0][0],dp[1][0],f(dp[0][0],dp[1][0]))
    # print(dp)
    for i in range(1 << n):
        print(dp[i][-1])
        # pass
    return

#Solve
if __name__ == "__main__":
    solve()
```