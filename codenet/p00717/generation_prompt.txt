Voici un énoncé de problème :

Problem B:
Polygonal Line Search
Multiple polygonal lines are given on the
xy
-plane.
Given a list of polygonal lines and a template,
you must find out polygonal lines
which have the same shape as the template.
A polygonal line consists of several line segments parallel to
x
-axis or
y
-axis. It is defined by a list of
xy
-coordinates of vertices from the start-point to the end-point in order,
and always turns 90 degrees at each vertex.
A single polygonal line does not pass the same point twice.
Two polygonal lines have the same shape when they
fully overlap each other only with rotation and translation
within
xy
-plane (i.e. without magnification or a flip).
The vertices given in reverse order from the start-point to the end-point is the
same as that given in order.
Figure 1 shows examples of polygonal lines.
In this figure, polygonal lines A and B have the same shape.
Write a program that answers polygonal lines which have the same shape as
the template.
Figure 1: Polygonal lines
Input
The input consists of multiple datasets.
The end of the input is indicated by a line which contains a zero.
A dataset is given as follows.
n
Polygonal line
0
Polygonal line
1
Polygonal line
2
...
Polygonal line
n
n
is the number of polygonal lines for the object of search on
xy
-plane.
n
is an integer, and 1 <=
n
<= 50.
Polygonal line
0
indicates the template.
A polygonal line is given as follows.
m
x
1
y
1
x
2
y
2
...
x
m
y
m
m
is the number of the vertices of a polygonal line (3 <=
m
<= 10).
x
i
and
y
i
, separated by a space,
are the
x
- and
y
-coordinates
of a vertex, respectively (-10000 <
x
i
< 10000, -10000 <
y
i
< 10000).
Output
For each dataset in the input, your program should report numbers assigned to the polygonal lines that have the same shape as the template, in ascending order.
Each number must be written in a separate line without any other characters such as leading or trailing spaces.
Five continuous "+"s must be placed in a line at the end of each dataset.
Sample Input
5
5
0 0
2 0
2 1
4 1
4 0
5
0 0
0 2
-1 2
-1 4
0 4
5
0 0
0 1
-2 1
-2 2
0 2
5
0 0
0 -1
2 -1
2 0
4 0
5
0 0
2 0
2 -1
4 -1
4 0
5
0 0
2 0
2 1
4 1
4 0
4
4
-60 -75
-60 -78
-42 -78
-42 -6
4
10 3
10 7
-4 7
-4 40
4
-74 66
-74 63
-92 63
-92 135
4
-12 22
-12 25
-30 25
-30 -47
4
12 -22
12 -25
30 -25
30 47
3
5
-8 5
-8 2
0 2
0 4
8 4
5
-3 -1
0 -1
0 7
-2 7
-2 16
5
-1 6
-1 3
7 3
7 5
16 5
5
0 1
0 -2
8 -2
8 0
17 0
0
Output for the Sample Input
1
3
5
+++++
3
4
+++++
+++++


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
# python template for atcoder1
import sys
sys.setrecursionlimit(10**9)
input = sys.stdin.readline

def solve():
    N = int(input())
    if N == 0:
        exit()
    n = int(input())
    true_Poly = [list(map(int, input().split())) for _ in range(n)]

    serach_Polys = []
    for _ in range(N):
        n = int(input())
        serach_Polys.append([list(map(int, input().split()))
                             for _ in range(n)])

    ans = []
    for i, poly in enumerate(serach_Polys):
        if is_same(true_Poly, poly):
            ans.append(i+1)
    if ans:
        print("\n".join(map(str, ans)))
    print("+"*5)

def is_same(poly1, poly2):
    if len(poly1) != len(poly2):
        return False

    poly_1_turn = calc_turn(poly1)
    poly_1_len = calc_dist(poly1)

    poly_2_turn = calc_turn(poly2)
    poly_2_len = calc_dist(poly2)
    if all(a == b for a, b in zip(poly_2_turn, poly_1_turn)) and all(a == b for a, b in zip(poly_2_len, poly_1_len)):
        return True

    poly_2_rev_turn = calc_turn(list(reversed(poly2)))
    poly_2_rev_len = calc_dist(list(reversed(poly2)))
    if all(a == b for a, b in zip(poly_2_rev_turn, poly_1_turn)) and all(a == b for a, b in zip(poly_2_rev_len, poly_1_len)):
        return True
    return False

def dist(p1, p2):
    return sum([abs(x1-x2) for x1, x2 in zip(p1, p2)])

def calc_dist(poly):
    return [dist(p1, p2) for p1, p2 in zip(poly, poly[1:])]

def turn(p1, p2, p3):
    """
    右回りが1 左が-1
    """
    if p1[0] == p2[0]:
        if p1[1] < p2[1]:
            if p3[0] > p2[0]:
                return 1
            else:
                return 0
        else:
            if p3[0] > p2[0]:
                return 0
            else:
                return 1
    else:
        if p1[0] < p2[0]:
            if p3[1] > p2[1]:
                return 0
            else:
                return 1
        else:
            if p3[1] > p2[1]:
                return 1
            else:
                return 0

def calc_turn(poly):
    return [turn(p1, p2, p3) for p1, p2, p3 in zip(poly, poly[1:], poly[2:])]

while True:
    solve()
```