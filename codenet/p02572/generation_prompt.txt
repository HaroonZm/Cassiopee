Voici un énoncé de problème :

Score :
300
points
Problem Statement
Given are
N
integers
A_1,\ldots,A_N
.
Find the sum of
A_i \times A_j
over all pairs
(i,j)
such that
1\leq i < j \leq N
, modulo
(10^9+7)
.
Constraints
2 \leq N \leq 2\times 10^5
0 \leq A_i \leq 10^9
All values in input are integers.
Input
Input is given from Standard Input in the following format:
N
A_1
\ldots
A_N
Output
Print
\sum_{i=1}^{N-1}\sum_{j=i+1}^{N} A_i A_j
, modulo
(10^9+7)
.
Sample Input 1
3
1 2 3
Sample Output 1
11
We have
1 \times 2 + 1 \times 3 + 2 \times 3 = 11
.
Sample Input 2
4
141421356 17320508 22360679 244949
Sample Output 2
437235829


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import itertools   # accumulate, compress, permutations(nPr), combinations(nCr)
# import bisect      # bisect_left(insert位置), bisect_right(slice用)
# import math        # factorical（階乗) # hypot(距離)
# import heapq
# from fractions import gcd # >=Python3.5 # lcm（最小公倍数） = (a*b)//gcd(a,b)
# from fractions import Fraction
# from math import gcd # <Python3.5
# --------------------------------------------------------------

n = int(input())
a = list(map(int,input().split()))
MOD = 10**9+7

lis = list(itertools.accumulate(a))

total = 0

for i in range(n-1):
    total += (a[i] * (lis[n-1]-lis[i])) % MOD

print(total % MOD)
```