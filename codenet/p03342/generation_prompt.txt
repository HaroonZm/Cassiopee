Voici un énoncé de problème :

Score :
500
points
Problem Statement
There is an integer sequence
A
of length
N
.
Find the number of the pairs of integers
l
and
r
(
1 \leq l \leq r \leq N
) that satisfy the following condition:
A_l\ xor\ A_{l+1}\ xor\ ...\ xor\ A_r = A_l\ +\ A_{l+1}\ +\ ...\ +\ A_r
Here,
xor
denotes the bitwise exclusive OR.
Definition of XOR
The XOR of integers
c_1, c_2, ..., c_m
is defined as follows:
Let the XOR be
X
. In the binary representation of
X
, the digit in the
2^k
's place (
0 \leq k
;
k
is an integer) is
1
if there are an odd number of integers among
c_1, c_2, ...c_m
whose binary representation has
1
in the
2^k
's place, and
0
if that number is even.
For example, let us compute the XOR of
3
and
5
. The binary representation of
3
is
011
, and the binary representation of
5
is
101
, thus the XOR has the binary representation
110
, that is, the XOR is
6
.


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
# Your code here!
n=int(input())
A=list(map(int,input().split()))
ans=0
l=0;r=0
nowsum =0#ここでf(0,0)を計算
nowxsum=0
for l in range(0,n):
    while(r < n and (nowsum + A[r] == nowxsum ^ A[r])):#f(l,r+1)が条件をみたすかチェック
        nowsum  += A[r] #ここでf(l,r+1)にうつる
        nowxsum ^= A[r]
        r +=1
    #f(l,r) < Sとなる最大のrがとれた！
    ans += r-l #ここで問題に必要な値を計算
    nowsum -= A[l] #ここでf(l+1,r)を計算
    nowxsum ^= A[l] #ここでf(l+1,r)を計算
print(ans)
```