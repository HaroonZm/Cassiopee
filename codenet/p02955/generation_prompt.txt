Voici un énoncé de problème :

Score :
500
points
Problem Statement
We have a sequence of
N
integers:
A_1, A_2, \cdots, A_N
.
You can perform the following operation between
0
and
K
times (inclusive):
Choose two integers
i
and
j
such that
i \neq j
, each between
1
and
N
(inclusive). Add
1
to
A_i
and
-1
to
A_j
, possibly producing a negative element.
Compute the maximum possible positive integer that divides every element of
A
after the operations. Here a positive integer
x
divides an integer
y
if and only if there exists an integer
z
such that
y = xz
.
Constraints
2 \leq N \leq 500
1 \leq A_i \leq 10^6
0 \leq K \leq 10^9
All values in input are integers.
Input
Input is given from Standard Input in the following format:
N
K
A_1
A_2
\cdots
A_{N-1}
A_{N}
Output
Print the maximum possible positive integer that divides every element of
A
after the operations.
Sample Input 1
2 3
8 20
Sample Output 1
7
7
will divide every element of
A
if, for example, we perform the following operation:
Choose
i = 2, j = 1
.
A
becomes
(7, 21)
.
We cannot reach the situation where
8
or greater integer divides every element of
A
.
Sample Input 2
2 10
3 5
Sample Output 2
8
Consider performing the following five operations:
Choose
i = 2, j = 1
.
A
becomes
(2, 6)
.
Choose
i = 2, j = 1
.
A
becomes
(1, 7)
.
Choose
i = 2, j = 1
.
A
becomes
(0, 8)
.
Choose
i = 2, j = 1
.
A
becomes
(-1, 9)
.
Choose
i = 1, j = 2
.
A
becomes
(0, 8)
.
Then,
0 = 8 \times 0
and
8 = 8 \times 1
, so
8
divides every element of
A
. We cannot reach the situation where
9
or greater integer divides every element of
A
.
Sample Input 3
4 5
10 1 2 22
Sample Output 3
7
Sample Input 4
8 7
1 7 5 6 8 2 6 5
Sample Output 4
5


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def yakusu(n):
    lower_divisors , upper_divisors = [], []
    i = 1
    while i*i <= n:
        if n % i == 0:
            lower_divisors.append(i)
            if i != n // i:
                upper_divisors.append(n//i)
        i += 1
    return lower_divisors + upper_divisors[::-1]
N,K=map(int,input().split())
L=list(map(int,input().split()))
a=sum(L)
R=yakusu(a)[::-1]
for i in range(len(R)):
  add=0
  minus=0
  s=R[i]
  A=list()
  B=list()
  for j in range(N):
    k=L[j]
    a=k%s
    b=s-a
    if a>b:
      add+=b
      B.append(b)
    elif a<b:
      minus+=a
      A.append(a)
    else:
      add+=a
      B.append(a)
  #足した分=add else:minus どっちでも:even
  A=sorted(A)
  B=sorted(B)
  if minus==add:
    d=minus
    if d<=K:
      print(s)
      exit()
  elif minus>add:
    q=(minus-add)//s
    d=sum(A[:len(A)-q])
    if d<=K:
      print(s)
      exit()
  else:
    q=(add-minus)//s
    d=sum(B[:len(B)-q])
    if d<=K:
      print(s)
      exit()
```