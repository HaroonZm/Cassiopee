Voici un énoncé de problème :

Problem B:
Monday-Saturday Prime Factors
Chief Judge's log, stardate 48642.5.
We have decided to make a problem from elementary number theory.
The problem looks like finding all prime factors of a positive integer,
but it is not.
A positive integer whose remainder divided by 7 is either 1 or 6 is called
a 7
N
+{1,6} number.
But as it is hard to pronounce,
we shall call it a
Monday-Saturday number
.
For Monday-Saturday numbers
a
and
b
,
we say
a
is a Monday-Saturday divisor of
b
if there exists a Monday-Saturday number
x
such that
a
x
=
b
.
It is easy to show that
for any Monday-Saturday numbers
a
and
b
,
it holds that
a
is
a Monday-Saturday divisor of
b
if and only if
a
is a divisor of
b
in the usual sense.
We call a Monday-Saturday number a
Monday-Saturday prime
if it is greater than 1 and has no Monday-Saturday divisors
other than itself and 1.
A Monday-Saturday number which is a prime in the usual sense
is a Monday-Saturday prime
but the converse does not always hold.
For example, 27 is a Monday-Saturday prime
although it is not a prime in the usual sense.
We call a Monday-Saturday prime
which is a Monday-Saturday divisor of a Monday-Saturday number
a
a
Monday-Saturday prime factor
of
a
.
For example, 27 is one of the Monday-Saturday prime factors of 216,
since 27 is a Monday-Saturday prime
and 216 = 27 × 8 holds.
Any Monday-Saturday number greater than 1
can be expressed as a product of one or more Monday-Saturday primes.
The expression is not always unique
even if differences in order are ignored.
For example,
216 = 6 × 6 × 6 = 8 × 27
holds.
Our contestants should write a program that outputs
all Monday-Saturday prime factors
of each input Monday-Saturday number.
Input
The input is a sequence of lines each of which contains a single
Monday-Saturday number.
Each Monday-Saturday number is greater than 1
and less than 300000 (three hundred thousand).
The end of the input is indicated by a line
containing a single digit 1.
Output
For each input Monday-Saturday number,
it should be printed, followed by a colon `:'
and the list of its Monday-Saturday prime factors on a single line.
Monday-Saturday prime factors should be listed in ascending order
and each should be preceded by a space.
All the Monday-Saturday prime factors should be printed only once
even if they divide the input Monday-Saturday number more than once.
Sample Input
205920
262144
262200
279936
299998
1
Output for the Sample Input
205920: 6 8 13 15 20 22 55 99
262144: 8
262200: 6 8 15 20 50 57 69 76 92 190 230 475 575 874 2185
279936: 6 8 27
299998: 299998


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
S = [0 for i in range(300000)]
S2 = []
A = [-1, 1]
for i in range(1, int(300000 / 7) + 1):
    d = 7 * i
    for a in A:
        da = d + a
        if da < 300000 and S[da] == 0:
            S2.append(da)
            for j in range(2, int(300000 / 2)):
                if da * j >= 300000:break
                S[da * j] = -1
while 1:
    n = int(input())
    if n == 1:break
    #res = [str(n) + ':']
    #res += [x for x in S2 if int(x) <= n and n % int(x) == 0]
    print(str(n) + ':',' '.join([str(x) for x in S2 if n % x == 0 and x <= n]))
```