Voici un énoncé de problème :

Knapsack Problem
You have
N
kinds of items that you want to put them into a knapsack. Item
i
has value
v
i
and weight
w
i
.
You want to find a subset of items to put such that:
The total value of the items is as large as possible.
The items have combined weight at most
W
, that is capacity of the knapsack.
You can select as many items as possible into a knapsack for each kind.
Find the maximum total value of items in the knapsack.
Input
N
W
v
1
w
1
v
2
w
2
:
v
N
w
N
The first line consists of the integers
N
and
W
. In the following lines, the value and weight of the
i
-th item are given.
Output
Print the maximum total values of the items in a line.
Constraints
1 ≤
N
≤ 100
1 ≤
v
i
≤ 1000
1 ≤
w
i
≤ 1000
1 ≤
W
≤ 10000
Sample Input 1
4 8
4 2
5 2
2 1
8 3
Sample Output 1
21
Sample Input 2
2 20
5 9
4 10
Sample Output 2
10
Sample Input 3
3 9
2 1
3 1
5 2
Sample Output 3
27


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys

if __name__ == "__main__":
    N, W = map(lambda x: int(x), input().split())
    items = [(0, 0)] * N
    for i in range(N):
        v, w = map(lambda x: int(x), input().split())
        items[i] = (v, w)
    table = [-sys.maxsize] * (W + 1)
    table[0] = 0

    for weight in range(W):
        for idx in range(N):
            if (-sys.maxsize == table[weight]):
                continue
            if (weight + items[idx][1] <= W):
                table[weight + items[idx][1]] = max(
                    table[weight + items[idx][1]], table[weight] + items[idx][0])

    print(max(table))
```