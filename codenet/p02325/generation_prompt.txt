Voici un énoncé de problème :

Bitonic Traveling Salesman Problem (Bitonic TSP)
For given $N$ points in the 2D Euclidean plane, find the distance of the shortest tour that meets the following criteria:
Visit the points according to the following steps:
It starts from the leftmost point (starting point), goes strictly from left to right, and then visits the rightmost point (turn-around point).
Then it starts from the turn-around point, goes strictly from right to left, and then back to the starting point.
Through the processes 1. 2., the tour must visit each point at least once.
Input
The input data is given in the following format:
$N$
$x_1$ $y_1$
$x_2$ $y_2$
...
$x_N$ $y_N$
Constraints
$2 \leq N \leq 1000$
$-1000 \leq x_i, y_i \leq 1000$
$x_i$ differ from each other
The given points are already sorted by x-coordinates
Output
Print the distance of the shortest tour in a line. The output should not have an error greater than 0.0001.
Sample Input 1
3
0 0
1 1
2 0
Sample Output 1
4.82842712
Sample Input 2
4
0 1
1 2
2 0
3 1
Sample Output 2
7.30056308
Sample Input 3
5
0 0
1 2
2 1
3 2
4 0
Sample Output 3
10.94427191


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math
from typing import List, Tuple

def dist(p1: Tuple[int, int], p2: Tuple[int, int]) -> float:
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

if __name__ == "__main__":
    N = int(input())
    points: List[Tuple[int, int]] = [(0, 0)] * N
    for idx in range(N):
        x, y = map(lambda x: int(x), input().split())
        points[idx] = (x, y)

    table1 = [float('inf')] * N
    table2 = [float('inf')] * N
    table1[0] = table2[0] = dist(points[0], points[1])

    for i in range(2, N):
        d1 = d2 = float('inf')
        for j in range(i - 1):
            d = dist(points[i], points[j])
            d1 = min(d1, table2[j] + d)
            d2 = min(d2, table1[j] + d)
        table1[i - 1] = d1
        table2[i - 1] = d2
        d = dist(points[i - 1], points[i])
        for j in range(i - 1):
            table1[j] += d
            table2[j] += d

    ans = min(min(d1, d2) + dist(points[i], points[N - 1])
              for i, (d1, d2) in enumerate(zip(table1, table2)))
    print(ans)
```