Voici un énoncé de problème :

Is-Convex
For a given polygon
g
, print "1" if
g
is a convex polygon, "0" otherwise. Here, in a convex polygon, all interior angles are less than or equal to 180 degrees.
g
is represented by a sequence of points
p
1
,
p
2
,...,
p
n
where line segments connecting
p
i
and
p
i+1
(1 ≤
i
≤
n-1
) are sides of the polygon. The line segment connecting
p
n
and
p
1
is also a side of the polygon.
Input
g
is given by coordinates of the points
p
1
,...,
p
n
in the following format:
n
x
1
y
1
x
2
y
2
:
x
n
y
n
The first integer
n
is the number of points. The coordinate of a point
p
i
is given by two integers
x
i
and
y
i
. The coordinates of points are given in the order of counter-clockwise visit of them.
Output
Print "1" or "0" in a line.
Constraints
3 ≤
n
≤ 100
-10000 ≤
x
i
,
y
i
≤ 10000
No point of the polygon will occur more than once.
Two sides of the polygon can intersect only at a common endpoint.
Sample Input 1
4
0 0
3 1
2 3
0 3
Sample Output 1
1
Sample Input 2
5
0 0
2 0
1 1
2 2
0 2
Sample Output 2
0


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import cmath
EPS = 1e-10

#外積
def OuterProduct(one, two):
	tmp = one.conjugate() * two
	return tmp.imag

#3点が反時計回りか
#一直線上のときの例外処理できていない→とりあえずT
def CCW(p, q, r):
	one, two = q-p, r-q
	if OuterProduct(one, two) > -EPS:
		return True
	else:
		return False

#凸包リストを返す
def ConvexHull(dots):
	dots.sort(key=lambda x: (x.real, x.imag))
	res1 = [dots[0]]
	for d in dots[1:]:
		if len(res1) == 1:
			res1.append(d)
		else:
			while len(res1) > 1 and not CCW(res1[-2], res1[-1], d):
				res1.pop()
			res1.append(d)
	dots.reverse()
	res2 = [dots[0]]
	for d in dots[1:]:
		if len(res2) == 1:
			res2.append(d)
		else:
			while len(res2) > 1 and not CCW(res2[-2], res2[-1], d):
				res2.pop()
			res2.append(d)
	return res1[:-1] + res2[:-1]

n = int(input())
dots = []
for _ in range(n):
	x, y = map(int, input().split())
	dots.append(complex(x, y))

if len(dots) == 3:
	print(1)
elif len(ConvexHull(dots)) == n:
	print(1)
else:
	print(0)
```