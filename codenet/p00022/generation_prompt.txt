Voici un énoncé de problème :

Maximum Sum Sequence
Given a sequence of numbers
a
1
,
a
2
,
a
3
, ...,
a
n
, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a
contiquous
subsequence.
Input
The input consists of multiple datasets. Each data set consists of:
n
a
1
a
2
.
.
a
n
You can assume that 1 ≤
n
≤ 5000 and -100000 ≤
a
i
≤ 100000.
The input end with a line consisting of a single 0.
Output
For each dataset, print the maximum sum in a line.
Sample Input
7
-5
-1
6
4
9
-6
-7
13
1
2
3
2
-2
-1
1
2
3
2
1
-2
1
3
1000
-200
201
0
Output for the Sample Input
19
14
1001


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
while(1):
	n = int(input())
	if n == 0:
		break
	elif n == 1:
		print(int(input()))
	else:
		a = [0 for i in range(n+1)]
		for i in range(n):
			b = int(input())
			a[i+1] = a[i] + b
		c = [0 for i in range(n)]
		for i in range(n):
			c[i] = max(a[i+1:]) - a[i]
		print(max(c))
```