En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
import itertools
from collections import deque
from operator import itemgetter

def find(x):
    if parent[x] == x:
        return x
    else:
        return find(parent[x])

def unite(x, y):
    x = find(x)
    y = find(y)

    if x != y:
        if rank[x] < rank[y]:
            parent[x] = y
            size[y] += size[x]
        else:
            parent[y] = x
            size[x] += size[y]
            if rank[x] == rank[y]:
                rank[x] += 1

def same(x, y):
    return find(x) == find(y)

input = sys.stdin.readline
N, M = map(int, input().split())

parent = [0]*N
for i in range(N):
    parent[i] = i
rank = [1]*N
size = [1]*N

edge = [tuple(map(int, input().split())) for i in range(M)]
edge = edge[::-1]
for i in range(M):
    edge[i] = (edge[i][0]-1, edge[i][1]-1)

res = deque()
for i in range(M):
    start = find(edge[i][0])
    end = find(edge[i][1])
    if start == end:
        res.append(0)
    else:
        res.append(size[start]*size[end])
        unite(start, end)

ans = 0
for i in range(M):
    ans += res[M-1-i]
    print(ans)
```