Voici un énoncé de problème :

ザ・スクエアーズ
この度、有名なテーマパークに、巨大迷路ザ・スクエアーズが新しく完成しました。 消防署の指導により避難訓練をしなければなりませんが、巨大迷路なだけに訓練にかかる時間を予測することができません。そこで、あなたは以下の仕様をもとに避難訓練シミュレータを開発することになりました。
巨大迷路は図 1 に示すように、横
W
、縦
H
の
W × H
個のマス目で表わされます。各マス目は、通路(白いマス目)、壁(茶色いマス目) 、非常口(緑のマス目)のいずれかです。図中の○は人を表し、その中の英小文字(E、W、S、N)はその人が向いている方角(東西南北)を表しています。図は上方向が北になるように描かれています。
図1
巨大迷路内にいる人は最初、東西南北のいずれかの方向を向いて立っています。各人は 1 秒単位で同時に次に示す手順で移動を試みます。
現在向いている方向の、右、前、左、後のマス目を順番に調べ、最初に見つけた、空いている通路または非常口の方向に向きを変えます。そのようなマス目が無い場合は向きを変えません。
目の前のマス目が空いていて、他の人の目の前のマス目になっていない場合は移動します。同じマス目を目の前のマスとする人が複数いる場合は、そのマス目の、東、北、西、南のマス目にいる人の順で選択された 1 人が移動します。
移動後に非常口に到着した人は、無事避難し迷路内から消えます。
与えられた巨大迷路と人の位置情報を入力とし、全ての人が避難し終える時間を出力するプログラムを作成してください。 脱出に 180 秒より長い時間を要する場合は NA と出力して下さい。 迷路と人の位置情報は、
H
行
W
列の文字によって与えられます。各文字の意味は以下のとおりです。
#
: 壁
.
: 床
X
: 非常口
E
: 東を向いている人
N
: 北を向いている人
W
: 西を向いている人
S
: 南を向いている人
なお、迷路と外部との境界は壁
#
または非常口
X
のいずれかです。また、巨大迷路の中には、人が必ず１人以上います。
Input
複数のデータセットの並びが入力として与えられます。 入力の終わりはゼロふたつの行で示されます。
各データセットは以下の形式で与えられます。
W
H
str
1
str
2
:
str
H
1 行目に迷路の横方向の大きさ
W
、縦方向の大きさ
H
(1 ≤
W, H
≤ 30) が与えられます。続く
H
行に迷路の
i
行目を表す文字列
str
i
(長さ
W
) が与えられます。
データセットの数は 50 を超えません。
Output
入力データセットごとに、全ての人が避難し終える時間を１行に出力します。
Sample Input
10 3
##########
#E.......X
##########
4 4
####
#N.#
#..X
####
5 5
#####
#N..#
###.X
#S..#
#####
6 6
######
#..#X#
#.EE.#
####N#
#....#
######
8 8
##X#####
#....E.#
#####.##
#.#...##
#.W.#..#
#.#.N#.X
#X##.#.#
########
0 0
Output for the Sample Input
8
NA
9
16
10


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
from collections import defaultdict
from typing import Dict

class Players(object):
    def __init__(self):
        self.players: Dict[int, "Player"] = {}
        self.reservation = defaultdict(list)
        self.square = None
        self.goal = []

    def set_goal(self, x, y):
        self.goal.append((x, y))

    def add(self, player: "Player"):
        self.players[len(self.players)] = player

    def search_all(self):
        for i, player in self.players.items():
            x, y, d = player.search(self.square)
            self.reservation[(x, y)].append(((d-2)%4, i))
        for k, v in self.reservation.items():
            if len(v) == 1:
                continue
            self.reservation[k] = [min(v)]

    def move_all(self):
        for (x, y), l in self.reservation.items():
            _id = l[0][1]
            _x, _y = self.players[_id].pos
            self.players[_id].move(x, y)
            self.square[_y][_x], self.square[y][x] = ".", "o"

        self.reservation.clear()
        for i, player in self.players.copy().items():
            x, y = player.pos
            if (x, y) in self.goal:
                del self.players[i]
                self.square[y][x] = "."

    @property
    def is_finished(self):
        return len(self.players) == 0

class Player(object):
    dir_dict = {"E": 0, "N": 1, "W": 2, "S": 3}
    dir_diff = ((1, 0), (0, -1), (-1, 0), (0, 1))

    def __init__(self, x, y, direction):
        self.x = x
        self.y = y
        self.dir = self.dir_dict[direction]

    def search(self, square):
        for i in range(self.dir-1, self.dir+3):
            dx, dy = self.dir_diff[i % 4]
            if square[self.y+dy][self.x+dx] in (".", "X"):
                self.dir = i % 4
                return self.x+dx, self.y+dy, self.dir
        else:
            return self.x, self.y, self.dir

    def move(self, x, y):
        self.x, self.y = x, y

    @property
    def pos(self):
        return self.x, self.y

while True:
    W, H = map(int, input().split())
    if W == 0:
        break
    square = []
    players = Players()
    for y in range(H):
        square.append(list(input()))
        for x, c in enumerate(square[-1]):
            if c in "ENWS":
                players.add(Player(x, y, c))
            elif c == "X":
                players.set_goal(x, y)
    players.square = square

    for i in range(1, 121):
        players.search_all()
        players.move_all()
        if players.is_finished:
            print(i)
            break
    else:
        print("NA")
```