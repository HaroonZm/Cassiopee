Voici un énoncé de problème :

Score :
600
points
Problem Statement
Snuke is introducing a
robot arm
with the following properties to his factory:
The robot arm consists of
m
sections
and
m+1
joints
. The sections are numbered
1
,
2
, ...,
m
, and the joints are numbered
0
,
1
, ...,
m
. Section
i
connects Joint
i-1
and Joint
i
. The length of Section
i
is
d_i
.
For each section, its
mode
can be specified individually. There are four modes:
L
,
R
,
D
and
U
. The mode of a section decides the direction of that section. If we consider the factory as a coordinate plane, the position of Joint
i
will be determined as follows (we denote its coordinates as
(x_i, y_i)
):
(x_0, y_0) = (0, 0)
.
If the mode of Section
i
is
L
,
(x_{i}, y_{i}) = (x_{i-1} - d_{i}, y_{i-1})
.
If the mode of Section
i
is
R
,
(x_{i}, y_{i}) = (x_{i-1} + d_{i}, y_{i-1})
.
If the mode of Section
i
is
D
,
(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} - d_{i})
.
If the mode of Section
i
is
U
,
(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} + d_{i})
.
Snuke would like to introduce a robot arm so that the position of Joint
m
can be matched with all of the
N
points
(X_1, Y_1), (X_2, Y_2), ..., (X_N, Y_N)
by properly specifying the modes of the sections.
Is this possible?
If so, find such a robot arm and how to bring Joint
m
to each point
(X_j, Y_j)
.
Constraints
All values in input are integers.
1 \leq N \leq 1000
-10^9 \leq X_i \leq 10^9
-10^9 \leq Y_i \leq 10^9
Partial Score
In the test cases worth
300
points,
-10 \leq X_i \leq 10
and
-10 \leq Y_i \leq 10
hold.
Input
Input is given from Standard Input in the following format:
N
X_1
Y_1
X_2
Y_2
:
X_N
Y_N
Output
If the condition can be satisfied, follow the following format. If the condition cannot be satisfied, print
-1
.
m
d_1
d_2
...
d_m
w_1
w_2
:
w_N
m
and
d_i
are the configurations of the robot arm. Refer to the problem statement for what each of them means.
Here,
1 \leq m \leq 40
and
1 \leq d_i \leq 10^{12}
must hold. Also,
m
and
d_i
must all be integers.
w_j
is a string of length
m
that represents the way to bring Joint
m
of the robot arm to point
(X_j, Y_j)
.
The
i
-th character of
w_j
should be one of the letters
L
,
R
,
D
and
U
, representing the mode of Section
i
.
Sample Input 1
3
-1 0
0 3
2 -1
Sample Output 1
2
1 2
RL
UU
DR
In the given way to bring Joint
m
of the robot arm to each
(X_j, Y_j)
, the positions of the joints will be as follows:
To
(X_1, Y_1) = (-1, 0)
: First, the position of Joint
0
is
(x_0, y_0) = (0, 0)
. As the mode of Section
1
is
R
, the position of Joint
1
is
(x_1, y_1) = (1, 0)
. Then, as the mode of Section
2
is
L
, the position of Joint
2
is
(x_2, y_2) = (-1, 0)
.
To
(X_2, Y_2) = (0, 3)
:
(x_0, y_0) = (0, 0), (x_1, y_1) = (0, 1), (x_2, y_2) = (0, 3)
.
To
(X_3, Y_3) = (2, -1)
:
(x_0, y_0) = (0, 0), (x_1, y_1) = (0, -1), (x_2, y_2) = (2, -1)
.
Sample Input 2
5
0 0
1 0
2 0
3 0
4 0
Sample Output 2
-1
Sample Input 3
2
1 1
1 1
Sample Output 3
2
1 1
RU
UR
There may be duplicated points among
(X_j, Y_j)
.
Sample Input 4
3
-7 -3
7 3
-3 -7
Sample Output 4
5
3 1 4 1 5
LRDUL
RDULR
DULRD


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
n = int(input())
xy = [[int(item) for item in input().split()] for _ in range(n)]

# If mod2 changes, there are no answer
mod2 = (xy[0][0] + xy[0][1]) % 2
for x, y in xy:
    if (x + y) % 2 != mod2:
        print(-1)
        exit()

if mod2 == 1:
    print(31)
    print(" ".join([str(2**item) for item in range(31)]))
else:
    print(32)
    print("1 " + " ".join([str(2**item) for item in range(31)]))

for x, y in xy:
    if mod2 == 0:
        x -= 1
        print("R", end="")
    u = x + y
    v = x - y
    bits = [[0] * 31 for _ in range(2)]
    if u < 0:
        bits[0] = [1] * 31
        bits[0][30] = 0
    else:
        bits[0][30] = 1
    if v < 0:
        bits[1] = [1] * 31
        bits[1][30] = 0
    else:
        bits[1][30] = 1
    for i in range(30):
        if u >= 0 and abs(u)//2>>i & 1:
            bits[0][i] = 1
        if u < 0 and abs(u)//2>>i & 1:
            bits[0][i] = 0
        if v >= 0 and abs(v)//2>>i & 1:
            bits[1][i] = 1
        if v < 0 and abs(v)//2>>i & 1:
            bits[1][i] = 0
    for u_b, v_b in zip(bits[0], bits[1]):
        if u_b == 1 and v_b == 1:
            print("R", end="")
        elif u_b == 0 and v_b == 0:
            print("L", end="")
        elif u_b == 1 and v_b == 0:
            print("U", end="")
        elif u_b == 0 and v_b == 1:
            print("D", end="")
    print("")
```