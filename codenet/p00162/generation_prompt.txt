Voici un énoncé de problème :

ハミング数
1 に 2, 3, 5 を何回か (0 回以上) かけ算して得られる数をハミング数 (Hamming numbers) と呼びます。例えば、
1
1 × 2 × 2 = 4
1 × 2 × 2 × 3 × 5 × 5 = 300
などはハミング数ですが、11, 13, 14 などはハミング数ではありません。
ハミング数はどれも 60 のべき乗を割り切る(例えば、54 は 60
3
= 21600 を割り切る) ので、時刻など 60 進法の計算には都合の良い数として昔から知られていました。また、楽器の調律に用いる音階の一つである純正律では、音の周波数の比が 24, 27, 30, 32, 36, 40, 45, 48 というハミング数からなる数列になります。
整数
m
、
n
を入力とし、
m
以上
n
以下のハミング数の個数を出力するプログラムを作成してください。
Input
複数のデータセットの並びが入力として与えられます。入力の終わりはゼロひとつの行で示されます。
各データセットとして、２つの整数
m
と
n
(1 ≤
m
,
n
≤ 1000000,
m
≤
n
) が空白区切りで１行に与えられます。
データセットの数は 20 を超えません。
Output
データセットごとに
m
以上
n
以下のハミング数の個数を１行に出力します。
Sample Input
3 8
1 27
1 86
0
Output for the Sample Input
5
17
31


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def two(n):
    if n == 1:
        return True
    elif n%2 != 0:
        return three(n)
    else:
        q = n/2
        return two(q)

def three(n):
    if n == 1:
        return True
    elif n%3 != 0:
        return five(n)
    else:
        q = n/3
        return three(q)

def five(n):
    if n == 1:
        return True
    elif n%5 != 0:
        return False
    else:
        q = n/5
        return two(q)

while True:
    input_line = raw_input()
    if input_line == '0': break
    m, n = map(int, input_line.split())
    c = 0
    for n in range(m, n+1):
        if two(n):
            c += 1
    else:
        print c
```