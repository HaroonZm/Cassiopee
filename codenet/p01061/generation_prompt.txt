Voici un énoncé de problème :

Community Integration
Problem
N
個の村がある。それぞれの村には1から
N
までの番号がついている。昨今の合併ブームにより、いくつかの村が合併されることになった。合併された2つ以上の村は新しい1つの市となり、どの村とも合併されない村は村のままである。
あなたは、ある2つの村が合併後に同じ市になる、という情報を複数与えられる。その情報の組み合わせによって、3つ以上の村が1つの市になることもありうる。
合併後に同じ市になる村同士の情報が与えられたとき、合併後の市の数と村の数の差の絶対値を出力せよ。
Input
入力は以下の形式で与えられる。
N
M
a
1
b
1
a
2
b
2
...
a
i
b
i
...
a
M
b
M
1行目に村の数
N
と合併についての情報の数
M
が空白区切りで与えられる。
2行目から
M
+1行目に、合併についての情報を表す２つの整数
a
i
と
b
i
が空白区切りで与えらる。各情報は
a
i
番目の村と
b
i
番目の村が合併後に同じ市になることを示す。ただし、
a
i
=
b
i
を満たすような入力は与えられない。
Constraints
1 ≤
N
≤ 1,000
0 ≤
M
≤ 100
1 ≤
a
i
≤
N
1 ≤
b
i
≤
N
Output
村の数と市の数の差の絶対値を1行に出力せよ。
Sample Input 1
3 1
1 2
Sample Output 1
0
Sample Input 2
4 2
1 4
2 3
Sample Output 2
2
Sample Input 3
5 0
Sample Output 3
5
Sample Input 4
3 3
1 2
2 3
3 1
Sample Output 4
1
このケースではすべての村が1つの市に合併されることを表し、その市の中で合併される2つの村をつなぐつなぎ方の全通りが入力として与えられている。
Sample Input 5
3 2
1 2
2 3
Sample Output 5
1
このケースでは合併される3つの村をつなぐつなぎ方の全通りが入力として与えられているわけではないが、つながっている村をたどればすべての村にたどり着くことができるので、すべての村が一つの市に合併される。
Sample Input 6
5 4
1 2
2 3
3 4
4 5
Sample Output 6
1
Sample Input 7
10 5
3 4
1 2
9 6
2 6
2 9
Sample Output 7
2


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
[m,n] = map(int,input().split())

def find(v,cs):
    for c in cities:
        if v in c:
            return (True,c)
    return (False,set([v]))

cities = []
for _ in range(n):
    [a,b] = map(int,input().split())

    (ra,fa) = find(a,cities)
    (rb,fb) = find(b,cities)

    mg = fa | fb

    if ra:
        cities.remove(fa)
    else:
        m = m - 1
    if rb:
        if fa != fb:
            cities.remove(fb)
    else:
        m = m - 1
    cities.append(mg)

print(abs(m-len(cities)))
```