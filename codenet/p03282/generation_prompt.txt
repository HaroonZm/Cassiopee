Voici un énoncé de problème :

﻿Score:
300
points
Problem Statement
Mr. Infinity has a string
S
consisting of digits from
1
to
9
. Each time the date changes, this string changes as follows:
Each occurrence of
2
in
S
is replaced with
22
. Similarly, each
3
becomes
333
,
4
becomes
4444
,
5
becomes
55555
,
6
becomes
666666
,
7
becomes
7777777
,
8
becomes
88888888
and
9
becomes
999999999
.
1
remains as
1
.
For example, if
S
is
1324
, it becomes
1333224444
the next day, and it becomes
133333333322224444444444444444
the day after next.
You are interested in what the string looks like after
5 \times 10^{15}
days. What is the
K
-th character from the left in the string after
5 \times 10^{15}
days?
Constraints
S
is a string of length between
1
and
100
(inclusive).
K
is an integer between
1
and
10^{18}
(inclusive).
The length of the string after
5 \times 10^{15}
days is at least
K
.
Input
Input is given from Standard Input in the following format:
S
K
Output
Print the
K
-th character from the left in Mr. Infinity's string after
5 \times 10^{15}
days.
Sample Input 1
1214
4
Sample Output 1
2
The string
S
changes as follows:
Now:
1214
After one day:
12214444
After two days:
1222214444444444444444
After three days:
12222222214444444444444444444444444444444444444444444444444444444444444444
The first five characters in the string after
5 \times 10^{15}
days is
12222
. As
K=4
, we should print the fourth character,
2
.
Sample Input 2
3
157
Sample Output 2
3
The initial string is
3
. The string after
5 \times 10^{15}
days consists only of
3
.
Sample Input 3
299792458
9460730472580800
Sample Output 3
2


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math
import sys
import queue
from collections import Counter
from itertools import accumulate
from fractions import gcd
from functools import reduce

def lcm(a, b):
    return a * b // gcd(a, b)

def combination_count(n, r):
    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))

def permutations_count(n, r):
    return math.factorial(n) // math.factorial(n - r)

mod = 1000000007

"""
# 標準入力取得
## 文字列
    = sys.stdin.readline().rstrip()
    = list(sys.stdin.readline().rstrip())

## 数値
    = int(sys.stdin.readline())
    = map(int, sys.stdin.readline().split())
    = list(map(int, sys.stdin.readline().split()))
    = [list(map(int,list(sys.stdin.readline().split()))) for i in range(N)]
"""

if __name__ == "__main__":
    S = sys.stdin.readline().rstrip()
    K = int(sys.stdin.readline())

    cnt = 0
    for s in S:
        if K == 0:
            print(1)
            break
        if s == "1":
            K -= 1
        else:
            print(s)
            break
    else:
        print(1)
```