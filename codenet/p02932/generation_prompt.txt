Voici un énoncé de problème :

Score:
1000
points
Problem Statement
Find the number of sequences of
N
non-negative integers
A_1, A_2, ..., A_N
that satisfy the following conditions:
L \leq A_1 + A_2 + ... + A_N \leq R
When the
N
elements are sorted in non-increasing order, the
M
-th and
(M+1)
-th elements are equal.
Since the answer can be enormous, print it modulo
10^9+7
.
Constraints
All values in input are integers.
1 \leq M < N \leq 3 \times 10^5
1 \leq L \leq R \leq 3 \times 10^5
Input
Input is given from Standard Input in the following format:
N
M
L
R
Output
Print the number of sequences of
N
non-negative integers, modulo
10^9+7
.
Sample Input 1
4 2 3 7
Sample Output 1
105
The sequences of non-negative integers that satisfy the conditions are:
\begin{eqnarray} &(1, 1, 1, 0), (1, 1, 1, 1), (2, 1, 1, 0), (2, 1, 1, 1), (2, 2, 2, 0), (2, 2, 2, 1), \\ &(3, 0, 0, 0), (3, 1, 1, 0), (3, 1, 1, 1), (3, 2, 2, 0), (4, 0, 0, 0), (4, 1, 1, 0), \\ &(4, 1, 1, 1), (5, 0, 0, 0), (5, 1, 1, 0), (6, 0, 0, 0), (7, 0, 0, 0)\end{eqnarray}
and their permutations, for a total of
105
sequences.
Sample Input 2
2 1 4 8
Sample Output 2
3
The three sequences that satisfy the conditions are
(2, 2)
,
(3, 3)
, and
(4, 4)
.
Sample Input 3
141592 6535 89793 238462
Sample Output 3
933832916


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
input = sys.stdin.readline

import numpy as np

N,M,L,R = map(int,input().split())

MOD = 10 ** 9 + 7

X=1000
fact = np.arange(X*X,dtype=np.int64).reshape(X,X)
fact[0,0] = 1
for n in range(1,X):
    fact[:,n] *= fact[:,n-1]
    fact[:,n] %= MOD
for n in range(1,X):
    fact[n] *= fact[n-1,-1]
    fact[n] %= MOD
fact = fact.ravel()

fact_inv = np.arange(1,X*X+1,dtype=np.int64)[::-1].reshape(X,X)
fact_inv[0,0] = pow(int(fact[-1]),MOD-2,MOD)
for n in range(1,X):
    fact_inv[:,n] *= fact_inv[:,n-1]
    fact_inv[:,n] %= MOD
for n in range(1,X):
    fact_inv[n] *= fact_inv[n-1,-1]
    fact_inv[n] %= MOD
fact_inv = fact_inv.ravel()[::-1]

U = N - M
comb = fact[U] * fact_inv[:U+1] % MOD * fact_inv[U::-1] % MOD
comb[1::2] *= (-1)

P = np.zeros(R+1,dtype=np.int64)
for i,x in enumerate(comb,M):
    P[::i] += x

P[:M-1:-1] -= P[-M-1::-1]
P %= MOD

# (1-x)^{N+1}で割る
Q = fact[N:N+R+1] * fact_inv[:R+1] % MOD * fact_inv[N] % MOD

def f(R):
    total = fact[R+N] * fact_inv[R] % MOD * fact_inv[N] % MOD
    x = (Q[R::-1] * P[:R+1] % MOD).sum() % MOD
    coef = fact[N] * fact_inv[M] % MOD * fact_inv[N-M] % MOD
    return (total - x*coef)%MOD

answer = (f(R) - f(L-1))%MOD
print(answer)
```