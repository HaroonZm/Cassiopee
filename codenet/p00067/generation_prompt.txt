Voici un énoncé de problème :

島の数
地勢を示す縦 12, 横 12 のマスからなる平面図があります。おのおののマスは白か黒に塗られています。白は海を、黒は陸地を表します。二つの黒いマスが上下、あるいは左右に接しているとき、これらは地続きであるといいます。この平面図では、黒いマス一つのみ、あるいは地続きの黒いマスが作る領域を「島」といいます。例えば下図には、5 つの島があります。
■■■■□□□□■■■■
■■■□□□□□■■■■
■■□□□□□□■■■■
■□□□□□□□■■■■
□□□■□□□■□□□□
□□□□□□■■■□□□
□□□□□■■■■■□□
■□□□■■■■■■■□
■■□□□■■■■■□□
■■■□□□■■■□□□
■■■■□□□■□□□□
□□□□□□□□□□□□
マスのデータを読み込んで、島の数を出力するプログラムを作成してください。
Input
入力は複数のデータセットからなります。各データセットに１つの平面図が与えられます。黒いマスを 1、白いマスを 0 で表現した 12 個の数字の列 12 行でひとつの平面図を表します。データセットの間は１つの空行で区切られています。
データセットの数は 20 を超えません。
Output
データセットごとに、島の数を１行に出力します。
Sample Input
111100001111
111000001111
110000001111
100000001111
000100010000
000000111000
000001111100
100011111110
110001111100
111000111000
111100010000
000000000000
010001111100
110010000010
010010000001
010000000001
010000000110
010000111000
010000000100
010000000010
010000000001
010010000001
010010000010
111001111100
000000000000
111111111111
100010100001
100010100001
100010100001
100010100001
100100100101
101000011101
100000000001
100000000001
111111111111
100000000001
Output for the Sample Input
5
13
4
Hint
以下はサンプルインプットを■と□で表したものです。
■■■■□□□□■■■■ □■□□□■■■■■□□ □□□□□□□□□□□□
■■■□□□□□■■■■ ■■□□■□□□□□■□ ■■■■■■■■■■■■
■■□□□□□□■■■■ □■□□■□□□□□□■ ■□□□■□■□□□□■
■□□□□□□□■■■■ □■□□□□□□□□□■ ■□□□■□■□□□□■
□□□■□□□■□□□□ □■□□□□□□□■■□ ■□□□■□■□□□□■
□□□□□□■■■□□□ □■□□□□■■■□□□ ■□□□■□■□□□□■
□□□□□■■■■■□□ □■□□□□□□□■□□ ■□□■□□■□□■□■
■□□□■■■■■■■□ □■□□□□□□□□■□ ■□■□□□□■■■□■
■■□□□■■■■■□□ □■□□□□□□□□□■ ■□□□□□□□□□□■
■■■□□□■■■□□□ □■□□■□□□□□□■ ■□□□□□□□□□□■
■■■■□□□■□□□□ □■□□■□□□□□■□ ■■■■■■■■■■■■
□□□□□□□□□□□□ ■■■□□■■■■■□□ ■□□□□□□□□□□■


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def get_input():
    while True:
        try:
            yield ''.join(input())
        except EOFError:
            break

def nuri(table, m, x, y):
    if table[x-1][y] and m[x-1][y] == 0:
        m[x-1][y] = m[x][y]
        nuri(table, m, x-1, y)
    if table[x+1][y] and m[x+1][y] == 0:
        m[x+1][y] = m[x][y]
        nuri(table, m, x+1, y)
    if table[x][y-1] and m[x][y-1] == 0:
        m[x][y-1] = m[x][y]
        nuri(table, m, x, y-1)
    if table[x][y+1] and m[x][y+1] == 0:
        m[x][y+1] = m[x][y]
        nuri(table, m, x, y+1)
    return

N = list(get_input())
for l in range(0,len(N),13):
    table = [[False for i in range(14)] for j in range(14)]
    for i in range(12):
        for j in range(12):
            if int(N[l+i][j]) == 1:
                table[i+1][j+1] = True

    m = [[0 for i in range(14)] for j in range(14)]

    cnt = 0
    for i in range(1,13):
        for j in range(1,13):
            if table[i][j] and m[i][j] == 0:
                cnt += 1
                m[i][j] = cnt
                nuri(table, m, i, j)

    print(cnt)
```