Voici un énoncé de problème :

Score :
300
points
Problem Statement
Takahashi is a teacher responsible for a class of
N
students.
The students are given distinct student numbers from
1
to
N
.
Today, all the students entered the classroom at different times.
According to Takahashi's record, there were
A_i
students in the classroom when student number
i
entered the classroom (including student number
i
).
From these records, reconstruct the order in which the students entered the classroom.
Constraints
1 \le N \le 10^5
1 \le A_i \le N
A_i \neq A_j
(i \neq j)
All values in input are integers.
Input
Input is given from Standard Input in the following format:
N
A_1
A_2
\ldots
A_N
Output
Print the student numbers of the students in the order the students entered the classroom.
Sample Input 1
3
2 3 1
Sample Output 1
3 1 2
First, student number
3
entered the classroom.
Then, student number
1
entered the classroom.
Finally, student number
2
entered the classroom.
Sample Input 2
5
1 2 3 4 5
Sample Output 2
1 2 3 4 5
Sample Input 3
8
8 2 7 3 4 5 6 1
Sample Output 3
8 2 4 5 6 7 3 1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import bisect,collections,copy,heapq,itertools,math,string
import numpy as np
from numba import njit
import sys
sys.setrecursionlimit(10**7)

def _S(): return sys.stdin.readline().rstrip()
def I(): return int(sys.stdin.readline().rstrip())
def LI(): return list(map(int,sys.stdin.readline().rstrip().split()))
def LS(): return list(sys.stdin.readline().rstrip().split())

N = I()
A = LI()

B = range(1,N+1)
AB = zip(A,B)
# print(*AB)
sAB = sorted(AB)
# print(*sAB)
_,ans=zip(*sAB)
print(*ans)

#AB = [LI() for _ in range(N)]
#A,B = zip(*AB)
#Ap = np.array(A)
#C = np.zeros(N + 1)
# index 順 要素のindex

# ans = []
# for i in range(N):
#     ans.append(A.index(i+1)+1)
# print(*ans)
```