En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
class UnionFind:
    def __init__(self, n):
        self.par = [i for i in range(n+1)]
        self.rank = [0] * (n+1)

    # 検索
    def find(self, x):
        if self.par[x] == x:
            return x
        else:
            self.par[x] = self.find(self.par[x])
            return self.par[x]

    # 併合
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if self.rank[x] < self.rank[y]:
            self.par[x] = y
        else:
            self.par[y] = x
            if self.rank[x] == self.rank[y]:
                self.rank[x] += 1

    # 同じ集合に属するか判定
    def same_check(self, x, y):
        return self.find(x) == self.find(y)

    
    
n, m = map(int, input().split())
lang = []
for _ in range(n):
    a = [int(i) for i in input().split()[1:]]
    lang.append(a)    
un = UnionFind(n + m)

for i in range(n):
    for l in lang[i]:
        un.union(i, l + n)

ans = set([])
for i in range(n):
    k = un.find(i)
    ans.add(k)
    
if len(ans) == 1:
    print('YES')
else:
    print('NO')
```