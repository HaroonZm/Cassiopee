Voici un énoncé de problème :

博士の光電管
博士 : ピーター君。やったよ。
ピーター : またですか。今度はどんなくだらない発明ですか。
博士 : あの幻の素粒子アキシオンの検出器を発明したんじゃ。
ピーター : アキシオンといえば、欧州合同原子核研究機構 (CERN) をはじめとする研究者たちが血眼で追っかけているという、あれですよね。本当ですかぁ?
博士 : 本当だってばよ。細かい説明は省くが、非常に強力な磁場を内蔵する特殊な光電管が光ることによって、通過するアキシオンを検出する。
ピーター : 他 に先んじて検出すれば、小柴先生のニュートリノ検出に匹敵するノーベル賞級の研究ですよ。
これで役立たずの研究ばかりしている「ダメ研究室」などという汚名も返上できますね。
博士 : そうだとも。小柴先生の「スーパーカミオカンデ」にあやかって、この装置を、(悪口言ったら)「タダジャオカンデ」と命名した。
ピーター : ちょっと苦しいって言うか、卑屈って言うか・・・。
博士 : それはいいとして、この装置ちょっとした癖があるんじゃよ。
アキシオン粒子がある光電管を通過すると、感度の関係でその光電管と隣接する上下左右の光電管が反応する。
図1
図2
★
●
●
●
●
●
●
●
★
●
●
●
●
●
●
●
●
●
●
●
●
●
★
●
●
→
○
○
●
○
●
○
●
○
○
○
●
●
●
○
●
●
●
○
●
●
●
○
○
○
●
●
○
○
●
○
○
★
★
○
☆
●
●
○
●
●
○
●
●
○
●
●
○
○
○
●
→
●
●
●
●
●
●
●
●
○
●
●
○
●
●
○
○
●
●
○
●
●
○
○
○
●
ピーター : つまり、図1の左側★印の光電管を粒子が通過した場合、
右側のように点灯すると言うことですね。
(図は 5 × 5 の例。黒は消灯・白は点灯状態。以下同じ。)
博士 : また反応とは、光電管の状態が反転する。つまり消えている光電管は光り、
光っている光電管は消える。
ピーター : つまり、図2の左側の★印や☆印を粒子が通過した場合、右側のような状態になると。
博士 : これを正方形になんと 100 個 (10 × 10) 配置して待ち受けるわけだ。
ピーター : これだけの大発明、ノーベル賞選考委員会も「ホッチャオカンデ」なんて。
博士 : おぉピーター君、君も我が研究室の作風になじんできたようだね。いい感じだ。
では、早速実験を始めよう。まずはこの装置、現在ランダムに光電管が点いているので、
実験が始められるように全部消えた状態にリセットしてくれたまえ。
なあに、どの光電管にアキシオン粒子を当てれば全部消えるか考えればいいだけじゃよ。
簡単だろう?
ピーター : 考えるのはいいんですが博士。当てるためには、
幻のアキシオン粒子を発生させて打ち込める装置がないといけないんじゃないですか。
博士 : ・・・。
博士とピータ (同時に)コリャアカンデ!だははは・・・・。
ー:
ということで、本日も和気あいあいと暮れてゆく博士の研究室ですが、例によって話は全く進みそうもありません。しょうがないので、ピーター君に代わってプログラムを作成してあげてください。
プログラムは次のようなものになります。
A. 装置の光電管の状態を 10 × 10 の配列として入力します。0は消灯中、1は点灯中を表します。
0 と 1 以外のデータは含まれません。
B. 入力した装置の状態をすべて消灯にするために、アキシオン粒子を通過させる位置を計算して出力します。これは、入力と同じ 10 × 10の配列で光電管の位置を表します。「0 は通過させない」、「1 は通過させる」ことを表します。すべてを消灯する方法は必ず 1 通りだけ存在するものとします。
Input
複数のデータセットが与えられます。１行目にデータセットの数
n
(
n
≤ 20) が与えられます。各データセットは以下の形式で与えられます。
a
1,1
a
1,2
...
a
1,10
a
2,1
a
2,2
...
a
2,10
:
a
10,1
a
10,2
...
a
10,10
a
i,j
は装置の
i
行目
j
列目の光電管の状態を示す整数 (0 または 1) を表します。
Output
各データセットについて、粒子を通過させる位置を以下の形式で出力してください。
b
1,1
b
1,2
...
b
1,10
b
2,1
b
2,2
...
b
2,10
:
b
10,1
b
10,2
...
b
10,10
b
i,j
は装置の
i
行目
j
列目の光電管に粒子を通過させるかいなかを示す整数 (0 または 1) を表します。
Sample Input
1
0 1 0 0 0 0 0 0 0 0
1 1 1 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 0 0 1 1 0 0 0 0
0 0 0 1 0 0 1 0 0 0
0 0 0 0 1 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 1 1 1
0 0 0 0 0 0 0 0 1 0
Output for the Sample Input
0 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 0


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import itertools
def change(m, x, y):
    m[y][x] ^= 1
    if y>0: m[y-1][x] ^= 1
    if x>0: m[y][x-1] ^= 1
    if x<9: m[y][x+1] ^= 1
    if y<9: m[y+1][x] ^= 1
ans = [[0] * 10 for i in xrange(10)]
for t in xrange(input()):
    m = [map(int, raw_input().split()) for i in xrange(10)]
    for p in itertools.product((0,1), repeat=10):
        mm = [m[i][:] for i in xrange(10)]
        for i in xrange(10):
            if p[i]:
                change(mm, i, 0)
            ans[0][i] = p[i]
        for i in xrange(9):
            for j in xrange(10):
                if mm[i][j]:
                    change(mm, j, i+1)
                    ans[i+1][j] = 1
                else:
                    ans[i+1][j] = 0
        if not any(mm[9]):
            for i in xrange(10):
                print " ".join(map(str, ans[i]))
            break
```