Voici un énoncé de problème :

0-1 Knapsack Problem II
You have
N
items that you want to put them into a knapsack. Item
i
has value
v
i
and weight
w
i
.
You want to find a subset of items to put such that:
The total value of the items is as large as possible.
The items have combined weight at most
W
, that is capacity of the knapsack.
Find the maximum total value of items in the knapsack.
Input
N
W
v
1
w
1
v
2
w
2
:
v
N
w
N
The first line consists of the integers
N
and
W
. In the following
N
lines, the value and weight of the
i
-th item are given.
Output
Print the maximum total values of the items in a line.
Constraints
1 ≤
N
≤ 100
1 ≤
v
i
≤ 100
1 ≤
w
i
≤ 10,000,000
1 ≤
W
≤ 1,000,000,000
Sample Input 1
4 5
4 2
5 2
2 1
8 3
Sample Output 1
13
Sample Input 2
2 20
5 9
4 10
Sample Output 2
9


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
N, W = map(int, input().split())
I = [list(map(int, input().split())) for _ in range(N)]
MAX_V = sum(v for v, _ in I)

dp = [W+1] * (MAX_V + 1)
dp[0] = 0
for v, w in I:
    for j in range(MAX_V, v-1, -1):
        dp[j] = min(dp[j-v] + w, dp[j])
        
for i in range(MAX_V, -1, -1):
  if dp[i] <= W:
    print(i)
    break
```