En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
"""
Illumination
http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0569

"""
import sys

def solve(data, w, h):
    invisible_area = set()
    visible_area = set()
    visited = set()
    for y in range(h):
        for x in range(w):
            visited.add((x, y))
            if data[y][x] == 1:
                invisible_area.add((x, y))
            is_visible = False
            if (x, y) in invisible_area or (x, y) in visible_area:
                continue
            area = {(x, y)}
            stack = [(x, y)]
            while stack:
                cx, cy = stack.pop()
                visited.add((cx, cy))
                dxy = ((cx, cy-1), (cx+1, cy-1), (cx-1, cy), (cx+1, cy), (cx, cy+1), (cx+1, cy+1)) if cy % 2 == 0 else \
                      ((cx-1, cy-1), (cx, cy-1), (cx-1, cy), (cx+1, cy), (cx-1, cy+1), (cx, cy+1))
                for nx, ny in dxy:
                    if not (0 <= nx < w) or not (0 <= ny < h):
                        is_visible = True
                    if 0 <= nx < w and 0 <= ny < h and data[ny][nx] == 0 and (nx, ny) not in visited:
                        stack.append((nx, ny))
                        area.add((nx, ny))
            if is_visible:
                visible_area |= area
            else:
                invisible_area |= area

    ans = 0
    for cy in range(h):
        for cx in range(w):
            if data[cy][cx] == 1:
                dxy = ((cx, cy-1), (cx+1, cy-1), (cx-1, cy), (cx+1, cy), (cx, cy+1), (cx+1, cy+1)) if cy % 2 == 0 else \
                ((cx-1, cy-1), (cx, cy-1), (cx-1, cy), (cx+1, cy), (cx-1, cy+1), (cx, cy+1))
                ans += 6 - sum((nx, ny) in invisible_area for nx, ny in dxy)
    return ans

def main(args):
    w, h = map(int, input().split())
    data = [list(map(int, input().split())) for _ in range(h)]
    ans = solve(data, w, h)
    print(ans)

if __name__ == '__main__':
    main(sys.argv[1:])
```