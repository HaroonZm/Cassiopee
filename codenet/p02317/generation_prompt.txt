Voici un énoncé de problème :

Longest Increasing Subsequence
For a given sequence
A = {a
0
, a
1
, ... , a
n-1
}
, find the length of the longest increasing subsequnece (LIS) in
A
.
An increasing subsequence of
A
is defined by a subsequence
{a
i
0
, a
i
1
, ... , a
i
k
}
where
0 ≤ i
0
< i
1
< ... < i
k
< n
and
a
i
0
< a
i
1
< ... < a
i
k
.
Input
n
a
0
a
1
:
a
n-1
In the first line, an integer
n
is given. In the next
n
lines, elements of
A
are given.
Output
The length of the longest increasing subsequence of
A
.
Constraints
1 ≤
n
≤ 100000
0 ≤
a
i
≤ 10
9
Sample Input 1
5
5
1
3
2
4
Sample Output 1
3
Sample Input 2
3
1
1
1
Sample Output 2
1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
#最長増加部分列問題 (LIS) 
import bisect

N = int(input())
seq = [0] * N
for i in range(N):
  seq[i] = int(input())

LIS = [seq[0]]
#print(LIS)
for i in range(len(seq)):
    if seq[i] > LIS[-1]:
        LIS.append(seq[i])
    else:
        LIS[bisect.bisect_left(LIS, seq[i])] = seq[i]
    #print(LIS)
#print(LIS)
print(len(LIS))
```