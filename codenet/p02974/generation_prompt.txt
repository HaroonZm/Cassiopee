Voici un énoncé de problème :

Score :
600
points
Problem Statement
Let us define the
oddness
of a permutation
p
= {
p_1,\ p_2,\ ...,\ p_n
} of {
1,\ 2,\ ...,\ n
} as
\sum_{i = 1}^n |i - p_i|
.
Find the number of permutations of {
1,\ 2,\ ...,\ n
} of oddness
k
, modulo
10^9+7
.
Constraints
All values in input are integers.
1 \leq n \leq 50
0 \leq k \leq n^2
Input
Input is given from Standard Input in the following format:
n
k
Output
Print the number of permutations of {
1,\ 2,\ ...,\ n
} of oddness
k
, modulo
10^9+7
.
Sample Input 1
3 2
Sample Output 1
2
There are six permutations of {
1,\ 2,\ 3
}. Among them, two have oddness of
2
: {
2,\ 1,\ 3
} and {
1,\ 3,\ 2
}.
Sample Input 2
39 14
Sample Output 2
74764168


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def f(n,k):
    md = 10 ** 9 + 7
    if k % 2:
        print(0)
        exit()
    k //= 2
    dp = [[[0] * (n ** 2) for _ in range(n + 2)] for __ in range(n + 1)]
    dp[0][0][0] = 1
    for i in range(1, n + 1):
        dpi1 = dp[i - 1]
        for j in range(i + 1):
            for s in range(j, k + 1):
                # 片側、水平、両方上
                #            print(i,j,s)
                tmp = dpi1[j][s - j] * j * 2 + dpi1[j][s - j] + dpi1[j + 1][s - j] * (j + 1) ** 2
                if j:
                    # 両方保留
                    tmp += dp[i - 1][j - 1][s - j]
                dp[i][j][s] = tmp % md
    print(dp[n][0][k])

n, k = map(int, input().split())
f(n,k)
```