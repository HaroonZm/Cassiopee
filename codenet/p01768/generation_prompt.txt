En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
inf = 10**9
par = [0]*5001
rank = [0]*5001
def init_union_find(V):
    for i in xrange(V):
        par[i] = i
        rank[i] = 0
        
def find(x):
    if par[x] == x: return x
    else:
        par[x] = find(par[x])
        return par[x]
    
def unite(x,y):
    x = find(x)
    y = find(y)
    if (x == y): return
    
    if rank[x] < rank[y]:
        par[x] = y
    else:
        par[y] = x
        if(rank[x] == rank[y]): rank[x] += 1

def same(x,y):
    return find(x) == find(y)

N = int(raw_input())
init_union_find(N)
cost = [0]*N
dic = {}
for i in xrange(N):
    a,x = raw_input().split()
    dic[a] = i
    cost[i] = int(x)
    
M = int(raw_input())
for loop in xrange(M):
    s,t = raw_input().split()
    unite(dic[s],dic[t])

ans = 0
ncost = [inf]*N
for i,c in sorted(enumerate(cost), key = lambda a:a[1]):
    p = find(i)
    if ncost[p] == inf:
        ncost[p] = c
    ans += ncost[p]
print ans
```