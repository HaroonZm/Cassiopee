Voici un énoncé de problème :

Coin Combination Problem II
You have
N
coins each of which has a value
a
i
.
Find the number of combinations that result when you choose
K
different coins in such a way that the total value of the coins is greater than or equal to
L
and less than or equal to
R
.
Constraints
1 ≤
K
≤
N
≤ 40
1 ≤
a
i
≤ 10
16
1 ≤
L
≤
R
≤ 10
16
All input values are given in integers
Input
The input is given in the following format.
N
K
L
R
a
1
a
2
...
a
N
Output
Print the number of combinations in a line.
Sample Input 1
2 2 1 9
5 1
Sample Output 1
1
Sample Input 2
5 2 7 19
3 5 4 2 2
Sample Output 2
5


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
import bisect

def main():
    n, K, L, R = map(int, sys.stdin.readline().split())
    a = tuple(map(int, sys.stdin.readline().split()))
    m = n//2
    ls = [[] for _ in range(m+1)]
    for i in range(1 << m):
        ls[bin(i).count("1")].append(sum([a[j] for j in range(m) if i >> j & 1]))
    for i in range(m+1):
        ls[i].sort()
    ans = 0
    for i in range(1 << n-m):
        cnt = bin(i).count("1")
        val = sum([a[m+j] for j in range(n-m) if i >> j & 1])
        if K-m <= cnt <= K:
            ans += bisect.bisect_right(ls[K-cnt], R-val) - bisect.bisect_right(ls[K-cnt], L-val-1)
    print(ans)

if __name__ == '__main__':
    main()
```