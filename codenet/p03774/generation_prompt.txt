Voici un énoncé de problème :

Score :
200
points
Problem Statement
There are
N
students and
M
checkpoints on the
xy
-plane.
The coordinates of the
i
-th student
(1 \leq i \leq N)
is
(a_i,b_i)
, and the coordinates of the checkpoint numbered
j
(1 \leq j \leq M)
is
(c_j,d_j)
.
When the teacher gives a signal, each student has to go to the nearest checkpoint measured in
Manhattan distance
.
The Manhattan distance between two points
(x_1,y_1)
and
(x_2,y_2)
is
|x_1-x_2|+|y_1-y_2|
.
Here,
|x|
denotes the absolute value of
x
.
If there are multiple nearest checkpoints for a student, he/she will select the checkpoint with the smallest index.
Which checkpoint will each student go to?
Constraints
1 \leq N,M \leq 50
-10^8 \leq a_i,b_i,c_j,d_j \leq 10^8
All input values are integers.
Input
The input is given from Standard Input in the following format:
N
M
a_1
b_1
:
a_N
b_N
c_1
d_1
:
c_M
d_M
Output
Print
N
lines.
The
i
-th line
(1 \leq i \leq N)
should contain the index of the checkpoint for the
i
-th student to go.
Sample Input 1
2 2
2 0
0 0
-1 0
1 0
Sample Output 1
2
1
The Manhattan distance between the first student and each checkpoint is:
For checkpoint
1
:
|2-(-1)|+|0-0|=3
For checkpoint
2
:
|2-1|+|0-0|=1
The nearest checkpoint is checkpoint
2
. Thus, the first line in the output should contain
2
.
The Manhattan distance between the second student and each checkpoint is:
For checkpoint
1
:
|0-(-1)|+|0-0|=1
For checkpoint
2
:
|0-1|+|0-0|=1
When there are multiple nearest checkpoints, the student will go to the checkpoint with the smallest index. Thus, the second line in the output should contain
1
.
Sample Input 2
3 4
10 10
-10 -10
3 3
1 2
2 3
3 5
3 5
Sample Output 2
3
1
2
There can be multiple checkpoints at the same coordinates.
Sample Input 3
5 5
-100000000 -100000000
-100000000 100000000
100000000 -100000000
100000000 100000000
0 0
0 0
100000000 100000000
100000000 -100000000
-100000000 100000000
-100000000 -100000000
Sample Output 3
5
4
3
2
1


En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import sys
sys.setrecursionlimit(10**6)
from math import floor,ceil,sqrt,factorial,log
from heapq import heappop, heappush, heappushpop
from collections import Counter,defaultdict,deque
from itertools import accumulate,permutations,combinations,product,combinations_with_replacement
from bisect import bisect_left,bisect_right
from copy import deepcopy
from operator import itemgetter
from fractions import gcd
mod = 10 ** 9 + 7
inf = float('inf')
ninf = -float('inf')
 
#整数input
def ii(): return int(sys.stdin.readline().rstrip()) #int(input())
def mii(): return map(int,sys.stdin.readline().rstrip().split())
def limii(): return list(mii()) #list(map(int,input().split()))
def lin(n:int): return [ii() for _ in range(n)]
def llint(n: int): return [limii() for _ in range(n)]
#文字列input
def ss(): return sys.stdin.readline().rstrip() #input()
def mss(): return sys.stdin.readline().rstrip().split()
def limss(): return list(mss()) #list(input().split())
def lst(n:int): return [ss() for _ in range(n)]
def llstr(n: int): return [limss() for _ in range(n)]

#本当に貪欲法か？ DP法では？？
#本当に貪欲法か？ DP法では？？
#本当に貪欲法か？ DP法では？？
n,m=mii()

arr =[]
for i in range(n):
    a,b=mii()
    arr.append([a,b])
mat = []
for i in range(m):
    c,d=mii()
    mat.append([c,d])
ans=[]
for i,j in arr:
    num = 10**100
    c1,c2=0,0
    cnt=0
    p=0
    for c,d in mat:
        cnt+=1
        if abs(i-c)+abs(j-d) <num:
            c1,c2=c,d
            num = abs(i-c)+abs(j-d)
            p=cnt
            
    ans.append(p)

print(*ans)
```