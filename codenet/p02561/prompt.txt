Voici un énoncé de problème :

Score :
100
points
Problem Statement
You are given a grid of
N
rows and
M
columns. The square at the
i
-th row and
j
-th column will be denoted as
(i,j)
.
Some of the squares contain an object. All the remaining squares are empty.
The state of the grid is represented by strings
S_1,S_2,\cdots,S_N
. The square
(i,j)
contains an object if
S_{i,j}=
#
and is empty if
S_{i,j}=
.
.
Consider placing
1 \times 2
tiles on the grid. Tiles can be placed vertically or horizontally to cover two adjacent empty squares.
Tiles must not stick out of the grid, and no two different tiles may intersect. Tiles cannot occupy the square with an object.
Calculate the maximum number of tiles that can be placed and any configulation that acheives the maximum.
Constraints
1 \leq N \leq 100
1 \leq M \leq 100
S_i
is a string with length
M
consists of
#
and
.
.
Input
Input is given from Standard Input in the following format:
N
M
S_1
S_2
\vdots
S_N
Output
On the first line, print the maximum number of tiles that can be placed.
On the next
N
lines, print a configulation that achieves the maximum.
Precisely, output the strings
t_1,t_2,\cdots,t_N
constructed by the following way.
t_i
is initialized to
S_i
.
For each
(i,j)
, if there is a tile that occupies
(i,j)
and
(i+1,j)
, change
t_{i,j}
:=
v
,
t_{i+1,j}
:=
^
.
For each
(i,j)
, if there is a tile that occupies
(i,j)
and
(i,j+1)
, change
t_{i,j}
:=
>
,
t_{i,j+1}
:=
<
.
See samples for further information.
You may print any configulation that maximizes the number of tiles.
Sample Input 1
3 3
#..
..#
...
Sample Output 1
3
#><
vv#
^^.
The following output is also treated as a correct answer.
3
#><
v.#
^><
