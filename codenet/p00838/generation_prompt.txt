En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
def solve():
    from itertools import product
    from sys import stdin
    f_i = stdin

    # idices of faces
    indices = ((0, 1, 2, 3, 4, 5), (0, 2, 4, 1, 3, 5),
               (0, 4, 3, 2, 1, 5), (0, 3, 1, 4, 2, 5),
               (1, 0, 3, 2, 5, 4), (1, 3, 5, 0, 2, 4),
               (1, 5, 2, 3, 0, 4), (1, 2, 0, 5, 3, 4),
               (2, 0, 1, 4, 5, 3), (2, 1, 5, 0, 4, 3),
               (2, 5, 4, 1, 0, 3), (2, 4, 0, 5, 1, 3),
               (3, 0, 4, 1, 5, 2), (3, 4, 5, 0, 1, 2),
               (3, 5, 1, 4, 0, 2), (3, 1, 0, 5, 4, 2),
               (4, 0, 2, 3, 5, 1), (4, 2, 5, 0, 3, 1),
               (4, 5, 3, 2, 0, 1), (4, 3, 0, 5, 2, 1),
               (5, 1, 3, 2, 4, 0), (5, 3, 4, 1, 2, 0),
               (5, 4, 2, 3, 1, 0), (5, 2, 1, 4, 3, 0))

    while True:
        n = int(f_i.readline())
        if n == 0:
            break

        cubes = tuple(tuple(f_i.readline().split()) for i in range(n))

        if n == 1:
            print(0)
            continue

        cube1 = cubes[0]
        cubes = cubes[1:]

        cnt = 6 * (n - 1)
        for tpl in product(indices, repeat=n-1):
            tmp = 0
            for idx, color1 in zip(zip(*tpl), cube1):
                d = {color1: 1}
                for c, i in zip(cubes, idx):
                    color = c[i]
                    if color in d:
                        d[color] += 1
                    else:
                        d[color] = 1
                tmp += n - max(d.values())
                if tmp >= cnt:
                    break
            else:
                cnt = tmp

        print(cnt)

if __name__ == '__main__':
    solve()
```