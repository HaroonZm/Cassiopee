# アルゴリズムの概要
# S の文字列は O と X からなる。
# マルバツスタンプは OX または XO のペア（隣り合う2文字）を一回の押印で印字できる。
# マルスタンプとバツスタンプはそれぞれ単一の O または X を印字できる。
# それぞれのスタンプはちょうど一回ずつ使われ、順番は自由。
#
# 目的：可能なマルバツスタンプの最大数を求める。
#
# 方針：
# 1. 文字列を左からスキャンし、隣り合うペアが OX または XO ならば、そこにマルバツスタンプを使うことを検討する。
# 2. ひとたびペアを使うと、次の文字へはスキップして重複しないようにする。
#   - つまり、ペアで使った2文字は他のスタンプで使えない（1回ずつしか押せないため）。
# 3. この方法で最大数のペアを取れば、それが最大のマルバツスタンプの個数になる。
#
# なぜこの方法で最大になるか：
# - 隣接ペアを取り逃すと、ペアとして使える可能性を失うため、
#   連続しているならば可能な限り左からペアを取る貪欲法が最適。
#
# 時間計算量：O(N)

import sys

def main():
    input = sys.stdin.readline
    N = int(input())
    S = input().rstrip()

    count = 0
    i = 0
    while i < N - 1:
        # 現在の文字と次の文字が OX または XO なら
        if (S[i] == 'O' and S[i+1] == 'X') or (S[i] == 'X' and S[i+1] == 'O'):
            count += 1
            i += 2  # 次の文字はペアとして使ったのでスキップ
        else:
            i += 1  # ペア形成できなければ次へ

    print(count)

if __name__ == "__main__":
    main()