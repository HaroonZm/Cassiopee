# 入力として与えられた街の区画ごとの人数データから、すべての南北・東西方向の長方形の各区間内の人数の合計を計算し、それらの合計を求める問題です。
# 直接すべての長方形の人数を計算するとO(H^2 * W^2)の計算量になり、最大500×500では非常に遅いです。
# そこで、各マスにおける「そのマスが含まれる長方形の数」を考え、この数とそのマスの人数を掛け合わせて、そのマスが貢献する救済回数を計算し、それらを全てのマスで足し合わせる方法を用います。

# アプローチ：
# 1. 各マス(i, j)が何通りの長方形に含まれるかを計算する。
#    南北方向では、区画は1 ～ H、東西方向は1 ～ W。
#    あるマス(i, j)を含む長方形の左上区画は(1～i, 1～j)まで、
#    右下区画は(i～H, j～W)まで選べるので、その数は i * j * (H - i + 1) * (W - j + 1) となる。
# 2. 各マスの人数A[i][j]に上記の長方形数を掛けたものを足し合わせる。

# これによりO(H*W)の計算で済みます。

def main():
    import sys
    input = sys.stdin.readline

    H, W = map(int, input().split())
    A = [list(map(int, input().split())) for _ in range(H)]

    total_rescue = 0
    for i in range(H):
        for j in range(W):
            # パターン数：上方向にi+1通り、左方向にj+1通り、下方向にH - i通り、右方向にW - j通り
            count = (i + 1) * (j + 1) * (H - i) * (W - j)
            total_rescue += A[i][j] * count

    print(total_rescue)

if __name__ == "__main__":
    main()