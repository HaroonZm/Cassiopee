# 入力された数Nに対して、
# N以下の最大の2の累乗を求める問題。

# アプローチ:
# 1. N以下の最大の2の累乗は2の何乗かkを求めることと同じ。
# 2. そのため、2^k <= Nとなる最大のkを見つければ良い。
# 3. Pythonではビット演算を使うことで効率的に計算可能。
#    たとえば、Nの最上位ビットに対応する2の累乗が答えとなる。
# 4. 具体的には、ビット長を使って2^(bit_length-1)で求められる。

# 以下に実装。

N = int(input())

# Nのビット長を取得
bit_length = N.bit_length()

# 最大の2の累乗は2^(bit_length - 1)
answer = 1 << (bit_length - 1)

print(answer)