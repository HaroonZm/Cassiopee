N, K = map(int, input().split())
T = [int(input()) for _ in range(N)]

# 初めはストーブは消えている
# 各来客の滞在時間は1単位（TiからTi+1まで）
# 来客の間の隙間の長さ（次の来客の到着時刻 - 前の来客の退出時刻）を計算する
gaps = []
for i in range(N - 1):
    gap = T[i + 1] - (T[i] + 1)
    gaps.append(gap)

# 最初は全ての来客の間を別々にストーブをつけるので、
# ストーブがついている時間は
# (最後の来客の退出時刻) - (最初の来客の到着時刻)
total_time = (T[-1] + 1) - T[0]

# マッチはK本あるので、ストーブをつけられる回数はK回まで
# 全ての来客分のストーブ点火回数はN回なので、
# N - K 回分は隙間をつなげてまとめることができる（つまり消費時間の空白分を減らせる）
# つなげる隙間は大きい順に取ると効果的
gaps.sort(reverse=True)

# 大きい隙間を（N-K）個だけストーブを消さずにつなげるので、
# 全体のストーブ点火時間からその隙間を引く
if N > K:
    total_time -= sum(gaps[:N - K])

print(total_time)