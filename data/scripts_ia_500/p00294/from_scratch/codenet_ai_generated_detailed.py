# 解説:
# 円環状の鉄道路線があり、駅は0からN-1まで順番に並んでいます。
# 駅間の移動は隣同士で100円、どちら方向にも移動可能です。
#
# 目的:
# 出発駅pから、買い物する駅集合d（M個）を全て訪問する最小の移動費用を求める。
# 駅の順番は自由で、同じ駅を複数回訪問してもよい。
#
# ポイント:
# 円環上の距離は、2つの駅a,bについて小さい方の距離を考える（時計回りか反時計回り）。
#
# 考察:
# 全ての駅を訪れる必要があるので、単純に買い物駅の最小区間(区間を“連続した区間”として考える))を囲むように移動するのが最もコストが低い。
# 出発点pは必ず買い物駅の外にある（dとpは異なる）。
#
# アプローチ:
# 買い物駅リストdをソートして、その最小駅番号d_min, 最大駅番号d_maxを見つける。
# 円環上でpとd_min,d_maxの位置関係を考える。
#
# 方法1:
# pからd_minに移動し、そこからd_maxまで移動 → d_maxからpに戻るは必要ない（全ての駅訪問完了後、出発駅に戻る必要なし）
#
# しかし、訪問経路はどの順番でも良い。よって、
#
# 選択肢は主に2つ:
# 1) pからd_minへ行き、d_minからd_maxまで周回
# 2) pからd_maxへ行き、d_maxからd_minまで周回
#
# 円環路線での距離計算を考慮して、最小のコストを求める。
#
# 距離関数を作り、実装。


def main():
    import sys
    input = sys.stdin.readline

    N, M, p = map(int, input().split())
    d = [int(input()) for _ in range(M)]

    # 買い物駅の最小番号、最大番号を取得
    d_min = min(d)
    d_max = max(d)

    # 円環上の距離計算関数
    def dist(a, b):
        # 時計回り距離
        if a <= b:
            cw = b - a
        else:
            cw = N - (a - b)
        # 反時計回り距離
        ccw = N - cw
        return min(cw, ccw)

    # どちらの方向に行くかによってコストを考える
    
    # 1) p -> d_min -> d_max
    cost1 = dist(p, d_min) + dist(d_min, d_max)
    # 2) p -> d_max -> d_min
    cost2 = dist(p, d_max) + dist(d_min, d_max)

    # 移動は隣接駅100円なので距離×100
    ans = min(cost1, cost2) * 100

    print(ans)

if __name__ == "__main__":
    main()