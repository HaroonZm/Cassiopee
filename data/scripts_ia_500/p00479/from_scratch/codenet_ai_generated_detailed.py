# 問題の概要：
# N×N の正方形の壁画では、最も外側の周囲から赤(1)、青(2)、黄(3)の色が
# らせん状に繰り返されて貼られている。
# はがれたタイルの位置（ai, bi）が与えられたとき、そのタイルの色を求める。

# アプローチ：
# タイルの色は、外周から内側に向かう「層」によって決まる。
# 例えば、座標 (x, y) における「層」は、
# 外周からの距離を考えて、
# layer = min(x-1, y-1, N-x, N-y)
# と計算できる。層が0なら外周、1ならその内側の周など。
# この層番号に応じて、色は周期的に変わる：
# 0 → 赤(1), 1 → 青(2), 2 → 黄(3), 3 → 赤(1), 4 → 青(2), ...
# 従って
# color = (layer % 3) + 1
# で求まる。

# この計算はO(1)なので、K個のはがれたタイルの位置それぞれに適用すれば良い。

import sys

def main():
    input = sys.stdin.readline
    N = int(input())
    K = int(input())

    for _ in range(K):
        a, b = map(int, input().split())
        # 各座標について外周からの層数を計算
        layer = min(a - 1, b - 1, N - a, N - b)
        # 層番号に応じて色を決定
        color = (layer % 3) + 1
        print(color)

if __name__ == "__main__":
    main()