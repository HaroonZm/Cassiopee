# 入力を読み込む
x, y = map(int, input().split())

# ヒデヨ博士の床塗りパターンは、東西方向をx軸、南北方向をy軸とし、
# 東をxの正の方向、北をyの正の方向とする。
# 色が赤(1), 黄(2), 青(3)の順に繰り返し塗られていく。
# 方向は東, 北, 西, 南の順で増加する長方形が拡がっていく。

# 問題の色塗り領域の拡張は螺旋状に四方向で1マスずつ増加していくことから、
# 各タイルの色は座標の階層や螺旋の位置に依存する。

# アプローチ：
# 1. 螺旋状に増えていく1辺の長さを求める (ここでは螺旋の「段数」L)
# 2. (x,y)がこの螺旋のどの位置(辺)に存在するか特定
# 3. この位置から色を判定する

# 座標(x,y)の階層Lは絶対値の最大値
L = max(abs(x), abs(y))

if L == 0:
    # 原点(0,0)は最初の赤(1)
    color = 1
else:
    # 螺旋は以下の順で外周タイルを囲む
    # 東辺: 右端の縦のライン (x=L) で yはL-1〜-L
    # 北辺: 上端の横のライン (y=L) で xはL-1〜-L
    # 西辺: 左端の縦のライン (x=-L) で yは-L+1〜L
    # 南辺: 下端の横のライン (y=-L) で xは-L+1〜L

    side_length = 2 * L  # 一辺の長さ

    # (x,y)がどの辺にいるか判定し、posでその辺中の何番目かを0-originで決定
    if x == L and (-L < y <= L):
        # 東辺 (上方向がy正だが、yはL-1 ~ -Lなので)
        # yはL-1から-Lまで降っている、上から下へというイメージで
        pos = L - y
        edge = 0  # 東
    elif y == L and (-L <= x < L):
        # 北辺
        pos = L - 1 - x  # xはL-1から-Lまで変化
        edge = 1  # 北
    elif x == -L and (-L <= y < L):
        # 西辺
        pos = y + L  # yは- L+1からLまで
        edge = 2  # 西
    else:
        # 南辺
        pos = x + L  # xは- L+1からLまで
        edge = 3  # 南

    # 外周のタイル数 = 8L ((2L)*4辺)
    perimeter_pos = edge * side_length + pos  # 0～8L-1の中での位置

    # 最初のタイルは原点で1(赤)
    # 塗り順は赤=1,黄=2,青=3の3色で繰り返し
    # タイルの番号は原点を0とし、螺旋の外周タイルは1から順に番号付けているイメージで
    tile_num = (2 * L - 1) ** 2 + perimeter_pos + 1  # (2L-1)^2は1つ内側の正方形のタイル数の合計

    color = (tile_num - 1) % 3 + 1

print(color)