En te basant sur cet énoncé, réécris le code suivant tout en conservant exactement sa fonctionnalité.

```python
import math

def func(n):
    #check length
    q=int(math.log10(abs(n)))
    if n*(-1)**(q%2)>0:
        p=(-10)**(q)*(n/(-10)**(q))
    else:
        p=(-10)**(q+1)
    r=n-p
    return (abs(p), r)
    
def check_safe_oc(ans, ap):
    q=int(math.log10(ap))
    if ans==0 or q>int(math.log10(ans)): return [True , q]
    anq= ((ans%10**(q+1))/10**q)*10**q
    return [int(math.log10(ap+anq))==q , q]

def addans(ans,ap):
    coc,q=check_safe_oc(ans,ap)
    if coc:
        ans+=ap
    else:
        ans  = (ans/10**(q+1))*10**(q+1)+ans%10**q
        ans +=  9*10**(q+1)
        ans = addans(ans,10**(q+2))
    return ans

#for n in range(910,100000):
#    norg=n
#    ans=0
#    while(n!=0):
#        [ap,n]=func(n)
#        ans=addans(ans,ap)
#    if norg!=checkok(ans):
#        print norg,ans,checkok(ans)
#        break
#def checkok(ans):
#    ret=0
#    sa=str(ans)
#    lena=len(sa)
#    for i in range(lena):
#        ret+=int(sa[-i-1])*(-10)**(i)
#    return ret

while(1):
    n=int(raw_input())
    if n==0:
        break
    ans=0
    while(n!=0):
        [ap,n]=func(n)    
        ans=addans(ans,ap)
    print ans
```